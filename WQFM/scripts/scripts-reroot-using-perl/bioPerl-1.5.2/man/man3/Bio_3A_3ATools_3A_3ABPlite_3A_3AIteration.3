.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::BPlite::Iteration 3"
.TH Bio::Tools::BPlite::Iteration 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::BPlite::Iteration \- object for parsing single iteration
of a PSIBLAST report
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Bio::Tools::BPpsilite;
.Ve
.PP
.Vb 2
\&   open my $FH, "t/psiblastreport.out";
\&   $report = Bio::Tools::BPpsilite->new(-fh=>\e*FH);
.Ve
.PP
.Vb 3
\&   # determine number of iterations executed by psiblast
\&   $total_iterations = $report->number_of_iterations;
\&   $last_iteration = $report->round($total_iterations);
.Ve
.PP
.Vb 8
\&   # Process only hits found in last iteration ...
\&   $oldhitarray_ref = $last_iteration->oldhits;
\&   HIT: while($sbjct = $last_iteration->nextSbjct) {
\&       $id = $sbjct->name;
\&       $is_old =  grep  /\eQ$id\eE/, @$oldhitarray_ref;
\&       if ($is_old ){next HIT;}
\&   #  do something with new hit...
\&   }
.Ve
.Sh "\s-1ALIGNMENTS\s0"
.IX Subsection "ALIGNMENTS"
.Vb 15
\&  # This assumed that you have $db pointing to a database, $out to an output file
\&  # $slxdir to a directory and $psiout    
\&  # note the alignments can only be obtained if the flag "-m 6" is run.
\&  # It might also be necessary to use the flag -v to get all alignments
\&  # 
\&    my @psiparams = ('database' => $db , 'output' => $out, 'j' => 3, 'm' => 6,
\&                     'h' => 1.e-3 , 'F' => 'T' , 'Q' => $psiout ); 
\&    my $factory = Bio::Tools::Run::StandAloneBlast->new(@psiparams);
\&    my $report = $factory->blastpgp($seq);
\&    my $total_iterations = $report->number_of_iterations();
\&    my $last_iteration = $report->round($total_iterations);
\&    my $align=$last_iteration->Align;
\&    my $slxfile=$slxdir.$id.".slx";
\&    my $slx = Bio::AlignIO->new('-format' => 'selex','-file' => ">".$slxfile );
\&    $slx->write_aln($align);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See the documentation for BPpsilite.pm for a description of the
Iteration.pm module.
.SH "AUTHORS \- Peter Schattner"
.IX Header "AUTHORS - Peter Schattner"
Email: schattner@alum.mit.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason@cgt.mc.duke.edu
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Based on work of:
Ian Korf (ikorf@sapiens.wustl.edu, http://sapiens.wustl.edu/~ikorf), 
Lorenz Pollak (lorenz@ist.org, bioperl port)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
BPlite.pm is copyright (C) 1999 by Ian Korf. 
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.Sh "query"
.IX Subsection "query"
.Vb 6
\& Title    : query
\& Usage    : $query = $obj->query();
\& Function : returns the query object
\& Example  :
\& Returns  : query object
\& Args     :
.Ve
.Sh "qlength"
.IX Subsection "qlength"
.Vb 4
\& Title    : qlength
\& Usage    : $len = $obj->qlength();
\& Returns  : length of query
\& Args     : none
.Ve
.Sh "newhits"
.IX Subsection "newhits"
.Vb 6
\& Title    :  newhits
\& Usage    : $newhits = $obj->newhits();
\& Returns  : reference to an array listing all the hits 
\&            from the current iteration which were not identified 
\&            in the previous iteration
\& Args     : none
.Ve
.Sh "oldhits"
.IX Subsection "oldhits"
.Vb 6
\& Title    :  oldhits
\& Usage    : $oldhits = $obj->oldhits();
\& Returns  : reference to an array listing all the hits from 
\&            the current iteration which were identified and 
\&            above threshold in the previous iteration
\& Args     : none
.Ve
.Sh "nextSbjct"
.IX Subsection "nextSbjct"
.Vb 7
\& Title    : nextSbjct
\& Usage    : $sbjct = $obj->nextSbjct();
\& Function : Method of iterating through all the Sbjct retrieved
\&            from parsing the report 
\&#Example  : while ( my $sbjct = $obj->nextSbjct ) {}
\& Returns  : next Sbjct object or undef if finished
\& Args     :
.Ve
.Sh "Align"
.IX Subsection "Align"
.Vb 7
\& Title    : Align
\& Usage    : $SimpleAlign = $obj->Align();
\& Function : Method to obtain a simpleAlign object from psiblast
\& Example  : $SimpleAlign = $obj->Align();
\& Returns  : SimpleAlign object or undef if not found.
\& BUG      : Only works if psiblast has been run with m 6 flag
\& Args     :
.Ve
.Sh "_readline"
.IX Subsection "_readline"
.Vb 3
\& Title   : _readline
\& Usage   : $obj->_readline
\& Function: Reads a line of input.
.Ve
.PP
.Vb 2
\&           Note that this method implicitely uses the value of $/ that is
\&           in effect when called.
.Ve
.PP
.Vb 5
\&           Note also that the current implementation does not handle pushed
\&           back input correctly unless the pushed back input ends with the
\&           value of $/.
\& Example :
\& Returns :
.Ve
.Sh "_pushback"
.IX Subsection "_pushback"
.Vb 6
\& Title   : _pushback
\& Usage   : $obj->_pushback($newvalue)
\& Function: puts a line previously read with _readline back into a buffer
\& Example :
\& Returns :
\& Args    : newvalue
.Ve
