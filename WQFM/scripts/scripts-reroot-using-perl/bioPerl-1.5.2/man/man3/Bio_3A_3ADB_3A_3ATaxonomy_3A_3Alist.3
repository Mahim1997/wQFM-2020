.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy::list 3"
.TH Bio::DB::Taxonomy::list 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Taxonomy::list \- An implementation of Bio::DB::Taxonomy
that accepts lists of words to build a database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Taxonomy;
.Ve
.PP
.Vb 4
\&  my @names = ('Eukaryota', 'Mammalia', 'Homo', 'Homo sapiens');
\&  my @ranks = qw(superkingdom class genus species);
\&  my $db = new Bio::DB::Taxonomy(-source => 'list', -names => \e@names,
\&                                                    -ranks => \e@ranks);
.Ve
.PP
.Vb 2
\&  @names = ('Eukaryota', 'Mammalia', 'Mus', 'Mus musculus');
\&  $db->add_lineage(-names => \e@names, -ranks => \e@ranks);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation which uses supplied lists of words to create a
database from which you can extract Bio::Taxon objects.
.SH "TODO"
.IX Header "TODO"
It is possible this module could do something like store the data it builds
up to disc. Would that be useful?
At any rate, this is why the module is called 'list' and not 'in_memory' or
similar.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::DB::Taxonomy::list();
\& Function: Builds a new Bio::DB::Taxonomy::list object 
\& Returns : an instance of Bio::DB::Taxonomy::list
\& Args    : optional, as per the add_lineage() method.
.Ve
.Sh "add_lineage"
.IX Subsection "add_lineage"
.Vb 9
\& Title   : add_lineage
\& Usage   : $db->add_lineage(-names => \e@names)
\& Function: Add a lineage to the database, where the lineage is described by
\&           a list of scientific names in the order root->leaf. The rank of each
\&           name can optionally be described by supplying an additional list
\&           of rank names in the same order (eg. superkingdom->species).
\& Returns : n/a
\& Args    : -names => [] : array ref of scientific names, REQUIRED
\&           -ranks => [] : array ref of rank names, same order as above, OPTIONAL
.Ve
.Sh "Bio::DB::Taxonomy Interface implementation"
.IX Subsection "Bio::DB::Taxonomy Interface implementation"
.Sh "get_taxon"
.IX Subsection "get_taxon"
.Vb 10
\& Title   : get_taxon
\& Usage   : my $taxon = $db->get_taxon(-taxonid => $taxonid)
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : just a single value which is the database id, OR named args:
\&           -taxonid => taxonomy id (to query by taxonid; NB: these are not
\&                       NCBI taxonomy ids but 'list' pre-fixed ids unique to the
\&                       list database)
\&            OR
\&           -name    => string (to query by a taxonomy name)
.Ve
.Sh "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my @taxonids = $db->get_taxonids('Homo sapiens');
\& Function: Searches for a taxonid (generated by the list module) based on a
\&           query string. Note that multiple taxonids can match to the same
\&           supplied name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing taxon's name
.Ve
.Sh "ancestor"
.IX Subsection "ancestor"
.Vb 6
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db->ancestor($taxon)
\& Function: Retrieve the full ancestor taxon of a supplied Taxon from the
\&           database. 
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.Sh "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @taxa = $db->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.Sh "Helper methods"
.IX Subsection "Helper methods"
