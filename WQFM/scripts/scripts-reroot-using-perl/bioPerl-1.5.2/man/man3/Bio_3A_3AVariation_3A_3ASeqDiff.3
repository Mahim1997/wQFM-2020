.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Variation::SeqDiff 3"
.TH Bio::Variation::SeqDiff 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Variation::SeqDiff \- Container class for mutation/variant descriptions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  $seqDiff = Bio::Variation::SeqDiff->new (
\&                                           -id => $M20132,
\&                                           -alphabet => 'rna',
\&                                           -gene_symbol => 'AR'
\&                                           -chromosome => 'X',
\&                                           -numbering => 'coding'
\&                                           );
\&  # get a DNAMutation object somehow
\&  $seqDiff->add_Variant($dnamut);
\&  print  $seqDiff->sys_name(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SeqDiff stores Bio::Variation::VariantI object references and
descriptive information common to all changes in a sequence. Mutations
are understood to be any kind of sequence markers and are expected to
occur in the same chromosome. See Bio::Variation::VariantI for details.
.PP
The methods of SeqDiff are geared towards describing mutations in
human genes using gene-based coordinate system where 'A' of the
initiator codon has number 1 and the one before it \-1. This is
according to conventions of human genetics.
.PP
There will be class Bio::Variation::Genotype to describe markers in
different chromosomes and diploid genototypes.
.PP
Classes implementing Bio::Variation::VariantI interface are 
Bio::Variation::DNAMutation, Bio::Variation::RNAChange, and
Bio::Variation::AAChange. See Bio::Variation::VariantI,
Bio::Variation::DNAMutation, Bio::Variation::RNAChange, and
Bio::Variation::AAChange for more information.
.PP
Variant objects can be added using two ways: an array passed to the
constructor or as individual Variant objects with add_Variant
method.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Eckhard Lehmann, ecky@e\-lehmann.de
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\&  Title   : new
\&  Usage   : $seqDiff = Bio::Variation::SeqDiff->new;
\&  Function: generates a new Bio::Variation::SeqDiff
\&  Returns : reference to a new object of class SeqDiff
\&  Args    :
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 3
\& Title   : id
\& Usage   : $obj->id(H0001); $id = $obj->id();
\& Function:
.Ve
.PP
.Vb 3
\&           Sets or returns the id of the seqDiff.
\&           Should be used to give the collection of variants a UID
\&           without semantic associations.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of id, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "sysname"
.IX Subsection "sysname"
.Vb 3
\& Title   : sysname
\& Usage   : $obj->sysname('5C>G'); $sysname = $obj->sysname();
\& Function:
.Ve
.PP
.Vb 5
\&           Sets or returns the systematic name of the seqDiff.  The
\&           name should follow the HUGO Mutation Database Initiative
\&           approved nomenclature. If called without first setting the
\&           value, will generate it from L<Bio::Variation::DNAMutation>
\&           objects attached.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of sysname, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "trivname"
.IX Subsection "trivname"
.Vb 3
\& Title   : trivname
\& Usage   : $obj->trivname('[A2G;T56G]'); $trivname = $obj->trivname();
\& Function:
.Ve
.PP
.Vb 5
\&           Sets or returns the trivial name of the seqDiff.
\&           The name should follow the HUGO Mutation Database Initiative
\&           approved nomenclature. If called without first setting the
\&           value, will generate it from L<Bio::Variation::AAChange>
\&           objects attached.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of trivname, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "chromosome"
.IX Subsection "chromosome"
.Vb 3
\& Title   : chromosome
\& Usage   : $obj->chromosome('X'); $chromosome = $obj->chromosome();
\& Function:
.Ve
.PP
.Vb 1
\&           Sets or returns the chromosome ("linkage group") of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of chromosome, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "gene_symbol"
.IX Subsection "gene_symbol"
.Vb 3
\& Title   : gene_symbol
\& Usage   : $obj->gene_symbol('FOS'); $gene_symbol = $obj->gene_symbol;
\& Function:
.Ve
.PP
.Vb 1
\&           Sets or returns the gene symbol for the studied CDS.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of gene_symbol, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 3
\& Title   : description
\& Usage   : $obj->description('short description'); $descr = $obj->description();
\& Function:
.Ve
.PP
.Vb 1
\&           Sets or returns the short description of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of description, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "alphabet"
.IX Subsection "alphabet"
.Vb 4
\& Title   : alphabet
\& Usage   : if( $obj->alphabet eq 'dna' ) { /Do Something/ }
\& Function: Returns the type of primary reference sequence being one of 
\&           'dna', 'rna' or 'protein'. This is case sensitive.
.Ve
.PP
.Vb 2
\& Returns : a string either 'dna','rna','protein'. 
\& Args    : none
.Ve
.Sh "numbering"
.IX Subsection "numbering"
.Vb 3
\& Title   : numbering
\& Usage   : $obj->numbering('coding'); $numbering = $obj->numbering();
\& Function:
.Ve
.PP
.Vb 2
\&           Sets or returns the string giving the numbering schema used
\&           to describe the variants.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of numbering, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "offset"
.IX Subsection "offset"
.Vb 3
\& Title   : offset
\& Usage   : $obj->offset(124); $offset = $obj->offset();
\& Function:
.Ve
.PP
.Vb 4
\&           Sets or returns the offset from the beginning of the DNA sequence 
\&           to the coordinate start used to describe variants. Typically
\&           the beginning of the coding region of the gene. 
\&           The cds_start should be 1 + offset.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of offset, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "cds_start"
.IX Subsection "cds_start"
.Vb 3
\& Title   : cds_start
\& Usage   : $obj->cds_start(123); $cds_start = $obj->cds_start();
\& Function:
.Ve
.PP
.Vb 4
\&           Sets or returns the cds_start from the beginning of the DNA
\&           sequence to the coordinate start used to describe
\&           variants. Typically the beginning of the coding region of
\&           the gene. Needs to be and is implemented as 1 + offset.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of cds_start, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "cds_end"
.IX Subsection "cds_end"
.Vb 3
\& Title   : cds_end
\& Usage   : $obj->cds_end(321); $cds_end = $obj->cds_end();
\& Function:
.Ve
.PP
.Vb 2
\&           Sets or returns the position of the last nucleotitide of the
\&           termination codon. The coordinate system starts from cds_start.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of cds_end, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "rna_offset"
.IX Subsection "rna_offset"
.Vb 3
\& Title   : rna_offset
\& Usage   : $obj->rna_offset(124); $rna_offset = $obj->rna_offset();
\& Function:
.Ve
.PP
.Vb 3
\&           Sets or returns the rna_offset from the beginning of the RNA sequence 
\&           to the coordinate start used to describe variants. Typically
\&           the beginning of the coding region of the gene.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of rna_offset, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "rna_id"
.IX Subsection "rna_id"
.Vb 3
\& Title   : rna_id
\& Usage   : $obj->rna_id('transcript#3'); $rna_id = $obj->rna_id();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the ID for original RNA sequence of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of rna_id, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "add_Variant"
.IX Subsection "add_Variant"
.Vb 3
\& Title   : add_Variant
\& Usage   : $obj->add_Variant($variant)
\& Function:
.Ve
.PP
.Vb 3
\&           Pushes one Bio::Variation::Variant into the list of variants.
\&           At the same time, creates a link from the Variant to SeqDiff
\&           using its SeqDiff method.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 1 when succeeds, 0 for failure.
\& Args    : Variant object
.Ve
.Sh "each_Variant"
.IX Subsection "each_Variant"
.Vb 3
\& Title   : each_Variant
\& Usage   : $obj->each_Variant();
\& Function:
.Ve
.PP
.Vb 1
\&            Returns a list of Variants.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : list of Variants
\& Args    : none
.Ve
.Sh "add_Gene"
.IX Subsection "add_Gene"
.Vb 3
\& Title   : add_Gene
\& Usage   : $obj->add_Gene($gene)
\& Function:
.Ve
.PP
.Vb 1
\&           Pushes one L<Bio::LiveSeq::Gene> into the list of genes.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 1 when succeeds, 0 for failure.
\& Args    : Bio::LiveSeq::Gene object
.Ve
.PP
See Bio::LiveSeq::Gene for more information.
.Sh "each_Gene"
.IX Subsection "each_Gene"
.Vb 3
\& Title   : each_Gene
\& Usage   : $obj->each_Gene();
\& Function:
.Ve
.PP
.Vb 1
\&            Returns a list of L<Bio::LiveSeq::Gene>s.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : list of Genes
\& Args    : none
.Ve
.Sh "dna_ori"
.IX Subsection "dna_ori"
.Vb 3
\& Title   : dna_ori
\& Usage   : $obj->dna_ori('atgctgctgctgct'); $dna_ori = $obj->dna_ori();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the original DNA sequence string of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of dna_ori, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "dna_mut"
.IX Subsection "dna_mut"
.Vb 3
\& Title   : dna_mut
\& Usage   : $obj->dna_mut('atgctggtgctgct'); $dna_mut = $obj->dna_mut();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets or returns the mutated DNA sequence of the seqDiff.
\&            If sequence has not been set generates it from the
\&            original sequence and DNA mutations.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of dna_mut, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "rna_ori"
.IX Subsection "rna_ori"
.Vb 3
\& Title   : rna_ori
\& Usage   : $obj->rna_ori('atgctgctgctgct'); $rna_ori = $obj->rna_ori();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the original RNA sequence of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of rna_ori, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "rna_mut"
.IX Subsection "rna_mut"
.Vb 3
\& Title   : rna_mut
\& Usage   : $obj->rna_mut('atgctggtgctgct'); $rna_mut = $obj->rna_mut();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the mutated RNA sequence of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of rna_mut, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "aa_ori"
.IX Subsection "aa_ori"
.Vb 3
\& Title   : aa_ori
\& Usage   : $obj->aa_ori('MAGVLL*'); $aa_ori = $obj->aa_ori();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the original protein sequence of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of aa_ori, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "aa_mut"
.IX Subsection "aa_mut"
.Vb 3
\& Title   : aa_mut
\& Usage   : $obj->aa_mut('MA*'); $aa_mut = $obj->aa_mut();
\& Function:
.Ve
.PP
.Vb 1
\&            Sets or returns the mutated protein sequence of the seqDiff.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of aa_mut, a scalar
\& Args    : newvalue (optional)
.Ve
.Sh "seqobj"
.IX Subsection "seqobj"
.Vb 3
\& Title   : seqobj
\& Usage   : $dnaobj = $obj->seqobj('dna_mut');
\& Function:
.Ve
.PP
.Vb 2
\&            Returns the any original or mutated sequences as a
\&            Bio::PrimarySeq object.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : Bio::PrimarySeq object for the requested sequence
\& Args    : string, method name for the sequence requested
.Ve
.PP
See Bio::PrimarySeq for more information.
.Sh "alignment"
.IX Subsection "alignment"
.Vb 3
\& Title   : alignment
\& Usage   : $obj->alignment
\& Function:
.Ve
.PP
.Vb 3
\&           Returns a pretty RNA/AA sequence alignment from linked
\&           objects.  Under construction: Only simple coding region
\&           point mutations work.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 
\& Args    : none
.Ve
