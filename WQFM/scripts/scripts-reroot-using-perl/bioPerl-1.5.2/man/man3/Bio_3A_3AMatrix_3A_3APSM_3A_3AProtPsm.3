.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::ProtPsm 3"
.TH Bio::Matrix::PSM::ProtPsm 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Matrix::PSM::ProtPsm \- handle combination of site matricies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Matrix::PSM::IO;
.Ve
.PP
.Vb 2
\&  #To get a ProtPsm object from a file use the Psm parser:
\&  my $psmIO =  new Bio::Matrix::PSM::IO(-format=>'psiblast', -file=>$file);
.Ve
.PP
.Vb 4
\&  # Now go through all entities in the file with next_psm, which
\&  # returns a Psm object see Bio::Matrix::PSM::IO for detailed
\&  # documentation (matrix predictions or matrix sequence matches or
\&  # both):
.Ve
.PP
.Vb 13
\&  while (my $psm=$psmIO->next_psm) {
\&     my %psm_header = $psm->header;
\&     my $ic    = $psm_header{IC};
\&     my $sites = $psm_header{sites};
\&     my $width = $psm_header{width};
\&     my $score = $psm_header{e_val};
\&     my $IUPAC = $psm->IUPAC;
\&     my $instances = $psm->instances;
\&     foreach my $instance (@{$instances}) {
\&       my $id = $instance->primary_id;
\&       #Do something with the id
\&     }
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
To handle a combination of site matrices and/or their corresponding sequence
matches (instances). This object inherits from Bio::Matrix::PSM::ProtMatrix, so
you can methods from that class. It may hold also an array of
Bio::Matrix::PSM::InstanceSite object, but you will have to retrieve these
through Bio::Matrix::PSM::ProtPsm\->instances method (see below). To some
extent this is an expanded ProtMatrix object, holding data from analysis that
also deal with sequence matches of a particular matrix.
.Sh "\s-1DESIGN\s0 \s-1ISSUES\s0"
.IX Subsection "DESIGN ISSUES"
This does not make too much sense to me I am mixing \s-1PSM\s0 with \s-1PSM\s0 sequence
matches Though they are very closely related, I am not satisfied by the way
this is implemented here.  Heikki suggested different objects when one has
something like meme But does this mean we have to write a different objects for
mast, meme, transfac, theiresias, etc.?  To me the best way is to return
SiteMatrix object + arrray of InstanceSite objects and then mast will return
undef for SiteMatrix and transfac will return undef for InstanceSite. Probably
I cannot see some other design issues that might arise from such approach, but
it seems more straightforward.  Hilmar does not like this beacause it is an
exception from the general BioPerl rules. Should I leave this as an option?
Also the header rightfully belongs the driver object, and could be retrieved as
hashes.  I do not think it can be done any other way, unless we want to create
even one more object with very unclear content.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- James Thompson"
.IX Header "AUTHOR - James Thompson"
Email tex@biosysadmin.com
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ProtMatrix, meme, transfac, psiblast, InstanceSite
.SH "APPENDIX"
.IX Header "APPENDIX"
.Sh "new"
.IX Subsection "new"
.Vb 28
\& Title   : new
\& Usage   : my $psm = Bio::Matrix::PSM::ProtPsm->new(
\&              -pS => [ '0', '33', '0', '16', '1', '12', '11', '25' ],
\&              -pF => [ '0', '0', '2', '0', '3', '0', '0', '0' ],
\&              -pT => [ '0', '8', '7', '10', '1', '2', '7', '8' ],
\&              -pN => [ '0', '0', '2', '13', '0', '36', '1', '4' ],
\&              -pK => [ '0', '5', '0', '13', '1', '15', '0', '2' ],
\&              -pY => [ '0', '0', '0', '0', '0', '0', '0', '0' ],
\&              -pE => [ '0', '41', '1', '12', '0', '0', '0', '15' ],
\&              -pV => [ '0', '3', '9', '0', '2', '0', '3', '1' ],
\&              -pQ => [ '0', '0', '0', '15', '0', '4', '0', '3' ],
\&              -pM => [ '100', '0', '66', '0', '2', '0', '0', '0' ],
\&              -pC => [ '0', '0', '0', '0', '0', '0', '0', '0' ],
\&              -pL => [ '0', '0', '8', '0', '25', '0', '4', '0' ],
\&              -pA => [ '0', '10', '1', '9', '2', '0', '22', '16' ],
\&              -pW => [ '0', '0', '0', '0', '0', '0', '0', '0' ],
\&              -pP => [ '0', '0', '0', '0', '3', '1', '45', '0' ],
\&              -pH => [ '0', '0', '0', '0', '0', '0', '1', '0' ],
\&              -pD => [ '0', '0', '1', '7', '2', '2', '0', '22' ],
\&              -pR => [ '0', '0', '0', '3', '0', '27', '0', '0' ],
\&              -pI => [ '0', '0', '3', '0', '59', '1', '2', '3' ],
\&              -pG => [ '0', '0', '0', '1', '0', '0', '4', '1' ],
\&              -IC => $ic,
\&              -sites => $istes,
\&              -width => $width,
\&              -e_val => $e_val, 
\&              -instances => $instances, 
\&           }
.Ve
.PP
.Vb 5
\& Function: Creates a new Bio::Matrix::PSM::ProtPsm object
\& Throws  :
\& Example :
\& Returns :  Bio::Matrix::PSM::Psm object
\& Args    :  hash
.Ve
.Sh "instances"
.IX Subsection "instances"
.Vb 8
\& Title   : instances
\& Usage   :   my @instances=@{$psm->instances};
\& Function: Gets/sets the instances (Bio::Matrix::PSM::InstanceSite objects)
\&        associated with the Psm object
\& Throws  :
\& Example :
\& Returns :  array reference (Bio::Matrix::PSM::InstanceSite objects)
\& Args    :  array reference (Bio::Matrix::PSM::InstanceSite objects)
.Ve
.Sh "header"
.IX Subsection "header"
.Vb 14
\& Title   : header
\& Usage   :  my %header=$psm->header;
\&        my $ic=$psm->header('IC');
\& Function: Gets the general information, common for most files,
\&       dealing with PSM such as information content (IC), score
\&       (e-value, etc.), number of sites (sites) and width. This
\&       list may expand. The current list should be in
\&       @Bio::Matrix::PSM::Psm::HEADER. Returns an epty list if an
\&       argument is supplied that is not in
\&       @Bio::Matrix::PSM::meme::HEADER.
\& Throws  :
\& Example :
\& Returns :  hash or string
\& Args    :  string (IC, e_val...)
.Ve
.Sh "matrix"
.IX Subsection "matrix"
.Vb 7
\& Title   :  matrix
\& Usage   :  my $matrix = $psm->matrix;
\& Function:  Gets/sets the SiteMatrix related information
\& Throws  :
\& Example :
\& Returns :  Bio::Matrix::PSM::SiteMatrix objects
\& Args    :  Bio::Matrix::PSM::SiteMatrix objects
.Ve
