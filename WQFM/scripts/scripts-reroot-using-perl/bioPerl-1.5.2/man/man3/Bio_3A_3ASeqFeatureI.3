.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeatureI 3"
.TH Bio::SeqFeatureI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeatureI \- Abstract interface of a Sequence Feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # get a seqfeature somehow, eg, from a Sequence with Features attached
.Ve
.PP
.Vb 4
\&    foreach $feat ( $seq->get_SeqFeatures() ) {
\&       print "Feature from ", $feat->start, "to ",
\&               $feat->end, " Primary tag  ", $feat->primary_tag,
\&                  ", produced by ", $feat->source_tag(), "\en";
.Ve
.PP
.Vb 5
\&       if( $feat->strand == 0 ) {
\&                    print "Feature applicable to either strand\en";
\&       } else {
\&          print "Feature on strand ", $feat->strand,"\en"; # -1,1
\&       }
.Ve
.PP
.Vb 4
\&       print "feature location is ",$feat->start, "..",
\&          $feat->end, " on strand ", $feat->strand, "\en";
\&       print "easy utility to print locations in GenBank/EMBL way ",
\&          $feat->location->to_FTstring(), "\en";
.Ve
.PP
.Vb 8
\&       foreach $tag ( $feat->get_all_tags() ) {
\&                    print "Feature has tag ", $tag, " with values, ",
\&                      join(' ',$feat->get_tag_values($tag)), "\en";
\&       }
\&            print "new feature\en" if $feat->has_tag('new');
\&            # features can have sub features
\&            my @subfeat = $feat->get_SeqFeatures();
\&         }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface is the functions one can expect for any Sequence
Feature, whatever its implementation or whether it is a more complex
type (eg, a Gene). This object does not actually provide any
implemention, it just provides the definitions of what methods one can
call. See Bio::SeqFeature::Generic for a good standard implementation
of this object
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "Bio::SeqFeatureI specific methods"
.IX Header "Bio::SeqFeatureI specific methods"
New method interfaces.
.Sh "get_SeqFeatures"
.IX Subsection "get_SeqFeatures"
.Vb 5
\& Title   : get_SeqFeatures
\& Usage   : @feats = $feat->get_SeqFeatures();
\& Function: Returns an array of sub Sequence Features
\& Returns : An array
\& Args    : none
.Ve
.Sh "display_name"
.IX Subsection "display_name"
.Vb 5
\& Title   : display_name
\& Usage   : $name = $feat->display_name()
\& Function: Returns the human-readable name of the feature for displays.
\& Returns : a string
\& Args    : none
.Ve
.Sh "primary_tag"
.IX Subsection "primary_tag"
.Vb 6
\& Title   : primary_tag
\& Usage   : $tag = $feat->primary_tag()
\& Function: Returns the primary tag for a feature,
\&           eg 'exon'
\& Returns : a string
\& Args    : none
.Ve
.Sh "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $tag = $feat->source_tag()
\& Function: Returns the source tag for a feature,
\&           eg, 'genscan'
\& Returns : a string
\& Args    : none
.Ve
.Sh "attach_seq"
.IX Subsection "attach_seq"
.Vb 5
\& Title   : attach_seq
\& Usage   : $sf->attach_seq($seq)
\& Function: Attaches a Bio::Seq object to this feature. This
\&           Bio::Seq object is for the *entire* sequence: ie
\&           from 1 to 10000
.Ve
.PP
.Vb 6
\&           Note that it is not guaranteed that if you obtain a feature from
\&           an object in bioperl, it will have a sequence attached. Also,
\&           implementors of this interface can choose to provide an empty
\&           implementation of this method. I.e., there is also no guarantee
\&           that if you do attach a sequence, seq() or entire_seq() will not
\&           return undef.
.Ve
.PP
.Vb 6
\&           The reason that this method is here on the interface is to enable
\&           you to call it on every SeqFeatureI compliant object, and
\&           that it will be implemented in a useful way and set to a useful
\&           value for the great majority of use cases. Implementors who choose
\&           to ignore the call are encouraged to specifically state this in
\&           their documentation.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : TRUE on success
\& Args    : a Bio::PrimarySeqI compliant object
.Ve
.Sh "seq"
.IX Subsection "seq"
.Vb 8
\& Title   : seq
\& Usage   : $tseq = $sf->seq()
\& Function: returns the truncated sequence (if there is a sequence attached)
\&           for this feature
\& Example :
\& Returns : sub seq (a Bio::PrimarySeqI compliant object) on attached sequence
\&           bounded by start & end, or undef if there is no sequence attached
\& Args    : none
.Ve
.Sh "entire_seq"
.IX Subsection "entire_seq"
.Vb 7
\& Title   : entire_seq
\& Usage   : $whole_seq = $sf->entire_seq()
\& Function: gives the entire sequence that this seqfeature is attached to
\& Example :
\& Returns : a Bio::PrimarySeqI compliant object, or undef if there is no
\&           sequence attached
\& Args    : none
.Ve
.Sh "seq_id"
.IX Subsection "seq_id"
.Vb 6
\& Title   : seq_id
\& Usage   : $obj->seq_id($newval)
\& Function: There are many cases when you make a feature that you
\&           do know the sequence name, but do not know its actual
\&           sequence. This is an attribute such that you can store
\&           the ID (e.g., display_id) of the sequence.
.Ve
.PP
.Vb 5
\&           This attribute should *not* be used in GFF dumping, as
\&           that should come from the collection in which the seq
\&           feature was found.
\& Returns : value of seq_id
\& Args    : newvalue (optional)
.Ve
.Sh "gff_string"
.IX Subsection "gff_string"
.Vb 4
\& Title   : gff_string
\& Usage   : $str = $feat->gff_string;
\&           $str = $feat->gff_string($gff_formatter);
\& Function: Provides the feature information in GFF format.
.Ve
.PP
.Vb 4
\&           The implementation provided here returns GFF2 by default. If you
\&           want a different version, supply an object implementing a method
\&           gff_string() accepting a SeqFeatureI object as argument. E.g., to
\&           obtain GFF1 format, do the following:
.Ve
.PP
.Vb 2
\&                my $gffio = Bio::Tools::GFF->new(-gff_version => 1);
\&                $gff1str = $feat->gff_string($gff1io);
.Ve
.PP
.Vb 2
\& Returns : A string
\& Args    : Optionally, an object implementing gff_string().
.Ve
.Sh "_static_gff_formatter"
.IX Subsection "_static_gff_formatter"
.Vb 6
\& Title   : _static_gff_formatter
\& Usage   :
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.SH "Decorating methods"
.IX Header "Decorating methods"
These methods have an implementation provided by Bio::SeqFeatureI,
but can be validly overwritten by subclasses
.Sh "spliced_seq"
.IX Subsection "spliced_seq"
.Vb 1
\&  Title   : spliced_seq
.Ve
.PP
.Vb 2
\&  Usage   : $seq = $feature->spliced_seq()
\&            $seq = $feature_with_remote_locations->spliced_seq($db_for_seqs)
.Ve
.PP
.Vb 6
\&  Function: Provides a sequence of the feature which is the most
\&            semantically "relevant" feature for this sequence. A default
\&            implementation is provided which for simple cases returns just
\&            the sequence, but for split cases, loops over the split location
\&            to return the sequence. In the case of split locations with
\&            remote locations, eg
.Ve
.PP
.Vb 1
\&            join(AB000123:5567-5589,80..1144)
.Ve
.PP
.Vb 4
\&            in the case when a database object is passed in, it will attempt
\&            to retrieve the sequence from the database object, and "Do the right thing",
\&            however if no database object is provided, it will generate the correct
\&            number of N's (DNA) or X's (protein, though this is unlikely).
.Ve
.PP
.Vb 2
\&            This function is deliberately "magical" attempting to second guess
\&            what a user wants as "the" sequence for this feature.
.Ve
.PP
.Vb 2
\&            Implementing classes are free to override this method with their
\&            own magic if they have a better idea what the user wants.
.Ve
.PP
.Vb 9
\&  Args    : [optional]
\&            -db        A L<Bio::DB::RandomAccessI> compliant object if
\&                       one needs to retrieve remote seqs.
\&            -nosort    boolean if the locations should not be sorted
\&                       by start location.  This may occur, for instance,
\&                       in a circular sequence where a gene span starts
\&                       before the end of the sequence and ends after the
\&                       sequence start. Example : join(15685..16260,1..207)
\&  Returns : A L<Bio::PrimarySeqI> object
.Ve
.Sh "location"
.IX Subsection "location"
.Vb 6
\& Title   : location
\& Usage   : my $location = $seqfeature->location()
\& Function: returns a location object suitable for identifying location
\&           of feature on sequence or parent feature
\& Returns : Bio::LocationI object
\& Args    : none
.Ve
.Sh "primary_id"
.IX Subsection "primary_id"
.Vb 6
\& Title   : primary_id
\& Usage   : $obj->primary_id($newval)
\& Function:
\& Example :
\& Returns : value of primary_id (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.PP
Primary \s-1ID\s0 is a synonym for the tag '\s-1ID\s0'
.SH "Bio::RangeI methods"
.IX Header "Bio::RangeI methods"
These methods are inherited from RangeI and can be used
directly from a SeqFeatureI interface. Remember that a
SeqFeature is-a RangeI, and so wherever you see RangeI you
can use a feature ($r in the below documentation).
.Sh "\fIstart()\fP"
.IX Subsection "start()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIend()\fP"
.IX Subsection "end()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIstrand()\fP"
.IX Subsection "strand()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIoverlaps()\fP"
.IX Subsection "overlaps()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIcontains()\fP"
.IX Subsection "contains()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIequals()\fP"
.IX Subsection "equals()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIintersection()\fP"
.IX Subsection "intersection()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.Sh "\fIunion()\fP"
.IX Subsection "union()"
.Vb 1
\& See L<Bio::RangeI>
.Ve
.SH "Bio::AnnotatableI methods"
.IX Header "Bio::AnnotatableI methods"
.Sh "\fIhas_tag()\fP"
.IX Subsection "has_tag()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
.Sh "\fIremove_tag()\fP"
.IX Subsection "remove_tag()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
.Sh "\fIadd_tag_value()\fP"
.IX Subsection "add_tag_value()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
.Sh "\fIget_tag_values()\fP"
.IX Subsection "get_tag_values()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
.Sh "\fIget_tagset_values()\fP"
.IX Subsection "get_tagset_values()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
.Sh "\fIget_all_tags()\fP"
.IX Subsection "get_all_tags()"
.Vb 1
\& B<Deprecated>.  See L<Bio::AnnotatableI>
.Ve
