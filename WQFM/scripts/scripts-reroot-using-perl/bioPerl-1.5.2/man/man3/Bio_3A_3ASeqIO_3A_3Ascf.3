.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::scf 3"
.TH Bio::SeqIO::scf 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::scf \- .scf file input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly. Use it via the Bio::SeqIO class, see
Bio::SeqIO for more information.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform .scf files to and from Bio::Seq::SequenceTrace
objects.  Mechanisms are present to retrieve trace data from scf
files.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR Chad Matsalla"
.IX Header "AUTHOR Chad Matsalla"
Chad Matsalla
bioinformatics@dieselwurks.com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason@bioperl.org
Tony Cox, avc@sanger.ac.uk
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
Nancy Hansen, nhansen at mail.nih.gov
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "\fInext_seq()\fP"
.IX Subsection "next_seq()"
.Vb 12
\& Title   : next_seq()
\& Usage   : $scf = $stream->next_seq()
\& Function: returns the next scf sequence in the stream
\& Returns : a Bio::Seq::SequenceTrace object
\& Args    : NONE
\& Notes   : Fills the interface specification for SeqIO.
\&                The SCF specification does not provide for having more then
\&           one sequence in a given scf. So once the filehandle has been open
\&           and passed to SeqIO do not expect to run this function more then
\&           once on a given scf unless you embraced and extended the SCF
\&           standard.  SCF comments are accessible through the Bio::SeqI
\&           interface method annotation().
.Ve
.Sh "\fI_get_v3_quality()\fP"
.IX Subsection "_get_v3_quality()"
.Vb 6
\& Title   : _get_v3_quality()
\& Usage   : $self->_get_v3_quality()
\& Function: Set the base qualities from version3 scf
\& Returns : Nothing. Alters $self.
\& Args    : None.
\& Notes   :
.Ve
.Sh "_get_v3_peak_indices($buffer)"
.IX Subsection "_get_v3_peak_indices($buffer)"
.Vb 6
\& Title   : _get_v3_peak_indices($buffer)
\& Usage   : $self->_get_v3_peak_indices($buffer);
\& Function: Unpacks the base accuracies for version3 scf
\& Returns : Nothing. Alters $self
\& Args    : A scalar containing binary data.
\& Notes   :
.Ve
.Sh "_get_v3_base_accuracies($buffer)"
.IX Subsection "_get_v3_base_accuracies($buffer)"
.Vb 6
\& Title   : _get_v3_base_accuracies($buffer)
\& Usage   : $self->_get_v3_base_accuracies($buffer)
\& Function: Set the base accuracies for version 3 scf's
\& Returns : Nothing. Alters $self.
\& Args    : A scalar containing binary data.
\& Notes   :
.Ve
.Sh "_get_comments($buffer)"
.IX Subsection "_get_comments($buffer)"
.Vb 9
\& Title   : _get_comments($buffer)
\& Usage   : $self->_get_comments($buffer);
\& Function: Gather the comments section from the scf and parse it into its
\&                components.
\& Returns : a Bio::Annotation::Collection object
\& Args    : The buffer. It is expected that the buffer contains a binary
\&                string for the comments section of an scf file according to
\&                the scf file specifications.
\& Notes   :
.Ve
.Sh "\fI_get_header()\fP"
.IX Subsection "_get_header()"
.Vb 9
\& Title   : _get_header($buffer)
\& Usage   : $self->_get_header($buffer);
\& Function: Gather the header section from the scf and parse it into its
\&           components.
\& Returns : Reference to a hash containing the header components.
\& Args    : The buffer. It is expected that the buffer contains a binary
\&           string for the header section of an scf file according to the
\&           scf file specifications.
\& Notes   : None.
.Ve
.Sh "_parse_v2_bases($buffer)"
.IX Subsection "_parse_v2_bases($buffer)"
.Vb 9
\& Title   : _parse_v2_bases($buffer)
\& Usage   : $self->_parse_v2_bases($buffer);
\& Function: Gather the bases section from the scf and parse it into its
\&           components.
\& Returns :
\& Args    : The buffer. It is expected that the buffer contains a binary
\&           string for the bases section of an scf file according to the
\&           scf file specifications.
\& Notes   : None.
.Ve
.Sh "_parse_v2_traces(\e@traces_array)"
.IX Subsection "_parse_v2_traces(@traces_array)"
.Vb 6
\& Title   : _pares_v2_traces(\e@traces_array)
\& Usage   : $self->_parse_v2_traces(\e@traces_array);
\& Function: Parses an scf Version2 trace array into its base components.
\& Returns : Nothing. Modifies $self.
\& Args    : A reference to an array of the unpacked traces section of an
\&           scf version2 file.
.Ve
.Sh "\fIget_header()\fP"
.IX Subsection "get_header()"
.Vb 6
\& Title   : get_header()
\& Usage   : %header = %{$obj->get_header()};
\& Function: Return the header for this scf.
\& Returns : A reference to a hash containing the header for this scf.
\& Args    : None.
\& Notes   :
.Ve
.Sh "\fIget_comments()\fP"
.IX Subsection "get_comments()"
.Vb 6
\& Title   : get_comments()
\& Usage   : %comments = %{$obj->get_comments()};
\& Function: Return the comments for this scf.
\& Returns : A Bio::Annotation::Collection object
\& Args    : None.
\& Notes   :
.Ve
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 14
\& Title   : write_seq(-Quality => $swq, <comments>)
\& Usage   : $obj->write_seq(
\&               -target => $swq,
\&                        -version => 2,
\&                        -CONV => "Bioperl-Chads Mighty SCF writer.");
\& Function: Write out an scf.
\& Returns : Nothing.
\& Args    : Requires: a reference to a Bio::Seq::Quality object to form the
\&           basis for the scf.
\&           if -version is provided, it should be "2" or "3". A SCF of that
\&           version will be written.
\&           Any other arguments are assumed to be comments and are put into
\&           the comments section of the scf. Read the specifications for scf
\&           to decide what might be good to put in here.
.Ve
.PP
.Vb 10
\& Notes   :
\&          For best results, use a SequenceTrace object.
\&          The things that you need to write an scf:
\&          a) sequence
\&          b) quality
\&          c) peak indices
\&          d) traces
\&          - You _can_ write an scf with just a and b by passing in a
\&               SequenceWithQuality object- false traces will be synthesized
\&               for you.
.Ve
.Sh "\fI_get_binary_header()\fP"
.IX Subsection "_get_binary_header()"
.Vb 8
\& Title   : _get_binary_header();
\& Usage   : $self->_get_binary_header();
\& Function: Provide the binary string that will be used as the header for
\&                a scfv2 document.
\& Returns : A binary string.
\& Args    : None. Uses the entries in the $self->{'header'} hash. These
\&                are set on construction of the object (hopefully correctly!).
\& Notes   :
.Ve
.Sh "_get_binary_traces($version,$ref)"
.IX Subsection "_get_binary_traces($version,$ref)"
.Vb 9
\& Title   : _set_binary_tracesbases($version,$ref)
\& Usage   : $self->_set_binary_tracesbases($version,$ref);
\& Function: Constructs the trace and base strings for all scfs
\& Returns : Nothing. Alters self.
\& Args    : $version - "2" or "3"
\&           $sequence - a scalar containing arbitrary sequence data
\&           $ref - a reference to either a SequenceTraces or a
\&          SequenceWithQuality object.
\& Notes   : This is a really complicated thing.
.Ve
.Sh "_make_trace_string($version)"
.IX Subsection "_make_trace_string($version)"
.Vb 7
\& Title   : _make_trace_string($version)
\& Usage   : $self->_make_trace_string($version)
\& Function: Merges trace data for the four bases to produce an scf
\&           trace string. _requires_ $version
\& Returns : Nothing. Alters $self.
\& Args    : $version - a version number. "2" or "3"
\& Notes   :
.Ve
.Sh "_get_binary_comments(\e@comments)"
.IX Subsection "_get_binary_comments(@comments)"
.Vb 9
\& Title   : _get_binary_comments(\e@comments)
\& Usage   : $self->_get_binary_comments(\e@comments);
\& Function: Provide a binary string that will be the comments section of
\&           the scf file. See the scf specifications for detailed
\&           specifications for the comments section of an scf file. Hint:
\&           CODE=something\enBODE=something\en\e0
\& Returns :
\& Args    : A reference to an array containing comments.
\& Notes   : None.
.Ve
.Sh "_delta(\e@trace_data,$direction)"
.IX Subsection "_delta(@trace_data,$direction)"
.Vb 9
\& Title   : _delta(\e@trace_data,$direction)
\& Usage   : $self->_delta(\e@trace_data,$direction);
\& Function:
\& Returns : A reference to an array containing modified trace values.
\& Args    : A reference to an array containing trace data and a string
\&           indicating the direction of conversion. ("forward" or
\&           "backward").
\& Notes   : This code is taken from the specification for SCF3.2.
\&           http://www.mrc-lmb.cam.ac.uk/pubseq/manual/formats_unix_4.html
.Ve
.Sh "_unpack_magik($buffer)"
.IX Subsection "_unpack_magik($buffer)"
.Vb 7
\& Title   : _unpack_magik($buffer)
\& Usage   : $self->_unpack_magik($buffer)
\& Function: What unpack specification should be used? Try them all.
\& Returns : Nothing.
\& Args    : A buffer containing arbitrary binary data.
\& Notes   : Eliminate the ambiguity and the guesswork. Used in the
\&           adaptation of _delta(), mostly.
.Ve
.Sh "read_from_buffer($filehandle,$buffer,$length)"
.IX Subsection "read_from_buffer($filehandle,$buffer,$length)"
.Vb 7
\& Title   : read_from_buffer($filehandle,$buffer,$length)
\& Usage   : $self->read_from_buffer($filehandle,$buffer,$length);
\& Function: Read from the buffer.
\& Returns : $buffer, containing a read of $length
\& Args    : a filehandle, a buffer, and a read length
\& Notes   : I just got tired of typing
\&           "unless (length($buffer) == $length)" so I put it here.
.Ve
.Sh "\fI_dump_keys()\fP"
.IX Subsection "_dump_keys()"
.Vb 6
\& Title   : _dump_keys()
\& Usage   : &_dump_keys($a_reference_to_some_hash)
\& Function: Dump out the keys in a hash.
\& Returns : Nothing.
\& Args    : A reference to a hash.
\& Notes   : A debugging method.
.Ve
.Sh "\fI_dump_base_accuracies()\fP"
.IX Subsection "_dump_base_accuracies()"
.Vb 6
\& Title   : _dump_base_accuracies()
\& Usage   : $self->_dump_base_accuracies();
\& Function: Dump out the v3 base accuracies in an easy to read format.
\& Returns : Nothing.
\& Args    : None.
\& Notes   : A debugging method.
.Ve
.Sh "\fI_dump_peak_indices_incoming()\fP"
.IX Subsection "_dump_peak_indices_incoming()"
.Vb 6
\& Title   : _dump_peak_indices_incoming()
\& Usage   : $self->_dump_peak_indices_incoming();
\& Function: Dump out the v3 peak indices in an easy to read format.
\& Returns : Nothing.
\& Args    : None.
\& Notes   : A debugging method.
.Ve
.Sh "\fI_dump_base_accuracies_incoming()\fP"
.IX Subsection "_dump_base_accuracies_incoming()"
.Vb 6
\& Title   : _dump_base_accuracies_incoming()
\& Usage   : $self->_dump_base_accuracies_incoming();
\& Function: Dump out the v3 base accuracies in an easy to read format.
\& Returns : Nothing.
\& Args    : None.
\& Notes   : A debugging method.
.Ve
.Sh "\fI_dump_comments()\fP"
.IX Subsection "_dump_comments()"
.Vb 6
\& Title   : _dump_comments()
\& Usage   : $self->_dump_comments();
\& Function: Debug dump the comments section from the scf.
\& Returns : Nothing.
\& Args    : Nothing.
\& Notes   : None.
.Ve
