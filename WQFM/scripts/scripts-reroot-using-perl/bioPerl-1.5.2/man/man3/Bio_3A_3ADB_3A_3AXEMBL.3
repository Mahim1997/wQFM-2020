.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::XEMBL 3"
.TH Bio::DB::XEMBL 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::XEMBL \- Database object interface for XEMBL entry retrieval
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::XEMBL;
.Ve
.PP
.Vb 1
\&  $embl = new Bio::DB::XEMBL;
.Ve
.PP
.Vb 3
\&  # remember that XEMBL_ID does not equal GenBank_ID!
\&  $seq = $embl->get_Seq_by_id('BUM'); # EMBL ID
\&        print "cloneid is ", $seq->id, "\en";
.Ve
.PP
.Vb 3
\&  # or changeing to accession number and Fasta format ...
\&  $seq = $embl->get_Seq_by_acc('J02231'); # XEMBL ACC
\&        print "cloneid is ", $seq->id, "\en";
.Ve
.PP
.Vb 6
\&  # especially when using versions, you better be prepared
\&  # in not getting what what want
\&  eval {
\&      $seq = $embl->get_Seq_by_version('J02231.1'); # XEMBL VERSION
\&  };
\&  print "cloneid is ", $seq->id, "\en" unless $@;
.Ve
.PP
.Vb 4
\&  my $seqio = $embl->get_Stream_by_batch(['U83300','U83301','U83302']);
\&  while( my $clone =  $seqio->next_seq ) {
\&        print "cloneid is ", $clone->id, "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows the dynamic retrieval of Bio::Seq objects from the \s-1XEMBL\s0
database. See Bio::Seq for details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email Lincoln Stein <lstein@cshl.org>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 6
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db->get_Seq_by_id('ROA1_HUMAN')
\& Function: Gets a Bio::Seq object by its name
\& Returns : a Bio::Seq object
\& Args    : the id (as a string) of a sequence
\& Throws  : "id does not exist" exception
.Ve
.Sh "get_Stream_by_batch"
.IX Subsection "get_Stream_by_batch"
.Vb 9
\&  Title   : get_Stream_by_batch
\&  Usage   : $seq = $db->get_Stream_by_batch($ref);
\&  Function: Retrieves Seq objects from XEMBL 'en masse', rather than one
\&            at a time. Currently this is not particularly efficient, as
\&            it loads the entire result into memory and parses it.
\&  Example :
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : an array reference containing a list of unique 
\&            ids/accession numbers.
.Ve
.Sh "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 6
\& Title   : get_Seq_by_acc
\& Usage   : $seq = $db->get_Seq_by_acc('X77802');
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : accession number (as a string)
\& Throws  : "acc does not exist" exception
.Ve
.Sh "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 6
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db->get_Seq_by_version('X77802.1');
\& Function: Gets a Bio::Seq object by sequence version
\& Returns : A Bio::Seq object
\& Args    : accession.version (as a string)
\& Throws  : "acc.version does not exist" exception
.Ve
.Sh "endpoint"
.IX Subsection "endpoint"
.Vb 5
\& Title   : endpoint
\& Usage   : $endpoint = $db->endpoint([$endpoint])
\& Function: Gets/sets endpoint for SOAP connection
\& Returns : old endpoint
\& Args    : new endpoint(optional)
.Ve
.Sh "new_from_registry"
.IX Subsection "new_from_registry"
.Vb 7
\& Title   : new_from_registry
\& Usage   : $db = Bio::DB::XEMBL->new_from_registry(%config)
\& Function: creates a new Bio::DB::XEMBL object in a Bio::DB::Registry-
\&           compatible fashion
\& Returns : new Bio::DB::XEMBL
\& Args    : provided by the registry, see below
\& Status  : Public
.Ve
.PP
The following registry-configuration tags are recognized:
.PP
.Vb 3
\&  location     Endpoint for the XEMBL service.  Currently the only
\&               known valid endpoint is 
\&               http://www.ebi.ac.uk:80/cgi-bin/xembl/XEMBL-SOAP.pl
.Ve
.PP
\&\s-1NOTE:\s0 Since this info is supposed to be coming from \s-1WSDL\s0, the location
is currently ignored.
