.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::Glyph::Factory 3"
.TH Bio::Graphics::Glyph::Factory 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graphics::Glyph::Factory \- Factory for Bio::Graphics::Glyph objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Graphics::Panel.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used internally by Bio::Graphics to generate new Glyph
objects by combining a list of features with the user's desired
configuration.  It is intended to be used internally by Bio::Graphics.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email \- lstein@cshl.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with an \*(L"_\*(R"
(underscore).
.Sh "new"
.IX Subsection "new"
.Vb 13
\&  Title   : new
\&  Usage   : $f = Bio::Graphics::Glyph::Factory->new(
\&                     -stylesheet => $stylesheet,
\&                     -glyph_map  => $glyph_map,
\&                     -options    => $options);
\&  Function : create a new Bio::Graphics::Glyph::Factory object
\&  Returns  : the new object
\&  Args     : $stylesheet is a Bio::Das::Stylesheet object that can
\&                 convert Bio::Das feature objects into glyph names and
\&                 associated options.
\&             $glyph_map is a hash that maps primary tags to glyph names.
\&             $options is a hash that maps option names to their values.
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "clone"
.IX Subsection "clone"
.Vb 6
\&  Title    : clone
\&  Usage    : $f2 = $f->clone
\&  Function : Deep copy of a factory object
\&  Returns  : a deep copy of the factory object
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "stylesheet"
.IX Subsection "stylesheet"
.Vb 6
\&  Title    : stylesheet
\&  Usage    : $stylesheet = $f->stylesheet
\&  Function : accessor for stylesheet
\&  Returns  : a Bio::Das::Stylesheet object
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "glyph_map"
.IX Subsection "glyph_map"
.Vb 6
\&  Title    : glyph_map
\&  Usage    : $map = $f->glyph_map
\&  Function : accessor for the glyph map
\&  Returns  : a hash mapping primary tags to glyphs
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "option_map"
.IX Subsection "option_map"
.Vb 6
\&  Title    : option_map
\&  Usage    : $map = $f->option_map
\&  Function : accessor for the option map
\&  Returns  : a hash mapping option names to values
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "global_opts"
.IX Subsection "global_opts"
.Vb 6
\&  Title    : global_opts
\&  Usage    : $map = $f->global_opts
\&  Function : accessor for global options
\&  Returns  : a hash mapping option names to values
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
This returns a set of defaults for option values.
.Sh "panel"
.IX Subsection "panel"
.Vb 6
\&  Title    : panel
\&  Usage    : $panel = $f->panel
\&  Function : accessor for Bio::Graphics::Panel
\&  Returns  : a Bio::Graphics::Panel
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
This returns the panel with which the factory is associated.
.Sh "scale"
.IX Subsection "scale"
.Vb 6
\&  Title    : scale
\&  Usage    : $scale = $f->scale
\&  Function : accessor for the scale
\&  Returns  : a floating point number
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
This returns the scale, in pixels/bp for glyphs constructed by this
factory.
.Sh "font"
.IX Subsection "font"
.Vb 6
\&  Title    : font
\&  Usage    : $font = $f->font
\&  Function : accessor for the font
\&  Returns  : a font name
\&  Args     : None
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
This returns a \s-1GD\s0 font name.
.Sh "map_pt"
.IX Subsection "map_pt"
.Vb 6
\&  Title    : map_pt
\&  Usage    : @pixel_positions = $f->map_pt(@bp_positions)
\&  Function : map bp positions to pixel positions
\&  Returns  : a list of pixel positions
\&  Args     : a list of bp positions
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
The real work is done by the panel, but factory subclasses can
override if desired.
.Sh "map_no_trunc"
.IX Subsection "map_no_trunc"
.Vb 6
\&  Title    : map_no_trunc
\&  Usage    : @pixel_positions = $f->map_no_trunc(@bp_positions)
\&  Function : map bp positions to pixel positions
\&  Returns  : a list of pixel positions
\&  Args     : a list of bp positions
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
Same as \fImap_pt()\fR, but it will \s-1NOT\s0 clip pixel positions to be within
the drawing frame.
.Sh "translate_color"
.IX Subsection "translate_color"
.Vb 6
\&  Title    : translate_color
\&  Usage    : $index = $f->translate_color($color_name)
\&  Function : translate symbolic color names into GD indexes
\&  Returns  : an integer
\&  Args     : a color name in format "green" or "#00FF00"
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
The real work is done by the panel, but factory subclasses can
override if desired.
.Sh "glyph"
.IX Subsection "glyph"
.Vb 6
\&  Title    : glyph
\&  Usage    : @glyphs = $f->glyph($level,$feature1,$feature2...)
\&  Function : transform features into glyphs.
\&  Returns  : a list of Bio::Graphics::Glyph objects
\&  Args     : a feature "level", followed by a list of FeatureI objects.
\&  Status   : Internal to Bio::Graphics
.Ve
.PP
The level is used to track the level of nesting of features that have
subfeatures.
.Sh "feature_to_glyph"
.IX Subsection "feature_to_glyph"
.Vb 6
\&  Title    : feature_to_glyph
\&  Usage    : $glyph_name = $f->feature_to_glyph($feature)
\&  Function : choose the glyph name given a feature
\&  Returns  : a glyph name
\&  Args     : a Bio::Seq::FeatureI object
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "set_option"
.IX Subsection "set_option"
.Vb 6
\&  Title    : set_option
\&  Usage    : $f->set_option($option_name=>$option_value)
\&  Function : set or change an option
\&  Returns  : nothing
\&  Args     : a name/value pair
\&  Status   : Internal to Bio::Graphics
.Ve
.Sh "options"
.IX Subsection "options"
.Vb 6
\&  Title    : options
\&  Usage    : @option_names = $f->options
\&  Function : return all configured option names
\&  Returns  : a list of option names
\&  Args     : none
\&  Status   : Internal to Bio::Graphics
.Ve
