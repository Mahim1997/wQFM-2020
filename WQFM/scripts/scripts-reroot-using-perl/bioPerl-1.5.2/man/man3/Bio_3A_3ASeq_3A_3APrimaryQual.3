.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Seq::PrimaryQual 3"
.TH Bio::Seq::PrimaryQual 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Seq::PrimaryQual \- Bioperl lightweight Quality Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Bio::Seq::PrimaryQual;
.Ve
.PP
.Vb 1
\& # you can use either a space-delimited string for quality
.Ve
.PP
.Vb 6
\& my $string_quals = "10 20 30 40 50 40 30 20 10";
\& my $qualobj = Bio::Seq::PrimaryQual->new
\&              ( '-qual' => $string_quals,
\&                '-id'  => 'QualityFragment-12',
\&                '-accession_number' => 'X78121',
\&                );
.Ve
.PP
.Vb 1
\& # _or_ you can use an array of quality values
.Ve
.PP
.Vb 7
\& my @q2 = split/ /,$string_quals;
\& $qualobj = Bio::Seq::PrimaryQual->new( '-qual' => \e@q2,
\&       '-primary_id'     =>      'chads primary_id',
\&       '-desc'           =>      'chads desc',
\&       '-accession_number' => 'chads accession_number',
\&      '-id'             =>      'chads id'
\&      );
.Ve
.PP
.Vb 1
\& # to get the quality values out:
.Ve
.PP
.Vb 1
\& my @quals = @{$qualobj->qual()};
.Ve
.PP
.Vb 1
\& # to give _new_ quality values
.Ve
.PP
.Vb 2
\& my $newqualstring = "50 90 1000 20 12 0 0";
\& $qualobj->qual($newqualstring);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a mechanism for storing quality
values. Much more useful as part of
Bio::Seq::SeqWithQuality where these quality values
are associated with the sequence information.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Chad Matsalla"
.IX Header "AUTHOR - Chad Matsalla"
Email bioinformatics@dieselwurks.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 6
\& Title   : new()
\& Usage   : $qual = Bio::Seq::PrimaryQual->new
\&        ( -qual => '10 20 30 40 50 50 20 10',
\&          -id  => 'human_id',
\&          -accession_number => 'AL000012',
\&        );
.Ve
.PP
.Vb 5
\& Function: Returns a new Bio::Seq::PrimaryQual object from basic 
\&        constructors, being a string _or_ a reference to an array for the
\&        sequence and strings for id and accession_number. Note that you
\&        can provide an empty quality string.
\& Returns : a new Bio::Seq::PrimaryQual object
.Ve
.Sh "\fIqual()\fP"
.IX Subsection "qual()"
.Vb 6
\& Title   : qual()
\& Usage   : @quality_values  = @{$obj->qual()};
\& Function: Returns the quality as a reference to an array containing the
\&           quality values. The individual elements of the quality array are
\&           not validated and can be any numeric value.
\& Returns : A reference to an array.
.Ve
.Sh "validate_qual($qualstring)"
.IX Subsection "validate_qual($qualstring)"
.Vb 9
\& Title   : validate_qual($qualstring)
\& Usage   : print("Valid.") if { &validate_qual($self,$qualities); }
\& Function: Make sure that the quality, if it has length > 0, contains at
\&        least one digit. Note that quality strings are parsed into arrays
\&        using split/\ed+/,$quality_string, so make sure that your quality
\&        scalar looks like this if you want it to be parsed properly.
\& Returns : 1 for a valid sequence (WHY? Shouldn\e't it return 0? <boggle>)
\& Args    : a scalar (any scalar, why PrimarySeq author?) and a scalar
\&        containing the string to validate.
.Ve
.Sh "subqual($start,$end)"
.IX Subsection "subqual($start,$end)"
.Vb 8
\& Title   : subqual($start,$end)
\& Usage   : @subset_of_quality_values = @{$obj->subqual(10,40)};
\& Function: returns the quality values from $start to $end, where the
\&        first value is 1 and the number is inclusive, ie 1-2 are the
\&        first two bases of the sequence. Start cannot be larger than
\&        end but can be equal.
\& Returns : A reference to an array.
\& Args    : a start position and an end position
.Ve
.Sh "\fIdisplay_id()\fP"
.IX Subsection "display_id()"
.Vb 17
\& Title   : display_id()
\& Usage   : $id_string = $obj->display_id();
\& Function: returns the display id, aka the common name of the Quality
\&        object.
\&        The semantics of this is that it is the most likely string to be
\&        used as an identifier of the quality sequence, and likely to have
\&        "human" readability.  The id is equivalent to the ID field of the
\&        GenBank/EMBL databanks and the id field of the Swissprot/sptrembl
\&        database. In fasta format, the >(\eS+) is presumed to be the id,
\&        though some people overload the id to embed other information.
\&        Bioperl does not use any embedded information in the ID field,
\&        and people are encouraged to use other mechanisms (accession
\&        field for example, or extending the sequence object) to solve
\&        this. Notice that $seq->id() maps to this function, mainly for
\&        legacy/convience issues
\& Returns : A string
\& Args    : None
.Ve
.Sh "\fIheader()\fP"
.IX Subsection "header()"
.Vb 6
\& Title   : header()
\& Usage   : $header = $obj->header();
\& Function: Get/set the header that the user wants printed for this
\&     quality object.
\& Returns : A string
\& Args    : None
.Ve
.Sh "\fIaccession_number()\fP"
.IX Subsection "accession_number()"
.Vb 11
\& Title   : accession_number()
\& Usage   : $unique_biological_key = $obj->accession_number();
\& Function: Returns the unique biological id for a sequence, commonly
\&        called the accession_number. For sequences from established
\&        databases, the implementors should try to use the correct
\&        accession number. Notice that primary_id() provides the unique id
\&        for the implemetation, allowing multiple objects to have the same
\&        accession number in a particular implementation. For sequences
\&        with no accession number, this method should return "unknown".
\& Returns : A string
\& Args    : None
.Ve
.Sh "\fIprimary_id()\fP"
.IX Subsection "primary_id()"
.Vb 9
\& Title   : primary_id()
\& Usage   : $unique_implementation_key = $obj->primary_id();
\& Function: Returns the unique id for this object in this implementation.
\&        This allows implementations to manage their own object ids in a
\&        way the implementaiton can control clients can expect one id to
\&        map to one object. For sequences with no accession number, this
\&        method should return a stringified memory location.
\& Returns : A string
\& Args    : None
.Ve
.Sh "\fIdesc()\fP"
.IX Subsection "desc()"
.Vb 7
\& Title   : desc()
\& Usage   : $qual->desc($newval);
\&           $description = $qual->desc();
\& Function: Get/set description text for a qual object
\& Example :
\& Returns : Value of desc
\& Args    : newvalue (optional)
.Ve
.Sh "\fIid()\fP"
.IX Subsection "id()"
.Vb 7
\& Title   : id()
\& Usage   : $id = $qual->id();
\& Function: Return the ID of the quality. This should normally be (and
\&        actually is in the implementation provided here) just a synonym
\&        for display_id().
\& Returns : A string.
\& Args    : None.
.Ve
.Sh "\fIlength()\fP"
.IX Subsection "length()"
.Vb 9
\& Title   : length()
\& Usage   : $length = $qual->length();
\& Function: Return the length of the array holding the quality values.
\&        Under most circumstances, this should match the number of quality
\&        values but no validation is done when the PrimaryQual object is
\&        constructed and non-digits could be put into this array. Is this
\&        a bug? Just enough rope...
\& Returns : A scalar (the number of elements in the quality array).
\& Args    : None.
.Ve
.Sh "qualat($position)"
.IX Subsection "qualat($position)"
.Vb 8
\& Title   : qualat($position)
\& Usage   : $quality = $obj->qualat(10);
\& Function: Return the quality value at the given location, where the
\&        first value is 1 and the number is inclusive, ie 1-2 are the first
\&        two bases of the sequence. Start cannot be larger than end but can
\&        be equal.
\& Returns : A scalar.
\& Args    : A position.
.Ve
.Sh "\fIto_string()\fP"
.IX Subsection "to_string()"
.Vb 13
\& Title   : to_string()
\& Usage   : $quality = $obj->to_string();
\& Function: Return a textual representation of what the object contains.
\&        For this module, this function will return:
\&                qual
\&                display_id
\&                accession_number
\&                primary_id
\&                desc
\&                id
\&                length
\& Returns : A scalar.
\& Args    : None.
.Ve
