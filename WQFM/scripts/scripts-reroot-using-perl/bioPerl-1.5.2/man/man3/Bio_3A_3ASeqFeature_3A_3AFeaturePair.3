.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::FeaturePair 3"
.TH Bio::SeqFeature::FeaturePair 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeature::FeaturePair \- hold pair feature information e.g. blast hits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    my $feat  = new Bio::SeqFeature::FeaturePair(-feature1 => $f1,
\&                                                 -feature2 => $f2,
\&                                              );
.Ve
.PP
.Vb 1
\&    # Bio::SeqFeatureI methods can be used
.Ve
.PP
.Vb 2
\&    my $start = $feat->start;
\&    my $end   = $feat->end;
.Ve
.PP
.Vb 3
\&    # Bio::FeaturePair methods can be used
\&    my $hstart = $feat->hstart;
\&    my $hend   = $feat->hend;
.Ve
.PP
.Vb 1
\&   my $feature1 = $feat->feature1;  # returns feature1 object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A sequence feature object where the feature is itself a feature on
another sequence \- e.g. a blast hit where residues 1\-40 of a protein
sequence \s-1SW:HBA_HUMAN\s0 has hit to bases 100 \- 220 on a genomic sequence
\&\s-1HS120G22\s0.  The genomic sequence coordinates are used to create one
sequence feature \f(CW$f1\fR and the protein coordinates are used to create
feature \f(CW$f2\fR.  A FeaturePair object can then be made
.PP
.Vb 3
\&    my $fp = new Bio::SeqFeature::FeaturePair(-feature1 => $f1,   # genomic
\&                                              -feature2 => $f2,   # protein
\&                                              );
.Ve
.PP
This object can be used as a standard Bio::SeqFeatureI in which case
.PP
.Vb 2
\&    my $gstart = $fp->start  # returns start coord on feature1 - genomic seq.
\&    my $gend   = $fp->end    # returns end coord on feature1.
.Ve
.PP
In general standard Bio::SeqFeatureI method calls return information
in feature1.
.PP
Data in the feature 2 object are generally obtained using the standard
methods prefixed by h (for hit!)
.PP
.Vb 2
\&    my $pstart = $fp->hstart # returns start coord on feature2 = protein seq.
\&    my $pend   = $fp->hend   # returns end coord on feature2.
.Ve
.PP
If you wish to swap feature1 and feature2 around :
.PP
.Vb 1
\&    $feat->invert
.Ve
.PP
so... 
.PP
.Vb 1
\&    $feat->start # etc. returns data in $feature2 object
.Ve
.PP
No sub_SeqFeatures or tags can be stored in this object directly.  Any
features or tags are expected to be stored in the contained objects
feature1, and feature2.
.SH "CONTACT"
.IX Header "CONTACT"
Ewan Birney <birney@sanger.ac.uk>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 3
\& Title   : new
\& Usage   :
\& Function: Constructor for this module. Accepts the following parameters:
.Ve
.PP
.Vb 7
\&             -feature1   Bio::SeqFeatureI-compliant object
\&             -feature2   Bio::SeqFeatureI-compliant object
\&             -feature_factory  Bio::Factory::ObjectFactoryI compliant
\&                         object to be used when feature1 and/or feature2
\&                         are accessed without explicitly set before. This
\&                         is mostly useful for derived classes who want to
\&                         set their preferred class for feature objects.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : 
\& Args    : see above
.Ve
.Sh "feature1"
.IX Subsection "feature1"
.Vb 6
\& Title   : feature1
\& Usage   : $f = $featpair->feature1
\&           $featpair->feature1($feature)
\& Function: Get/set for the query feature
\& Returns : Bio::SeqFeatureI
\& Args    : Bio::SeqFeatureI
.Ve
.Sh "feature2"
.IX Subsection "feature2"
.Vb 6
\& Title   : feature2
\& Usage   : $f = $featpair->feature2
\&           $featpair->feature2($feature)
\& Function: Get/set for the hit feature
\& Returns : Bio::SeqFeatureI
\& Args    : Bio::SeqFeatureI
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 6
\& Title   : start
\& Usage   : $start = $featpair->start
\&           $featpair->start(20)
\& Function: Get/set on the start coordinate of feature1
\& Returns : integer
\& Args    : [optional] beginning of feature
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 6
\& Title   : end
\& Usage   : $end = $featpair->end
\&           $featpair->end($end)
\& Function: get/set on the end coordinate of feature1
\& Returns : integer
\& Args    : [optional] ending point of feature
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 6
\& Title   : strand
\& Usage   : $strand = $feat->strand()
\&           $feat->strand($strand)
\& Function: get/set on strand information, being 1,-1 or 0
\& Returns : -1,1 or 0
\& Args    : [optional] strand information to set
.Ve
.Sh "location"
.IX Subsection "location"
.Vb 6
\& Title   : location
\& Usage   : $location = $featpair->location
\&           $featpair->location($location)
\& Function: Get/set location object (using feature1)
\& Returns : Bio::LocationI object
\& Args    : [optional] LocationI to store
.Ve
.Sh "score"
.IX Subsection "score"
.Vb 6
\& Title   : score
\& Usage   : $score = $feat->score()
\&           $feat->score($score)
\& Function: get/set on score information
\& Returns : float
\& Args    : none if get, the new value if set
.Ve
.Sh "frame"
.IX Subsection "frame"
.Vb 6
\& Title   : frame
\& Usage   : $frame = $feat->frame()
\&           $feat->frame($frame)
\& Function: get/set on frame information
\& Returns : 0,1,2
\& Args    : none if get, the new value if set
.Ve
.Sh "primary_tag"
.IX Subsection "primary_tag"
.Vb 5
\& Title   : primary_tag
\& Usage   : $ptag = $featpair->primary_tag
\& Function: get/set on the primary_tag of feature1
\& Returns : 0,1,2
\& Args    : none if get, the new value if set
.Ve
.Sh "source_tag"
.IX Subsection "source_tag"
.Vb 7
\& Title   : source_tag
\& Usage   : $tag = $feat->source_tag()
\&           $feat->source_tag('genscan');
\& Function: Returns the source tag for a feature,
\&           eg, 'genscan' 
\& Returns : a string 
\& Args    : none
.Ve
.Sh "seqname"
.IX Subsection "seqname"
.Vb 6
\& Title   : seqname
\& Usage   : $obj->seq_id($newval)
\& Function: There are many cases when you make a feature that you
\&           do know the sequence name, but do not know its actual
\&           sequence. This is an attribute such that you can store 
\&           the seqname.
.Ve
.PP
.Vb 5
\&           This attribute should *not* be used in GFF dumping, as
\&           that should come from the collection in which the seq
\&           feature was found.
\& Returns : value of seqname
\& Args    : newvalue (optional)
.Ve
.Sh "hseqname"
.IX Subsection "hseqname"
.Vb 6
\& Title   : hseqname
\& Usage   : $featpair->hseqname($newval)
\& Function: Get/set method for the name of
\&           feature2.
\& Returns : value of $feature2->seq_id
\& Args    : newvalue (optional)
.Ve
.Sh "hstart"
.IX Subsection "hstart"
.Vb 6
\& Title   : hstart
\& Usage   : $start = $featpair->hstart
\&           $featpair->hstart(20)
\& Function: Get/set on the start coordinate of feature2
\& Returns : integer
\& Args    : none
.Ve
.Sh "hend"
.IX Subsection "hend"
.Vb 6
\& Title   : hend
\& Usage   : $end = $featpair->hend
\&           $featpair->hend($end)
\& Function: get/set on the end coordinate of feature2
\& Returns : integer
\& Args    : none
.Ve
.Sh "hstrand"
.IX Subsection "hstrand"
.Vb 6
\& Title   : hstrand
\& Usage   : $strand = $feat->strand()
\&           $feat->strand($strand)
\& Function: get/set on strand information, being 1,-1 or 0
\& Returns : -1,1 or 0
\& Args    : none
.Ve
.Sh "hscore"
.IX Subsection "hscore"
.Vb 6
\& Title   : hscore
\& Usage   : $score = $feat->score()
\&           $feat->score($score)
\& Function: get/set on score information
\& Returns : float
\& Args    : none if get, the new value if set
.Ve
.Sh "hframe"
.IX Subsection "hframe"
.Vb 6
\& Title   : hframe
\& Usage   : $frame = $feat->frame()
\&           $feat->frame($frame)
\& Function: get/set on frame information
\& Returns : 0,1,2
\& Args    : none if get, the new value if set
.Ve
.Sh "hprimary_tag"
.IX Subsection "hprimary_tag"
.Vb 5
\& Title   : hprimary_tag
\& Usage   : $ptag = $featpair->hprimary_tag
\& Function: Get/set on the primary_tag of feature2
\& Returns : 0,1,2
\& Args    : none if get, the new value if set
.Ve
.Sh "hsource_tag"
.IX Subsection "hsource_tag"
.Vb 7
\& Title   : hsource_tag
\& Usage   : $tag = $feat->hsource_tag()
\&           $feat->source_tag('genscan');
\& Function: Returns the source tag for a feature,
\&           eg, 'genscan' 
\& Returns : a string 
\& Args    : none
.Ve
.Sh "invert"
.IX Subsection "invert"
.Vb 5
\& Title   : invert
\& Usage   : $tag = $feat->invert
\& Function: Swaps feature1 and feature2 around
\& Returns : Nothing
\& Args    : none
.Ve
.Sh "feature_factory"
.IX Subsection "feature_factory"
.Vb 3
\& Title   : feature_factory
\& Usage   : $obj->feature_factory($newval)
\& Function: Get/set the feature object factory for this feature pair.
.Ve
.PP
.Vb 3
\&           The feature object factory will be used to create a feature
\&           object if feature1() or feature2() is called in get mode
\&           without having been set before.
.Ve
.PP
.Vb 3
\&           The default is an instance of Bio::Factory::ObjectFactory
\&           and hence allows the type to be changed dynamically at any
\&           time.
.Ve
.PP
.Vb 4
\& Example : 
\& Returns : The feature object factory in use (a 
\&           Bio::Factory::ObjectFactoryI compliant object)
\& Args    : on set, a Bio::Factory::ObjectFactoryI compliant object
.Ve
