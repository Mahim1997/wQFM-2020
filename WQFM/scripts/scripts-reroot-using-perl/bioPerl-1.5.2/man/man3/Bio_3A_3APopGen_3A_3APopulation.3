.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PopGen::Population 3"
.TH Bio::PopGen::Population 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::PopGen::Population \- A population of individuals
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Bio::PopGen::Population;
\&  use Bio::PopGen::Individual;
\&  my $population = Bio::PopGen::Population->new();
\&  my $ind = Bio::PopGen::Individual->new(-unique_id => 'id');
\&  $population->add_Individual($ind);
.Ve
.PP
.Vb 3
\&  for my $ind ( $population->get_Individuals ) {
\&    # iterate through the individuals
\&  }
.Ve
.PP
.Vb 3
\&  for my $name ( $population->get_marker_names ) {
\&    my $marker = $population->get_Marker();
\&  }
.Ve
.PP
.Vb 1
\&  my $num_inds = $population->get_number_individuals;
.Ve
.PP
.Vb 2
\&  my $homozygote_f   = $population->get_Frequency_Homozygotes;
\&  my $heterozygote_f = $population->get_Frequency_Heterozygotes;
.Ve
.PP
.Vb 5
\&  # make a population haploid by making fake chromosomes through
\&  # haplotypes -- ala allele 1 is on chrom 1 and allele 2 is on chrom 2 
\&  # the number of individuals created will thus be 2 x number in
\&  # population
\&  my $happop = $population->haploid_population;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a collection of individuals.  We'll have ways of generating
Bio::PopGen::MarkerI objects out so we can calculate allele_frequencies
for implementing the various statistical tests.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Matthew Hahn, matthew.hahn\-at\-duke.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = new Bio::PopGen::Population();
\& Function: Builds a new Bio::PopGen::Population object 
\& Returns : an instance of Bio::PopGen::Population
\& Args    : -individuals => array ref of individuals (optional)
\&           -name        => population name (optional)
\&           -source      => a source tag (optional)
\&           -description => a short description string of the population (optional)
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 5
\& Title   : name
\& Usage   : my $name = $pop->name
\& Function: Get the population name
\& Returns : string representing population name
\& Args    : [optional] string representing population name
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title   : description
\& Usage   : my $description = $pop->description
\& Function: Get the population description
\& Returns : string representing population description
\& Args    : [optional] string representing population description
.Ve
.Sh "source"
.IX Subsection "source"
.Vb 5
\& Title   : source
\& Usage   : my $source = $pop->source
\& Function: Get the population source
\& Returns : string representing population source
\& Args    : [optional] string representing population source
.Ve
.Sh "set_Allele_Frequency"
.IX Subsection "set_Allele_Frequency"
.Vb 14
\& Title   : set_Allele_Frequency
\& Usage   : $population->set_Allele_Frequency('marker' => { 'allele1' => 0.1});
\& Function: Sets an allele frequency for a Marker for this Population
\&           This allows the Population to not have individual individual
\&           genotypes but rather a set of overall allele frequencies
\& Returns : Count of the number of markers
\& Args    : -name      => (string) marker name
\&           -allele    => (string) allele name
\&           -frequency => (double) allele frequency - must be between 0 and 1
\&           OR
\&           -frequencies => { 'marker1' => { 'allele1' => 0.01,
\&                                            'allele2' => 0.99},
\&                             'marker2' => ...
\&                            }
.Ve
.Sh "add_Individual"
.IX Subsection "add_Individual"
.Vb 5
\& Title   : add_Individual
\& Usage   : $population->add_Individual(@individuals);
\& Function: Add individuals to a population
\& Returns : count of the current number in the object 
\& Args    : Array of Individuals
.Ve
.Sh "remove_Individuals"
.IX Subsection "remove_Individuals"
.Vb 5
\& Title   : remove_Individuals
\& Usage   : $population->remove_Individuals(@ids);
\& Function: Remove individual(s) to a population
\& Returns : count of the current number in the object 
\& Args    : Array of ids
.Ve
.Sh "get_Individuals"
.IX Subsection "get_Individuals"
.Vb 8
\& Title   : get_Individuals
\& Usage   : my @inds = $pop->get_Individuals();
\& Function: Return the individuals, alternatively restrict by a criteria
\& Returns : Array of Bio::PopGen::IndividualI objects
\& Args    : none if want all the individuals OR,
\&           -unique_id => To get an individual with a specific id
\&           -marker    => To only get individuals which have a genotype specific
\&                        for a specific marker name
.Ve
.Sh "get_Genotypes"
.IX Subsection "get_Genotypes"
.Vb 6
\& Title   : get_Genotypes
\& Usage   : my @genotypes = $pop->get_Genotypes(-marker => $name)
\& Function: Get the genotypes for all the individuals for a specific
\&           marker name
\& Returns : Array of Bio::PopGen::GenotypeI objects
\& Args    : -marker => name of the marker
.Ve
.Sh "get_marker_names"
.IX Subsection "get_marker_names"
.Vb 5
\& Title   : get_marker_names
\& Usage   : my @names = $pop->get_marker_names;
\& Function: Get the names of the markers
\& Returns : Array of strings
\& Args    : [optional] boolean flag to ignore internal cache status
.Ve
.Sh "get_Marker"
.IX Subsection "get_Marker"
.Vb 5
\& Title   : get_Marker
\& Usage   : my $marker = $population->get_Marker($name)
\& Function: Get a Bio::PopGen::Marker object based on this population
\& Returns : Bio::PopGen::MarkerI object
\& Args    : name of the marker
.Ve
.Sh "get_number_individuals"
.IX Subsection "get_number_individuals"
.Vb 5
\& Title   : get_number_individuals
\& Usage   : my $count = $pop->get_number_individuals;
\& Function: Get the count of the number of individuals
\& Returns : integer >= 0
\& Args    : none
.Ve
.Sh "set_number_individuals"
.IX Subsection "set_number_individuals"
.Vb 13
\& Title   : set_number_individuals
\&    Usage   : $pop->set_number_individuals($num);
\& Function: Fixes the number of individuals, call this with
\&           0 to unset.
\&           Only use this if you know what you are doing,
\&           this is only relavent when you are just adding
\&           allele frequency data for a population and want to
\&           calculate something like theta
\& Returns : none
\& Args    : individual count, calling it with undef or 0
\&            will reset the value to return a number
\&            calculated from the number of individuals
\&            stored for this population.
.Ve
.Sh "get_Frequency_Homozygotes"
.IX Subsection "get_Frequency_Homozygotes"
.Vb 5
\& Title   : get_Frequency_Homozygotes
\& Usage   : my $freq = $pop->get_Frequency_Homozygotes;
\& Function: Calculate the frequency of homozygotes in the population
\& Returns : fraction between 0 and 1
\& Args    : $markername
.Ve
.Sh "get_Frequency_Heterozygotes"
.IX Subsection "get_Frequency_Heterozygotes"
.Vb 5
\& Title   : get_Frequency_Heterozygotes
\& Usage   : my $freq = $pop->get_Frequency_Homozygotes;
\& Function: Calculate the frequency of homozygotes in the population
\& Returns : fraction between 0 and 1
\& Args    : $markername
.Ve
.Sh "haploid_population"
.IX Subsection "haploid_population"
.Vb 7
\& Title   : haploid_population
\& Usage   : my $pop = $population->haploid_population;
\& Function: Make a new population where all the individuals
\&           are haploid - effectively an individual out of each
\&           chromosome an individual has.  
\& Returns : L<Bio::PopGen::PopulationI>
\& Args    : None
.Ve
