.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::Term 3"
.TH Bio::Ontology::Term 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Ontology::Term \- implementation of the interface for ontology terms
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
#get Bio::Ontology::TermI somehow.
.PP
.Vb 5
\&  print $term->identifier(), "\en";
\&  print $term->name(), "\en";
\&  print $term->definition(), "\en";
\&  print $term->is_obsolete(), "\en";
\&  print $term->comment(), "\en";
.Ve
.PP
.Vb 3
\&  foreach my $synonym ( $term->each_synonym() ) {
\&      print $synonym, "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple implementation for ontology terms providing basic
methods (it provides no functionality related to graphs). It
implements the Bio::Ontology::TermI interface.
.PP
This class also implements Bio::IdentifiableI and
Bio::DescribableI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek@gnf.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://www.genetics.wustl.edu/eddy/people/zmasek/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods.
.Sh "new"
.IX Subsection "new"
.Vb 21
\& Title   : new
\& Usage   : $term = Bio::Ontology::Term->new(
\&                -identifier  => "16847",
\&                -name        => "1-aminocyclopropane-1-carboxylate synthase",
\&                -definition  => "Catalysis of ...",
\&                -is_obsolete => 0,
\&                -comment     => "" );
\& Function: Creates a new Bio::Ontology::Term.
\& Returns : A new Bio::Ontology::Term object.
\& Args    : -identifier            => the identifier of this term [scalar]
\&           -name                  => the name of this term [scalar]
\&           -definition            => the definition of this term [scalar]
\&           -ontology              => the ontology this term lives in
\&                                     (a Bio::Ontology::OntologyI object)
\&           -version               => version information [scalar]
\&           -is_obsolete           => the obsoleteness of this term [0 or 1]
\&           -comment               => a comment [scalar]
\&           -dblinks               => Bio::Annotation::DBLink objects
\&                                     [reference to array]
\&           -references            => Bio::Annotation::Reference objects
\&                                     [reference to array]
.Ve
.PP
See Bio::Ontology::OntologyI, Bio::Annotation::Reference,
Bio::Annotation::DBLink.
.Sh "identifier"
.IX Subsection "identifier"
.Vb 7
\& Title   : identifier
\& Usage   : $term->identifier( "GO:0003947" );
\&           or
\&           print $term->identifier();
\& Function: Set/get for the identifier of this Term.
\& Returns : The identifier [scalar].
\& Args    : The identifier [scalar] (optional).
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 7
\& Title   : name
\& Usage   : $term->name( "N-acetylgalactosaminyltransferase" );
\&           or
\&           print $term->name();
\& Function: Set/get for the name of this Term.
\& Returns : The name [scalar].
\& Args    : The name [scalar] (optional).
.Ve
.Sh "definition"
.IX Subsection "definition"
.Vb 7
\& Title   : definition
\& Usage   : $term->definition( "Catalysis of ..." );
\&           or
\&           print $term->definition();
\& Function: Set/get for the definition of this Term.
\& Returns : The definition [scalar].
\& Args    : The definition [scalar] (optional).
.Ve
.Sh "ontology"
.IX Subsection "ontology"
.Vb 5
\& Title   : ontology
\& Usage   : $ont = $term->ontology();
\&           or
\&           $term->ontology( $ont );
\& Function: Get the ontology this term is in.
.Ve
.PP
.Vb 2
\&           Note that with the ontology in hand you can query for all
\&           related terms etc.
.Ve
.PP
.Vb 4
\& Returns : The ontology of this Term as a Bio::Ontology::OntologyI
\&           implementing object.
\& Args    : On set, the  ontology of this Term as a Bio::Ontology::OntologyI
\&           implementing object or a string representing its name.
.Ve
.PP
See Bio::Ontology::OntologyI.
.Sh "version"
.IX Subsection "version"
.Vb 7
\& Title   : version
\& Usage   : $term->version( "1.00" );
\&           or
\&           print $term->version();
\& Function: Set/get for version information.
\& Returns : The version [scalar].
\& Args    : The version [scalar] (optional).
.Ve
.Sh "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 7
\& Title   : is_obsolete
\& Usage   : $term->is_obsolete( 1 );
\&           or
\&           if ( $term->is_obsolete() )
\& Function: Set/get for the obsoleteness of this Term.
\& Returns : the obsoleteness [0 or 1].
\& Args    : the obsoleteness [0 or 1] (optional).
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $term->comment( "Consider the term ..." );
\&           or
\&           print $term->comment();
\& Function: Set/get for an arbitrary comment about this Term.
\& Returns : A comment.
\& Args    : A comment (optional).
.Ve
.Sh "get_synonyms"
.IX Subsection "get_synonyms"
.Vb 5
\& Title   : get_synonyms
\& Usage   : @aliases = $term->get_synonyms;
\& Function: Returns a list of aliases of this Term.
\& Returns : A list of aliases [array of [scalar]].
\& Args    :
.Ve
.Sh "add_synonym"
.IX Subsection "add_synonym"
.Vb 7
\& Title   : add_synonym
\& Usage   : $term->add_synonym( @asynonyms );
\&           or
\&           $term->add_synonym( $synonym );
\& Function: Pushes one or more synonyms into the list of synonyms.
\& Returns :
\& Args    : One synonym [scalar] or a list of synonyms [array of [scalar]].
.Ve
.Sh "remove_synonyms"
.IX Subsection "remove_synonyms"
.Vb 5
\& Title   : remove_synonyms()
\& Usage   : $term->remove_synonyms();
\& Function: Deletes (and returns) the synonyms of this Term.
\& Returns : A list of synonyms [array of [scalar]].
\& Args    :
.Ve
.Sh "get_dblinks"
.IX Subsection "get_dblinks"
.Vb 6
\& Title   : get_dblinks()
\& Usage   : @ds = $term->get_dblinks();
\& Function: Returns a list of each dblinks of this GO term.
\& Returns : A list of dblinks [array of [scalars]].
\& Args    : A scalar indicating the context (optional).
\&           If omitted, all dblinks will be returned.
.Ve
.Sh "get_dblink_context"
.IX Subsection "get_dblink_context"
.Vb 5
\&  Title   : get_dblink_context
\&  Usage   : @context = $term->get_dblink_context;
\&  Function: Return all context existing in Term
\&  Returns : a list of scalar
\&  Args    : [none]
.Ve
.Sh "add_dblink"
.IX Subsection "add_dblink"
.Vb 8
\& Title   : add_dblink
\& Usage   : $term->add_dblink( @dbls );
\&           or
\&           $term->add_dblink( $dbl );
\& Function: Pushes one or more dblinks onto the list of dblinks.
\& Returns :
\& Args    : One  dblink [scalar] or a list of
\&            dblinks [array of [scalars]].
.Ve
.Sh "has_dblink"
.IX Subsection "has_dblink"
.Vb 5
\&  Title   : has_dblink
\&  Usage   : $term->has_dblink($dblink);
\&  Function: Checks if a DBXref is already existing in the OBOterm object
\&  Return  : TRUE/FALSE
\&  Args    : [arg1] A DBxref identifier
.Ve
.Sh "add_dblink_context"
.IX Subsection "add_dblink_context"
.Vb 7
\&  Title   : add_dblink_context
\&  Usage   : $term->add_dblink_context($db, $context);
\&  Function: add a dblink with its context
\&  Return  : [none]
\&  Args    : [arg1] an object of Bio::Annotation::DBLink
\&            [arg2] a string for context; if omitted, the
\&                   default/context-less one will be used.
.Ve
.Sh "remove_dblinks"
.IX Subsection "remove_dblinks"
.Vb 6
\& Title   : remove_dblinks()
\& Usage   : $term->remove_dblinks();
\& Function: Deletes (and returns) the definition references of this GO term.
\& Returns : A list of definition references [array of [scalars]].
\& Args    : Context. If omitted or equal to 'all', all dblinks
\&           will be removed.
.Ve
.Sh "get_references"
.IX Subsection "get_references"
.Vb 5
\&  Title   : get_references
\&  Usage   : @references = $self->get_references
\&  Fuctnion: Returns a list of references
\&  Return  : A list of objects
\&  Args    : [none]
.Ve
.Sh "add_reference"
.IX Subsection "add_reference"
.Vb 5
\&  Title   : add_reference
\&  Usage   : $self->add_reference($reference);
\&            $self->add_reference($reference1, $reference2);
\&  Fuctnion: Add one or more references
\&  Returns : [none]
.Ve
.Sh "remove_references"
.IX Subsection "remove_references"
.Vb 5
\&  Title   : remove_references
\&  Usage   : $self->remove_references;
\&  Function: Deletes (and returns) all references
\&  Returns : A list of references
\&  Args    : [none]
.Ve
.Sh "get_secondary_ids"
.IX Subsection "get_secondary_ids"
.Vb 3
\& Title   : get_secondary_ids
\& Usage   : @ids = $term->get_secondary_ids();
\& Function: Returns a list of secondary identifiers of this Term.
.Ve
.PP
.Vb 2
\&           Secondary identifiers mostly originate from merging terms,
\&           or possibly also from splitting terms.
.Ve
.PP
.Vb 2
\& Returns : A list of secondary identifiers [array of [scalar]]
\& Args    :
.Ve
.Sh "add_secondary_id"
.IX Subsection "add_secondary_id"
.Vb 7
\& Title   : add_secondary_id
\& Usage   : $term->add_secondary_id( @ids );
\&           or
\&           $term->add_secondary_id( $id );
\& Function: Adds one or more secondary identifiers to this term.
\& Returns :
\& Args    : One or more secondary identifiers [scalars]
.Ve
.Sh "remove_secondary_ids"
.IX Subsection "remove_secondary_ids"
.Vb 5
\& Title   : remove_secondary_ids
\& Usage   : $term->remove_secondary_ids();
\& Function: Deletes (and returns) the secondary identifiers of this Term.
\& Returns : The previous list of secondary identifiers [array of [scalars]]
\& Args    :
.Ve
.SH "Methods implementing Bio::IdentifiableI and Bio::DescribableI"
.IX Header "Methods implementing Bio::IdentifiableI and Bio::DescribableI"
.Sh "object_id"
.IX Subsection "object_id"
.Vb 4
\& Title   : object_id
\& Usage   : $string    = $obj->object_id()
\& Function: a string which represents the stable primary identifier
\&           in this namespace of this object.
.Ve
.PP
.Vb 1
\&           This is a synonym for identifier().
.Ve
.PP
.Vb 1
\& Returns : A scalar
.Ve
.Sh "authority"
.IX Subsection "authority"
.Vb 5
\& Title   : authority
\& Usage   : $authority    = $obj->authority()
\& Function: a string which represents the organisation which
\&           granted the namespace, written as the DNS name for
\&           organisation (eg, wormbase.org)
.Ve
.PP
.Vb 3
\&           This forwards to ontology()->authority(). Note that you
\&           cannot set the authority before having set the ontology or
\&           the namespace (which will set the ontology).
.Ve
.PP
.Vb 2
\& Returns : A scalar
\& Args    : on set, the new value (a scalar)
.Ve
.Sh "namespace"
.IX Subsection "namespace"
.Vb 5
\& Title   : namespace
\& Usage   : $string    = $obj->namespace()
\& Function: A string representing the name space this identifier
\&           is valid in, often the database name or the name
\&           describing the collection.
.Ve
.PP
.Vb 4
\&           This forwards to ontology() (set mode) and
\&           ontology()->name() (get mode). I.e., setting the namespace
\&           will set the ontology to one matching that name in the
\&           ontology store, or to one newly created.
.Ve
.PP
.Vb 2
\& Returns : A scalar
\& Args    : on set, the new value (a scalar)
.Ve
.Sh "display_name"
.IX Subsection "display_name"
.Vb 3
\& Title   : display_name
\& Usage   : $string    = $obj->display_name()
\& Function: A string which is what should be displayed to the user.
.Ve
.PP
.Vb 4
\&           The definition in Bio::DescribableI states that the
\&           string should not contain spaces. As this is not very
\&           sensible for ontology terms, we relax this here. The
\&           implementation just forwards to name().
.Ve
.PP
.Vb 2
\& Returns : A scalar
\& Args    : on set, the new value (a scalar)
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 6
\& Title   : description
\& Usage   : $string    = $obj->description()
\& Function: A text string suitable for displaying to the user a
\&           description. This string is likely to have spaces, but
\&           should not have any newlines or formatting - just plain
\&           text.
.Ve
.PP
.Vb 4
\&           This forwards to definition(). The caveat is that the text
\&           will often be longer for ontology term definitions than the
\&           255 characters stated in the definition in
\&           Bio::DescribableI.
.Ve
.PP
.Vb 2
\& Returns : A scalar
\& Args    : on set, the new value (a scalar)
.Ve
.SH "Deprecated methods"
.IX Header "Deprecated methods"
Used for looking up the methods that supercedes them.
