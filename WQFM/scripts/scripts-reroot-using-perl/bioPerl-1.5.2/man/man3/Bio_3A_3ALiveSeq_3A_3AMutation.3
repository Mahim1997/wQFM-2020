.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::LiveSeq::Mutation 3"
.TH Bio::LiveSeq::Mutation 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::LiveSeq::Mutation \- Mutation event descriptor class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # full descrition of a point mutation
\&  $mutation1a = Bio::LiveSeq::Mutation->new ( -seq => 'A',
\&                                              -seqori => 'T',
\&                                              -pos  => 100,
\&                                              -len => 1 # optional, defaults to length(seq)
\&                                             );
.Ve
.PP
.Vb 21
\&  # minimal information for a point mutation
\&  $mutation1b = Bio::LiveSeq::Mutation->new ( -seq => 'A',
\&                                              -pos  => 100
\&                                              );
\&  # insertion
\&  $mutation2 = Bio::LiveSeq::Mutation->new ( -seq => 'ATT',
\&                                             -pos  => 100,
\&                                             -len => 0
\&                                             );
\&  # deletion
\&  $mutation3 = Bio::LiveSeq::Mutation->new ( -seq => '',  # optional
\&                                             -seqori => 'TTG',  # optional
\&                                             -pos  => 100
\&                                             -len => 3
\&                                             );
\&  # complex
\&  $mutation4 = Bio::LiveSeq::Mutation->new ( -seq => 'CC', 
\&                                             -seqori => 'TTG',  # optional
\&                                             -pos  => 100
\&                                             -len => 3
\&                                             );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class describes a local mutation event using minimalistic
description.  It is not necessary to know anything about the original
sequence. You need to give the changed sequence, the position of the
mutation in the (unidentified) reference sequence, and the length of
the affected subsequence in the reference sequence. If the original
allele sequence is given, the objects applying the mutation into the
reference sequence (e.g. Bio::LiveSeq::Mutator) might check for its
validity.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "seq"
.IX Subsection "seq"
.Vb 3
\& Title   : seq
\& Usage   : $obj->seq();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns the mutated sequence. No checking is done
\&            to validate the symbols.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : integer
.Ve
.Sh "seqori"
.IX Subsection "seqori"
.Vb 3
\& Title   : seqori
\& Usage   : $obj->seqori();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the original subsequence in the reference
\&            sequence. No checking is done to validate the symbols.
\&            Optional value.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "pos"
.IX Subsection "pos"
.Vb 3
\& Title   : pos
\& Usage   : $obj->pos();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns the position of the first element in the
\&            sequence.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : integer
.Ve
.Sh "len"
.IX Subsection "len"
.Vb 3
\& Title   : len
\& Usage   : $obj->len();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the len of the affected original allele
\&            sequence.  If value is not set, defaults to the lenght of
\&            the mutated sequence (seq).
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "label"
.IX Subsection "label"
.Vb 3
\& Title   : label
\& Usage   : $obj->label();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns the label of the affected original allele
\&            location. Label is a stable identifier whereas location
\&            can be changed by mutations. Label comes from
\&            l<Bio::LiveSeq::Gene>.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "transpos"
.IX Subsection "transpos"
.Vb 3
\& Title   : transpos
\& Usage   : $obj->transpos();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns the transcript position of the mutation.
\&            Set when associated with a reference sequence. Value
\&            depends on reference molecule and the co-ordinate system
\&            used.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : integer
.Ve
.Sh "issue"
.IX Subsection "issue"
.Vb 3
\& Title   : issue
\& Usage   : $obj->issue();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the position of the mutation in an array
\&            of mutations to be issued. Set after the validity of the
\&            mutation has been confirmed.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : integer
.Ve
.Sh "prelabel"
.IX Subsection "prelabel"
.Vb 3
\& Title   : prelabel
\& Usage   : $obj->prelabel();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns the prelabel of the affected original allele
\&            location. Prelabel is a stable identifier whereas location
\&            can be changed by mutations. Prelabel comes from
\&            l<Bio::LiveSeq::Gene>.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "postlabel"
.IX Subsection "postlabel"
.Vb 3
\& Title   : postlabel
\& Usage   : $obj->postlabel();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns the postlabel of the affected original allele
\&            location. Postlabel is a stable identifier whereas location
\&            can be changed by mutations. Postlabel comes from
\&            l<Bio::LiveSeq::Gene>.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "lastlabel"
.IX Subsection "lastlabel"
.Vb 3
\& Title   : lastlabel
\& Usage   : $obj->lastlabel();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns the lastlabel of the affected original allele
\&            location. Lastlabel is a stable identifier whereas location
\&            can be changed by mutations. Lastlabel comes from
\&            l<Bio::LiveSeq::Gene>.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
