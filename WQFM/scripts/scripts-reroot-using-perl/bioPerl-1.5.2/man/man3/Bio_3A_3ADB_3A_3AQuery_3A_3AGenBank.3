.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Query::GenBank 3"
.TH Bio::DB::Query::GenBank 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Query::GenBank \- Build a GenBank Entrez Query
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&   my $query_string = 'Oryza[Organism] AND EST[Keyword]';
\&   my $query = Bio::DB::Query::GenBank->new(-db=>'nucleotide',
\&                                            -query=>$query_string,
\&                                            -mindate => '2001',
\&                                            -maxdate => '2002');
\&   my $count = $query->count;
\&   my @ids   = $query->ids;
.Ve
.PP
.Vb 6
\&   # get a genbank database handle
\&   my $gb = new Bio::DB::GenBank;
\&   my $stream = $gb->get_Stream_by_query($query);
\&   while (my $seq = $stream->next_seq) {
\&      # do something with the sequence object
\&   }
.Ve
.PP
.Vb 2
\&   # initialize the list yourself
\&   my $query = Bio::DB::Query::GenBank->new(-ids=>[195052,2981014,11127914]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class encapsulates \s-1NCBI\s0 Entrez queries.  It can be used to store
a list of \s-1GI\s0 numbers, to translate an Entrez query expression into a
list of \s-1GI\s0 numbers, or to count the number of terms that would be
returned by a query.  Once created, the query object can be passed to
a Bio::DB::GenBank object in order to retrieve the entries
corresponding to the query.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email lstein@cshl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 12
\& Title   : new
\& Usage   : $db = Bio::DB::Query::GenBank->new(@args)
\& Function: create new query object
\& Returns : new query object
\& Args    : -db       database ('protein' or 'nucleotide')
\&           -query    query string
\&           -mindate  minimum date to retrieve from
\&           -maxdate  maximum date to retrieve from
\&           -reldate  relative date to retrieve from (days)
\&           -datetype date field to use ('edat' or 'mdat')
\&           -ids      array ref of gids (overrides query)
\&           -maxids   the maximum number of IDs you wish to collect (defaults to 100)
.Ve
.PP
This method creates a new query object.  Typically you will specify a
\&\-db and a \-query argument, possibly modified by \-mindate, \-maxdate, or
\&\-reldate.  \-mindate and \-maxdate specify minimum and maximum dates for
entries you are interested in retrieving, expressed in the form
\&\s-1YYYY/MM/DD\s0.  \-reldate is used to fetch entries that are more recent
than the indicated number of days.
.PP
If you provide an array reference of IDs in \-ids, the query will be
ignored and the list of IDs will be used when the query is passed to a
Bio::DB::GenBank object's \fIget_Stream_by_query()\fR method.  A variety of
IDs are automatically recognized, including \s-1GI\s0 numbers, Accession
numbers, Accession.version numbers and locus names.
.PP
By default, the query will collect only the first 100 IDs and will
generate an exception if you call the \fIids()\fR method and the query
returned more than that number.  To increase this maximum, set \-maxids
to a number larger than the number of IDs you expect to obtain.  This
only affects the list of IDs you obtain when you call the \fIids()\fR
method, and does not affect in any way the number of entries you
receive when you generate a SeqIO stream from the query.
.Sh "cookie"
.IX Subsection "cookie"
.Vb 5
\& Title   : cookie
\& Usage   : ($cookie,$querynum) = $db->cookie
\& Function: return the NCBI query cookie
\& Returns : list of (cookie,querynum)
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 this information is used by Bio::DB::GenBank in
conjunction with efetch.
.Sh "_request_parameters"
.IX Subsection "_request_parameters"
.Vb 5
\& Title   : _request_parameters
\& Usage   : ($method,$base,@params = $db->_request_parameters
\& Function: return information needed to construct the request
\& Returns : list of method, url base and key=>value pairs
\& Args    : none
.Ve
.Sh "count"
.IX Subsection "count"
.Vb 5
\& Title   : count
\& Usage   : $count = $db->count;
\& Function: return count of number of entries retrieved by query
\& Returns : integer
\& Args    : none
.Ve
.PP
Returns the number of entries that are matched by the query.
.Sh "ids"
.IX Subsection "ids"
.Vb 5
\& Title   : ids
\& Usage   : @ids = $db->ids([@ids])
\& Function: get/set matching ids
\& Returns : array of sequence ids
\& Args    : (optional) array ref with new set of ids
.Ve
.Sh "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : $query = $db->query([$query])
\& Function: get/set query string
\& Returns : string
\& Args    : (optional) new query string
.Ve
.Sh "_parse_response"
.IX Subsection "_parse_response"
.Vb 6
\& Title   : _parse_response
\& Usage   : $db->_parse_response($content)
\& Function: parse out response
\& Returns : empty
\& Args    : none
\& Throws  : 'unparseable output exception'
.Ve
