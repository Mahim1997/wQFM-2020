.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::PositionHandlerI 3"
.TH Bio::Map::PositionHandlerI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Map::PositionHandlerI \- A Position Handler Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # do not use this module directly
\&    # See Bio::Map::PositionHandler for an example of
\&    # implementation.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface describes the basic methods required for Position Handlers. A
Position Handler copes with the coordination of different Bio::Map::EntityI
objects, adding and removing them from each other and knowning who belongs to
who. These relationships between objects are based around shared Positions,
hence PositionHandler.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "General methods"
.IX Subsection "General methods"
.Sh "register"
.IX Subsection "register"
.Vb 5
\& Title   : register
\& Usage   : $position_handler->register();
\& Function: Ask this Position Handler to look after your entity relationships.
\& Returns : n/a
\& Args    : none
.Ve
.Sh "index"
.IX Subsection "index"
.Vb 6
\& Title   : index
\& Usage   : my $index = $position_handler->index();
\& Function: Get the unique registry index for yourself, generated during the
\&           resistration process.
\& Returns : int
\& Args    : none
.Ve
.Sh "get_entity"
.IX Subsection "get_entity"
.Vb 5
\& Title   : get_entity
\& Usage   : my $entity = $position_handler->get_entity($index);
\& Function: Get the entity that corresponds to the supplied registry index.
\& Returns : Bio::Map::EntityI object
\& Args    : int
.Ve
.Sh "Methods for Bio::Map::PositionI objects"
.IX Subsection "Methods for Bio::Map::PositionI objects"
.Sh "map"
.IX Subsection "map"
.Vb 7
\& Title   : map
\& Usage   : my $map = $position_handler->map();
\&           $position_handler->map($map);
\& Function: Get/Set the map you are on. You must be a Position.
\& Returns : L<Bio::Map::MapI>
\& Args    : none to get, OR
\&           new L<Bio::Map::MapI> to set
.Ve
.Sh "element"
.IX Subsection "element"
.Vb 7
\& Title   : element
\& Usage   : my $element = $position_handler->element();
\&           $position_handler->element($element);
\& Function: Get/Set the map element you are for. You must be a Position.
\& Returns : L<Bio::Map::MappableI>
\& Args    : none to get, OR
\&           new L<Bio::Map::MappableI> to set
.Ve
.Sh "Methods for all other Bio::Map::EntityI objects"
.IX Subsection "Methods for all other Bio::Map::EntityI objects"
.Sh "add_positions"
.IX Subsection "add_positions"
.Vb 5
\& Title   : add_positions
\& Usage   : $position_handler->add_positions($pos1, $pos2, ...);
\& Function: Add some positions to yourself. You can't be a position.
\& Returns : n/a
\& Args    : Array of Bio::Map::PositionI objects
.Ve
.Sh "get_positions"
.IX Subsection "get_positions"
.Vb 7
\& Title   : get_positions
\& Usage   : my @positions = $position_handler->get_positions();
\& Function: Get all your positions. You can't be a Position.
\& Returns : Array of Bio::Map::PositionI objects
\& Args    : none for all, OR
\&           Bio::Map::EntityI object to limit the Positions to those that
\&           are shared by you and this other entity.
.Ve
.Sh "purge_positions"
.IX Subsection "purge_positions"
.Vb 8
\& Title   : purge_positions
\& Usage   : $position_handler->purge_positions();
\& Function: Remove all positions from yourself. You can't be a Position.
\& Returns : n/a
\& Args    : none to remove all, OR
\&           Bio::Map::PositionI object to remove only that entity, OR
\&           Bio::Map::EntityI object to limit the removal to those Positions that
\&           are shared by you and this other entity.
.Ve
.Sh "get_other_entities"
.IX Subsection "get_other_entities"
.Vb 6
\& Title   : get_other_entities
\& Usage   : my @entities = $position_handler->get_other_entities();
\& Function: Get all the entities that share your Positions. You can't be a
\&           Position.
\& Returns : Array of Bio::Map::EntityI objects
\& Args    : none
.Ve
