.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::OntologyTerm 3"
.TH Bio::Annotation::OntologyTerm 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Annotation::OntologyTerm \- An ontology term adapted to AnnotationI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   use Bio::Annotation::OntologyTerm;
\&   use Bio::Annotation::Collection;
\&   use Bio::Ontology::Term;
.Ve
.PP
.Vb 1
\&   my $coll = new Bio::Annotation::Collection;
.Ve
.PP
.Vb 6
\&   # this also implements a tag/value pair, where tag _and_ value are treated
\&   # as ontology terms
\&   my $annterm = new Bio::Annotation::OntologyTerm(-label => 'ABC1',
\&                                                   -tagname => 'Gene Name');
\&   # ontology terms can be added directly - they implicitly have a tag
\&   $coll->add_Annotation($annterm);
.Ve
.PP
.Vb 8
\&   # implementation is by composition - you can get/set the term object
\&   # e.g.
\&   my $term = $annterm->term(); # term is-a Bio::Ontology::TermI
\&   print "ontology term ",$term->name()," (ID ",$term->identifier(),
\&         "), ontology ",$term->ontology()->name(),"\en";
\&   $term = Bio::Ontology::Term->new(-name => 'ABC2',
\&                                    -ontology => 'Gene Name');
\&   $annterm->term($term);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ontology term annotation object
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $sv = new Bio::Annotation::OntologyTerm;
\& Function: Instantiate a new OntologyTerm object
\& Returns : Bio::Annotation::OntologyTerm object
\& Args    : -term => $term to initialize the term data field [optional]
\&           Most named arguments that Bio::Ontology::Term accepts will work
\&           here too. -label is a synonym for -name, -tagname is a synonym for
\&           -ontology.
.Ve
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.Sh "as_text"
.IX Subsection "as_text"
.Vb 6
\& Title   : as_text
\& Usage   : my $text = $obj->as_text
\& Function: Returns a textual representation of the annotation that
\&           this object holds. Presently, it is tag name, name of the
\&           term, and the is_obsolete attribute concatenated togather
\&           with a delimiter (|).
.Ve
.PP
.Vb 2
\& Returns : string
\& Args    : none
.Ve
.Sh "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   : my $hashtree = $value->hash_tree
\& Function: For supporting the AnnotationI interface just returns the value
\&           as a hashref with the key 'value' pointing to the value
\& Returns : hashrf
\& Args    : none
.Ve
.Sh "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
.Ve
.PP
.Vb 2
\&           Setting this is optional. If set, it obviates the need to provide
\&           a tag to AnnotationCollection when adding this object.
.Ve
.PP
.Vb 4
\&           This is aliased to ontology() here.
\& Example :
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Methods for Bio::Ontology::TermI compliance"
.IX Header "Methods for Bio::Ontology::TermI compliance"
.Sh "term"
.IX Subsection "term"
.Vb 3
\& Title   : term
\& Usage   : $obj->term($newval)
\& Function: Get/set the Bio::Ontology::TermI implementing object.
.Ve
.PP
.Vb 5
\&           We implement TermI by composition, and this method sets/gets the
\&           object we delegate to.
\& Example :
\& Returns : value of term (a Bio::Ontology::TermI compliant object)
\& Args    : new value (a Bio::Ontology::TermI compliant object, optional)
.Ve
.Sh "identifier"
.IX Subsection "identifier"
.Vb 7
\& Title   : identifier
\& Usage   : $term->identifier( "0003947" );
\&           or
\&           print $term->identifier();
\& Function: Set/get for the identifier of this Term.
\& Returns : The identifier [scalar].
\& Args    : The identifier [scalar] (optional).
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 7
\& Title   : name
\& Usage   : $term->name( "N-acetylgalactosaminyltransferase" );
\&           or
\&           print $term->name();
\& Function: Set/get for the name of this Term.
\& Returns : The name [scalar].
\& Args    : The name [scalar] (optional).
.Ve
.Sh "definition"
.IX Subsection "definition"
.Vb 7
\& Title   : definition
\& Usage   : $term->definition( "Catalysis of ..." );
\&           or
\&           print $term->definition();
\& Function: Set/get for the definition of this Term.
\& Returns : The definition [scalar].
\& Args    : The definition [scalar] (optional).
.Ve
.Sh "ontology"
.IX Subsection "ontology"
.Vb 9
\& Title   : ontology
\& Usage   : $term->ontology( $top );
\&           or
\&           $top = $term->ontology();
\& Function: Set/get for a relationship between this Term and
\&           another Term (e.g. the top level of the ontology).
\& Returns : The ontology of this Term [TermI].
\& Args    : The ontology of this Term [TermI or scalar -- which
\&           becomes the name of the catagory term] (optional).
.Ve
.Sh "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 7
\& Title   : is_obsolete
\& Usage   : $term->is_obsolete( 1 );
\&           or
\&           if ( $term->is_obsolete() )
\& Function: Set/get for the obsoleteness of this Term.
\& Returns : the obsoleteness [0 or 1].
\& Args    : the obsoleteness [0 or 1] (optional).
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $term->comment( "Consider the term ..." );
\&           or
\&           print $term->comment();
\& Function: Set/get for an arbitrary comment about this Term.
\& Returns : A comment.
\& Args    : A comment (optional).
.Ve
.Sh "get_synonyms"
.IX Subsection "get_synonyms"
.Vb 5
\& Title   : get_synonyms()
\& Usage   : @aliases = $term->get_synonyms();
\& Function: Returns a list of aliases of this Term.
\& Returns : A list of aliases [array of [scalar]].
\& Args    :
.Ve
.Sh "add_synonym"
.IX Subsection "add_synonym"
.Vb 7
\& Title   : add_synonym
\& Usage   : $term->add_synonym( @asynonyms );
\&           or
\&           $term->add_synonym( $synonym );
\& Function: Pushes one or more synonyms into the list of synonyms.
\& Returns :
\& Args    : One synonym [scalar] or a list of synonyms [array of [scalar]].
.Ve
.Sh "remove_synonyms"
.IX Subsection "remove_synonyms"
.Vb 5
\& Title   : remove_synonyms()
\& Usage   : $term->remove_synonyms();
\& Function: Deletes (and returns) the synonyms of this Term.
\& Returns : A list of synonyms [array of [scalar]].
\& Args    :
.Ve
.Sh "get_dblinks"
.IX Subsection "get_dblinks"
.Vb 5
\& Title   : get_dblinks()
\& Usage   : @ds = $term->get_dblinks();
\& Function: Returns a list of each dblinks of this GO term.
\& Returns : A list of dblinks [array of [scalars]].
\& Args    :
.Ve
.Sh "add_dblink"
.IX Subsection "add_dblink"
.Vb 9
\& Title   : add_dblink
\& Usage   : $term->add_dblink( @dbls );
\&           or
\&           $term->add_dblink( $dbl );
\& Function: Pushes one or more dblinks
\&           into the list of dblinks.
\& Returns :
\& Args    : One  dblink [scalar] or a list of
\&            dblinks [array of [scalars]].
.Ve
.Sh "remove_dblinks"
.IX Subsection "remove_dblinks"
.Vb 5
\& Title   : remove_dblinks()
\& Usage   : $term->remove_dblinks();
\& Function: Deletes (and returns) the definition references of this GO term.
\& Returns : A list of definition references [array of [scalars]].
\& Args    :
.Ve
.Sh "get_secondary_ids"
.IX Subsection "get_secondary_ids"
.Vb 3
\& Title   : get_secondary_ids
\& Usage   : @ids = $term->get_secondary_ids();
\& Function: Returns a list of secondary identifiers of this Term.
.Ve
.PP
.Vb 2
\&           Secondary identifiers mostly originate from merging terms,
\&           or possibly also from splitting terms.
.Ve
.PP
.Vb 2
\& Returns : A list of secondary identifiers [array of [scalar]]
\& Args    :
.Ve
.Sh "add_secondary_id"
.IX Subsection "add_secondary_id"
.Vb 7
\& Title   : add_secondary_id
\& Usage   : $term->add_secondary_id( @ids );
\&           or
\&           $term->add_secondary_id( $id );
\& Function: Adds one or more secondary identifiers to this term.
\& Returns :
\& Args    : One or more secondary identifiers [scalars]
.Ve
.Sh "remove_secondary_ids"
.IX Subsection "remove_secondary_ids"
.Vb 5
\& Title   : remove_secondary_ids
\& Usage   : $term->remove_secondary_ids();
\& Function: Deletes (and returns) the secondary identifiers of this Term.
\& Returns : The previous list of secondary identifiers [array of [scalars]]
\& Args    :
.Ve
