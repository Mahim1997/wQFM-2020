.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::SiRNA 3"
.TH Bio::Tools::SiRNA 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
SiRNA \- Perl object for designing small inhibitory RNAs.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::SiRNA;
.Ve
.PP
.Vb 4
\&  my $sirna_designer = Bio::Tools::SiRNA->new( -target => $bio_seq,
\&                                               -rules  => 'saigo'
\&    );
\&  my @pairs = $sirna_designer->design;
.Ve
.PP
.Vb 3
\&  foreach $pair (@pairs) {
\&      my $sense_oligo_sequence = $pair->sense->seq;
\&      my $antisense_oligo_sequence = $pair->antisense->seq;
.Ve
.PP
.Vb 4
\&      # print out results
\&      print join ("\et", $pair->start, $pair->end, $pair->rank,
\&                  $sense_oligo_sequence, $antisense_oligo_sequence), "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Package for designing siRNA reagents.
.PP
Input is a Bio::SeqI\-compliant object (the target).
.PP
Output is a list of Bio::SeqFeature::SiRNA::Pair objects, which are
added to the feature table of the target sequence.  Each
Bio::SeqFeature::SiRNA::Pair contains two subfeatures
(Bio::SeqFeature::Oligo objects) which correspond to the individual
oligos.  These objects provide accessors for the information on the
individual reagent pairs.
.PP
This verion of Bio::Tools::SiRNA represents a major change in architecture.
Specific 'rulesets' for siRNA selection as developed by various groups are
implemented as Bio::Tools::SiRNA::Ruleset objects, which inherit from
Bio::Tools::SiRNA.  This will make it easier to add new rule sets or modify
existing approaches. Currently the Tuschl and Ui-Tei (2004) rules are 
implemented. For consistency, the Tuschl rules are implemented by default.
.PP
In addition, this module provides three 'extra' rules which can be added
above and beyond any ruleset.
.IP "1." 3
SiRNAs that overlap known SNPs (identified as SeqFeatures with 
primary tag = variation) can be avoided.
.IP "2." 3
Other regions (with primary tag = 'Excluded') can also be skipped.  I
use this with Bio::Tools::Run::Mdust to avoid low-complexity regions
(must be run separately), but other programs could also be used.
.IP "3." 3
SiRNAs may also be selected in the 3 prime \s-1UTR\s0 of a gene by setting
\&\f(CW$sirna_designer\fR\->\fIinclude_3pr()\fR to true.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Tools::Run::Mdust, Bio::SeqFeature::SiRNA::Pair,
Bio::SeqFeature::SiRNA::Oligo..
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Donald Jackson (donald.jackson@bms.com)
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 18
\& Title          : new
\& Usage          : my $sirna_designer = Bio::Tools::SiRNA->new();
\& Function       : Constructor for designer object
\& Returns        : Bio::Tools::SiRNA object
\& Args           : target - the target sequence for the SiRNAs as a Bio::Seq::RichSeq
\&                  start_pad - distance from the CDS start to skip (default 75)
\&                  end_pad - distance from the CDS end to skip (default 50)
\&                  include_3pr - set to true to include SiRNAs in the 3prime UTR (default false)
\&                  rules - rules for selecting siRNAs, currently supporting saigo and tuschl
\&                  min_gc - minimum GC fraction (NOT percent) (default 0.4)
\&                  max_gc - maximum GC fraction (NOT percent) (default 0.6)
\&                  cutoff - worst 'rank' accepted(default 3)
\&                  avoid_snps - boolean - reject oligos that overlap a variation
\&                     SeqFeature in the target (default true)
\&                  gstring - maximum allowed consecutive Gs.
\&                     Too many can cause problems in synthesis (default 4)
\&  Note          : All arguments can also be changed/accessed using autoloaded 
\&                 methods such as:
.Ve
.PP
.Vb 1
\&    my $start_pad = $sirna_designer->start_pad().
.Ve
.Sh "target"
.IX Subsection "target"
.Vb 7
\&  Title         : target
\&  Usage         : my $target_seq = $sirna_designer->target(); # get the current target
\&                  OR 
\&                  $sirna_designer->target($new_target_seq); # set a new target 
\&  Function      : Set/get the target as a Bio::SeqI-compliant object
\&  Returns       : a Bio::SeqI-compliant object
\&  Args          : a Bio::SeqI-compliant object (optional)
.Ve
.Sh "rules"
.IX Subsection "rules"
.Vb 6
\&    Title       : rules
\&    Usage       : $sirna->rules('ruleset')
\&    Purpose     : set/get ruleset to use for selecting SiRNA oligo pairs.
\&    Returns     : not sure yet
\&    Args        : a ruleset name (currently supported: Tuschl, Saigo)
\&                  or a Bio::Tools::SiRNA::RulesetI compliant object
.Ve
.Sh "design"
.IX Subsection "design"
.Vb 5
\&  Title         : design
\&  Usage         : my @pairs = $sirna_designer->design();
\&  Purpose       : Design SiRNA oligo pairs.  
\&  Returns       : A list of SiRNA pairs as Bio::SeqFeature::SiRNA::Pair objects
\&  Args          : none
.Ve
.Sh "add_oligos"
.IX Subsection "add_oligos"
.Vb 4
\&  Title         : add_oligos
\&  Usage         : $sirna_designer->add_oligos($sequence, $start, $rank);
\&  Purpose       : Add SiRNA olgos to target Bio::Seq as Bio::SeqFeature::SiRNA::Pair objects
\&  Args          : Oligo sequence and start position (required), rank/score (optional)
.Ve
