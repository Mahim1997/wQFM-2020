.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::EUtilities::elink 3"
.TH Bio::DB::EUtilities::elink 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::EUtilities::elink \- check for and retrieve external or related ID's
from a list of one or more primary ID's, including relevancy scores.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBDo not use this module directly.\fR  Use it via the
Bio::DB::EUtilities class.
.PP
.Vb 1
\&  # chain EUtilities for complex queries
.Ve
.PP
.Vb 1
\&  use Bio::DB::EUtilities;
.Ve
.PP
.Vb 4
\&  my $esearch = Bio::DB::EUtilities->new(-eutil      => 'esearch',
\&                                         -db         => 'pubmed',
\&                                         -term       => 'hutP',
\&                                         -usehistory => 'y');
.Ve
.PP
.Vb 1
\&  $esearch->get_response; # parse the response, fetch a cookie
.Ve
.PP
.Vb 5
\&  my $elink = Bio::DB::EUtilities->new(-eutil        => 'elink',
\&                                       -db           => 'protein,taxonomy',
\&                                       -dbfrom       => 'pubmed',
\&                                       -cookie       => $esearch->next_cookie,
\&                                       -cmd          => 'neighbor');
.Ve
.PP
.Vb 1
\&  # this retrieves the Bio::DB::EUtilities::ElinkData object
.Ve
.PP
.Vb 2
\&  my ($linkset) = $elink->next_linkset;
\&  my @ids;
.Ve
.PP
.Vb 1
\&  # step through IDs for each linked database in the ElinkData object
.Ve
.PP
.Vb 4
\&  for my $db ($linkset->get_databases) {   
\&    @ids = $linkset->get_LinkIds_by_db($db); #returns primary ID's
\&    # do something here
\&  }
.Ve
.PP
.Vb 1
\&  # multiple ID groups (for one-to-one-correspondence of IDs)
.Ve
.PP
.Vb 6
\&  my $elink = Bio::DB::EUtilities->new(-eutil        => 'elink',
\&                                       -db           => 'all',
\&                                       -dbfrom       => 'protein',
\&                                       -id           => [\e@id1, @ids2],
\&                                       -multi_id     => 1,
\&                                       -cmd          => 'neighbor');
.Ve
.PP
.Vb 6
\&  while (my $linkset = $elink->next_linkset) {
\&    for my $db ($linkset->get_databases) {
\&      my @ids = $linkset->get_LinkIds_by_db($db); #returns primary ID's
\&      # do something here
\&    }
\&  }
.Ve
.PP
.Vb 1
\&  # to retrieve scores for a linkset
.Ve
.PP
.Vb 11
\&  while (my $linkset = $elink->next_linkset) {
\&    my @score_dbs = $linkset->has_scores; # retrieve databases with score values
\&    for my $db (@score_dbs) {
\&      my @ids = $linkset->get_LinkIds_by_db($db); #returns primary ID's
\&      $linkset->set_score_db($db);  # to current database containing scores
\&      for my $id (@ids) {
\&         my $score = get_score($id);  
\&         # do something here, like screen for IDs based on score
\&      }
\&    }
\&  }
.Ve
.PP
.Vb 1
\&  # or just receive a hash containing ID-score key-value pairs
.Ve
.PP
.Vb 7
\&  while (my $linkset = $elink->next_linkset) {
\&    my @score_dbs = $linkset->has_scores; 
\&    for my $db (@score_dbs) {
\&      $linkset->set_score_db($db);
\&      %scores = $linkset->get_score_hash;
\&    }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING\s0\fR: Please do \fB\s-1NOT\s0\fR spam the Entrez web server with multiple requests.
.PP
The EUtility Elink is used to check for and retrieve external or related \s-1ID\s0's
from a list of one or more primary \s-1ID\s0's.  Using the \f(CW\*(C`cmd\*(C'\fR parameter, one can
vary the returned data.  See the below command options for explanations on
returned \s-1XML\s0 output.  For certain command options one can retrieve one or more
Bio::DB::EUtilities::Cookie objects to be used in
other EUtility searches or efetch primary IDs.  Other will return the \s-1ID\s0
information and relevancy scores in one or more
Bio::DB::EUtilities::ElinkData objects.
.Sh "\s-1NCBI\s0 ELink Parameters"
.IX Subsection "NCBI ELink Parameters"
The following are a general list of parameters that can be used to take
advantage of ELink.  Up-to-date help for ELink is available at this \s-1URL\s0
(the information below is a summary of the options found there):
.PP
.Vb 1
\&  http://eutils.ncbi.nlm.nih.gov/entrez/query/static/elink_help.html
.Ve
.ie n .IP """db""" 3
.el .IP "\f(CWdb\fR" 3
.IX Item "db"
One or more database available through EUtilities. If set to 'all', will
retrieve all relevant information from each database based on the \f(CW\*(C`cmd\*(C'\fR
parameter (the default setting is to retrieve related primary \s-1ID\s0's).  One
interesting behaviour is when \f(CW\*(C`db\*(C'\fR and \f(CW\*(C`dbfrom\*(C'\fR are set to the same database;
related IDs from database are retrieved along with a relevancy score.  This
score differs from database to database; if protein-protein elinks are sought,
the scores are generated from \s-1BLASTP\s0
.ie n .IP """dbfrom""" 3
.el .IP "\f(CWdbfrom\fR" 3
.IX Item "dbfrom"
originating database; useful only if using directly when querying with \s-1ID\s0's
.ie n .IP """id""" 3
.el .IP "\f(CWid\fR" 3
.IX Item "id"
a list of primary \s-1ID\s0's
.Sp
Below are a list of IDs which can be used with ELink:
.Sp
\&\fB\s-1PMID\s0\fR (pubmed), \fB\s-1MIM\s0 number\fR (omim), \fB\s-1GI\s0 number\fR (nucleotide, protein),
\&\fBGenome \s-1ID\s0\fR (genome), \fBPopset \s-1ID\s0\fR (popset), \fB\s-1SNP\s0 cluster \s-1ID\s0\fR (snp),
\&\fBUniSTS \s-1ID\s0\fR (unists), \fBUniGene cluster \s-1ID\s0\fR (unigene), \fBMMDB-ID\fR (structure),
\&\fBPSSM-ID\fR (cdd), \fB3D \s-1SDI\s0\fR (domains), \fB\s-1TAXID\s0\fR (taxonomy), \fB\s-1GEO\s0 \s-1ID\s0\fR (geo)
.ie n .IP """reldate""" 3
.el .IP "\f(CWreldate\fR" 3
.IX Item "reldate"
limits results to the number of days preceding today's date
.ie n .IP """mindate""\fR, \f(CW""maxdate""" 3
.el .IP "\f(CWmindate\fR, \f(CWmaxdate\fR" 3
.IX Item "mindate, maxdate"
limits results by dates (\f(CW\*(C`yyyy/mm/dd\*(C'\fR format, or by year)
.ie n .IP """term""" 3
.el .IP "\f(CWterm\fR" 3
.IX Item "term"
limits results by Entrez query (only valid when \f(CW\*(C`cmd=neighbor\*(C'\fR within a single
database)
.ie n .IP """retmode""" 3
.el .IP "\f(CWretmode\fR" 3
.IX Item "retmode"
set to \s-1XML\s0, but can be changed to ref when needed
.ie n .IP """cmd""" 3
.el .IP "\f(CWcmd\fR" 3
.IX Item "cmd"
command values (see below)
.ie n .IP """holding""" 3
.el .IP "\f(CWholding\fR" 3
.IX Item "holding"
list LinkOut URLs for specified holding provider; used with \f(CW\*(C`cmd=llinks\*(C'\fR
or \f(CW\*(C`cmd=llinkslib\*(C'\fR (rarely used)
.Sh "Additional (Bioperl\-related) Parameters"
.IX Subsection "Additional (Bioperl-related) Parameters"
The following are a general list of parameters that can be used to take
advantage of ELink.  Up-to-date help for ELink is available at this \s-1URL\s0
(the information below is a summary of the options found there):
.PP
.Vb 1
\&  http://eutils.ncbi.nlm.nih.gov/entrez/query/static/elink_help.html
.Ve
.ie n .IP """eutil""" 3
.el .IP "\f(CWeutil\fR" 3
.IX Item "eutil"
The relevant EUtility to be used (elink).  
.ie n .IP """cookie""" 3
.el .IP "\f(CWcookie\fR" 3
.IX Item "cookie"
Uses a Cookie\-based search (see below)
.ie n .IP """multi_id""" 3
.el .IP "\f(CWmulti_id\fR" 3
.IX Item "multi_id"
Sets a flag to treat the \s-1ID\s0 data (\f(CW\*(C`id\*(C'\fR parameter) as multiple \s-1ID\s0 groups (see
below).
.ie n .IP """keep_cookies""" 3
.el .IP "\f(CWkeep_cookies\fR" 3
.IX Item "keep_cookies"
Sets a flag to retain the cookie queue (this is normally cleared
before 
.Sh "Command Values"
.IX Subsection "Command Values"
Command values are set using the \f(CW\*(C`cmd\*(C'\fR parameter. 
.ie n .IP """prlinks""" 3
.el .IP "\f(CWprlinks\fR" 3
.IX Item "prlinks"
List the hyperlink to the primary LinkOut provider for multiple IDs and
database. Each \s-1ID\s0 is processed separately.
.ie n .IP """prlinks&retmode=ref""" 3
.el .IP "\f(CWprlinks&retmode=ref\fR" 3
.IX Item "prlinks&retmode=ref"
Create a hyperlink to the primary LinkOut provider for a single \s-1ID\s0 and database.
.ie n .IP """llinks""" 3
.el .IP "\f(CWllinks\fR" 3
.IX Item "llinks"
List LinkOut URLs and Attributes, except PubMed libraries, for multiple IDs
and database. Each \s-1ID\s0 is processed separately.
.ie n .IP """llinkslib""" 3
.el .IP "\f(CWllinkslib\fR" 3
.IX Item "llinkslib"
List LinkOut URLs and Attributes for multiple IDs and database.  Each \s-1ID\s0 is
processed separately.
.ie n .IP """lcheck""" 3
.el .IP "\f(CWlcheck\fR" 3
.IX Item "lcheck"
Check for the existence (Y or N) of an external link in for multiple IDs and
database.
.ie n .IP """ncheck""" 3
.el .IP "\f(CWncheck\fR" 3
.IX Item "ncheck"
Check for the existence of a neighbor link for each \s-1ID\s0 within a database,
e.g., Related Articles in PubMed.
.ie n .IP """neighbor""" 3
.el .IP "\f(CWneighbor\fR" 3
.IX Item "neighbor"
The default setting. Display neighbors and their scores within a database.
This module will parse \s-1XML\s0 output from an ELink query and will return a
Bio::DB::EUtilities::ElinkData object, which contains IDs for every database
liked to using \f(CW\*(C`db\*(C'\fR (see \f(CW\*(C`id\*(C'\fR and \f(CW\*(C`db\*(C'\fR for more details).  
.ie n .IP """neighbor_history""" 3
.el .IP "\f(CWneighbor_history\fR" 3
.IX Item "neighbor_history"
Create history (WebEnv & query_key) for use in other EUtilities.
.ie n .IP """acheck""" 3
.el .IP "\f(CWacheck\fR" 3
.IX Item "acheck"
Lists Entrez databases links for multiple IDs from a single database.
.Sh "Cookies"
.IX Subsection "Cookies"
Some EUtilities (\f(CW\*(C`epost\*(C'\fR, \f(CW\*(C`esearch\*(C'\fR, or \f(CW\*(C`elink\*(C'\fR) are able to retain information on
the \s-1NCBI\s0 server under certain settings.  This information can be retrieved by
using a \fBcookie\fR.  Here, the idea of the 'cookie' is similar to the 'cookie' set
on a user's computer when browsing the Web.  \s-1XML\s0 data returned by these
EUtilities, when applicable, is parsed for the cookie information (the 'WebEnv'
and 'query_key' tags to be specific)  The information along with other identifying
data, such as the calling eutility, description of query, etc.) is stored as a
Bio::DB::EUtilities::Cookie object in an internal
queue.  These can be retrieved one at a time by using the next_cookie method or
all at once in an array using get_all_cookies.  Each cookie can then be 'fed',
one at a time, to another EUtility object, thus enabling chained queries as
demonstrated in the synopsis.
.PP
For more information, see the \s-1POD\s0 documentation for
Bio::DB::EUtilities::Cookie.
.Sh "ElinkData Objects"
.IX Subsection "ElinkData Objects"
Due to the diversity of information that can be returned via elink, a special
object (ElinkData) has been created to hold data parsed from the \s-1XML\s0 output. This
object holds returned IDs, scores, and potentially additional data as the need
arises.  ElinkData objects are stored in an internal queue much like for Cookie
objects; similarly, they can be accessed using next_linkset and
get_all_linksets.  If a simple search is initiated, where one database is
queried using one set of IDs, the default EUtilities method \f(CW\*(C`get_ids\*(C'\fR can be
used to retrieve the IDs.  If more than one database is specified for a single
set of IDs, (such as when \f(CW\*(C`db\*(C'\fR is set to 'all' or a comma-separated list, like
\&'protein,taxonomy'), the database must be passed explicitly to \f(CW\*(C`get_ids\*(C'\fR as an
argument to retrieve the relevant IDs.
.PP
The most complicated sitation comes when using multiple \s-1ID\s0 groups (see below).
This requires that each \s-1ID\s0 group have a separate set of data (a linkset), each
with potential multiple databases, multiple IDs, and so on.  Linkset data is
stored in a special object
(Bio::DB::EUtilities::ElinkData).
.PP
For more information, see the \s-1POD\s0 documentation for
Bio::DB::EUtilities::ElinkData.
.SH "CURRENT USES"
.IX Header "CURRENT USES"
.Sh "Complex queries"
.IX Subsection "Complex queries"
Chaining queries for retrieving related data using elink and other EUtilities is
now possible (see the \*(L"\s-1SYNOPSIS\s0\*(R" for an example).  For instance, one can
grab a large number of taxon IDs using protein/nucleotide IDs; these can be
retrieved directly or saved on the server (setting \f(CW\*(C`cmd\*(C'\fR to 'neighbor_history'),
and the cookie passed on to efetch.
.Sh "Retrieving relevancy scores"
.IX Subsection "Retrieving relevancy scores"
When the \f(CW\*(C`db\*(C'\fR and \f(CW\*(C`dbfrom\*(C'\fR parameters are set to the same database, one can
retrieve relevancy scores for a single \s-1ID\s0.  These are based on several different
factors.  For proteins, they are precomputed \s-1BLASTP\s0 scores, so this is actually
a quick way to get the best hits without having to run \s-1BLASTP\s0 directly!
Similarly, scores returned for nucleotide-nucleotide are based on \s-1BLASTN\s0 scores.
.Sh "Multiple \s-1ID\s0 groups"
.IX Subsection "Multiple ID groups"
When \f(CW\*(C`multi_id\*(C'\fR flag is set to a \s-1TRUE\s0 value, the id list is built based on
different set of factors.  The default method for submitting an \s-1ID\s0 list for
a query request for any EUtility is by having the \f(CW\*(C`id\*(C'\fR parameter set to
an array reference (multiple IDs) or pass a single \s-1ID\s0 as a scalar, like this:
.PP
.Vb 2
\&  -id  => \e@ids,
\&  -id  => '1621261',
.Ve
.PP
Bio::DB::EUtilities::elink has the additional
capability to submit \s-1ID\s0 groups where searches are performed on each \s-1ID\s0 group
independently.  This is accomplished by setting the \f(CW\*(C`multi_id\*(C'\fR flag to true,
which indicates that the \s-1ID\s0 list will be evaluated as an array reference, with
each \s-1ID\s0 group represented by another array reference or a single \s-1ID\s0.  So, with
\&\f(CW\*(C`multi_id\*(C'\fR set to \s-1TRUE:\s0
.PP
.Vb 6
\&  -id  => \e@ids,  # evaluates each ID in the array independently
\&  ...
\&  -id  => [@ids], # same as above
\&  ...
\&  -id  => [\e@ids, $id], # IDs in @ids are grouped together for one search
\&                        # while single ID in scalar is searched independently
.Ve
.PP
It can get tricky:
.PP
.Vb 2
\&  -id  => [\e@ids, $id1, @ids2], # @ids ID grouped together; IDs in $id1 and @id2
\&                                # are flattened and evaluated independently
.Ve
.PP
This enables one-to-one correspondence with the returned data, so that one
can determine, per \s-1ID\s0, what the matching ELink \s-1ID\s0 is.  The default is to
return them all as a group (no one-to-one correspondence).  Using a small \s-1ID\s0
array, \f(CW\*(C`multi_id\*(C'\fR set to \s-1TRUE\s0, '\-id => \e@ids', and this loop:
.PP
.Vb 4
\&  while (my $linkset = $elink->next_linkset) {
\&    print "Query ID : ",join q(,), $linkset->query_id,"\en";
\&    print "\etTax ID : ",join q(,), $linkset->get_LinkIds_by_db('taxonomy'),"\en";
\&  }
.Ve
.PP
gets this result:
.PP
.Vb 6
\&    Query ID : 1621261,
\&            Tax ID : 83332,
\&    Query ID : 31618162,
\&            Tax ID : 233413,
\&    Query ID : 31792573,
\&            Tax ID : 233413,
.Ve
.PP
Setting \f(CW\*(C`multi_id\*(C'\fR to \s-1FALSE\s0 or not setting, using all other conditions above,
gets this result:
.PP
Query \s-1ID\s0 : 31792573,31618162,1621261,
        Tax \s-1ID\s0 : 233413,83332,
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the 
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@lists.open-bio.org               - General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at uiuc dot edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "parse_response"
.IX Subsection "parse_response"
.Vb 7
\& Title   : parse_response
\& Usage   : $elink->parse_response($content)
\& Function: parse out response for cookie and/or id's
\& Returns : none
\& Args    : HTTP::Response object
\& Throws  : 'NCBI elink nonrecoverable error'
\&           'No links' error
.Ve
.Sh "multi_id"
.IX Subsection "multi_id"
.Vb 5
\& Title   : multi_id
\& Usage   : $elink->multi_id(1);
\& Function: gets/sets value (switch for using multiple ids)
\& Returns : Boolean (value evaluating to true or false)
\& Args    : Boolean (value evaluating to true or false)
.Ve
.Sh "next_linkset"
.IX Subsection "next_linkset"
.Vb 6
\& Title   : next_linkset
\& Usage   : $ls = $elink->next_linkset;
\& Function: returns next linkset in internal cache of 
\&         : Bio::DB::EUtilities::ElinkData objects
\& Returns : Boolean (value evaluating to true or false)
\& Args    : Boolean (value evaluating to true or false)
.Ve
.Sh "get_all_linksets"
.IX Subsection "get_all_linksets"
.Vb 6
\& Title   : get_all_linksets
\& Usage   : @ls = $elink->get_all_linksets;
\& Function: returns array of Bio::DB::EUtilities::ElinkData objects
\& Returns : array or array ref of Bio::DB::EUtilities::ElinkData objects
\&           based on wantarray
\& Args    : None
.Ve
.Sh "reset_linksets"
.IX Subsection "reset_linksets"
.Vb 5
\& Title   : reset_linksets
\& Usage   : $elink->reset_linksets;
\& Function: resets (empties) internal cache of Linkset objects
\& Returns : None
\& Args    : None
.Ve
.Sh "rewind_linksets"
.IX Subsection "rewind_linksets"
.Vb 5
\& Title   : rewind_linksets
\& Usage   : $elink->rewind_linksets;
\& Function: resets linkset index to 0 (starts over)
\& Returns : None
\& Args    : None
.Ve
.Sh "get_linkset_count"
.IX Subsection "get_linkset_count"
.Vb 5
\& Title   : get_linkset_count
\& Usage   : $ct = $elink->get_linkset_count;
\& Function: returns total # of linksets in Elink object
\& Returns : Integer (# linksets)
\& Args    : None
.Ve
