.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Analysis::Protein::Sopma 3"
.TH Bio::Tools::Analysis::Protein::Sopma 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Analysis::Protein::Sopma \- a wrapper around the
Sopma protein secondary structure prediction server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Bio::Tools::Analysis::Protein::Sopma;
\&  #get a Bio::Seq or Bio::PrimarySeq
\&  my $seq;
.Ve
.PP
.Vb 4
\&  my $sopma = Bio::Tools::Analysis::Protein::Sopma->new
\&      (-seq=>$seq, states=>4);
\&  $sopma->run;
\&  print $sopma->result;# #raw text to standard error
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A module to remotely retrieve predictions of protein secondary
structure.  Each residue in the protein receives a score representing
the likelihood of existing in each of four different states (helix,
coil, turn or sheet), e.g.,
.PP
.Vb 5
\&  my $analysis_object = Bio::Tools::SimpleAnalysis::Protein::Sopma->new
\&      ( -seq          => $seq,
\&        -states       => 4,
\&        -window_width => 15,
\&      );
.Ve
.PP
creates a new object.  Compulsory argument \-seq.  Optional arguments
\&\-states, \-window_width,\-similarity_threshold. These arguments can also be
set by direct methods , e.g.,
.PP
.Vb 2
\&  $analysis_object->states(4);
\&  $analysis_object->run;
.Ve
.PP
submits the query to the server and obtains raw text output. Given an
amino acid sequence the results can be obtained in 4 formats,
determined by the argument to the result method:
.IP "1" 4
.IX Item "1"
The raw text of the program output.
.Sp
.Vb 1
\&  my $rawdata = $analysis_object->result;
.Ve
.IP "2" 4
.IX Item "2"
A reference to an array of hashes of scores for each state and the
assigned state.
.Sp
.Vb 3
\&  my $data_ref = $analysis_object->result('parsed');
\&  print "score for helix at residue 2 is $data_ref->[1]{'helix'}\en";
\&  print "predicted struc  at residue 2 is $data_ref->[1]{'struc}\en";
.Ve
.Sp
Hash keys are 'helix', 'struc', 'sheet', 'coil', 'turn'.
.IP "3" 4
.IX Item "3"
An array of Bio::SeqFeature::Generic objects where each feature is a
predicted unit of secondary structure. Only stretches of helix/sheet
predictions for longer than 4 residues are defined as helices/sheets.
.Sp
.Vb 5
\&  my @fts = $analysis_object->result(Bio::SeqFeatureI);
\&  for my $ft (@fts) {
\&      print " From ",  $ft->start, " to  ",$ft->end, " struc: " ,
\&             ($ft->each_tag_value('type'))[0]  ,"\en";
\&  }
.Ve
.IP "4" 4
.IX Item "4"
A Bio::Seq::Meta::Array implementing sequence.
.Sp
This is a Bio::Seq object that can also hold data about each residue
in the sequence.  In this case, the sequence can be associated with a
arrays of Sopma prediction scores.  e.g.,
.Sp
.Vb 3
\&  my $meta_sequence = $analysis_object->result('meta');
\&  print "scores from residues 10 -20 are ",
\&      $meta_sequence->named_submeta_text("Sopma_helix",10,20), "\en";
.Ve
.Sp
Meta sequence names are : Sopma_helix, Sopma_sheet, Sopma_turn,
Sopma_coil, Sopma_struc, representing the scores for each residue.
.Sp
Many methods common to all analyses are inherited from
Bio::Tools::Analysis::SimpleAnalysisBase.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SimpleAnalysisI, 
Bio::Tools::Analysis::SimpleAnalysisBase
Bio::Seq::Meta::Array, 
Bio::WebAgent
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Adams, Richard.Adams@ed.ac.uk, 
.SH "APPENDIX"
.IX Header "APPENDIX"
.Sh "similarity_threshold"
.IX Subsection "similarity_threshold"
.Vb 4
\&  Useage  : $job->similarity_threshold(...)
\&  Returns : The  similarity threshold used in the analysis
\&  Args    : None (retrieves value) or  an integer (default = 8) 
\&            that sets the similarity threshold .
.Ve
.PP
This method gets/sets the  similarity threshold for the prediction.
.Sh "window_width"
.IX Subsection "window_width"
.Vb 4
\&  Usage    : $job->window_width(...)
\&  Returns  : The window width used in the analysis
\&  Args     : None (retrieves value) or  an integer (default = 17)
\&             that sets the window width.
.Ve
.PP
This method gets/sets the window width for the prediction, .  If
attempted to set longer than the sequence, warns of error.
.Sh "states"
.IX Subsection "states"
.Vb 4
\&  Usage    : $job->states(...)
\&  Returns  : The number of secondary structure prediction states
\&  Args     : None (retrieves value) or either '3' or '4' to set
\&             prior to running analysis.
.Ve
.PP
This method gets/sets the number of states for the prediction, either
3 or 4 (includes turns).
.Sh "result"
.IX Subsection "result"
.Vb 3
\&  Usage   : $job->result (...)
\&  Returns : a result created by running an analysis
\&  Args    : various
.Ve
.PP
The method returns a result of an executed job. If the job was
terminated by an error the result may contain an error message instead
of the real data.
.PP
This implementation returns differently processed data depending on
argument:
.IP "undef" 3
.IX Item "undef"
Returns the raw \s-1ASCII\s0 data stream but without \s-1HTML\s0 tags
.IP "'Bio::SeqFeatureI'" 3
.IX Item "'Bio::SeqFeatureI'"
The argument string defines the type of bioperl objects returned in an
array.  The objects are Bio::SeqFeature::Generic.  Feature primary
tag is \*(L"2ary\*(R".  Feature tags are \*(L"type\*(R" (which can be helix, sheet
coil, or turn if 4 state prediction requested) \*(L"method\*(R" (Sopma)
.IP "'parsed'" 3
.IX Item "'parsed'"
Array of hash references of scores/structure assignations 
{ helix => , sheet => , coil => , struc=>}.
.IP "'all'" 3
.IX Item "'all'"
A Bio::Seq::Meta::Array object. Scores can be accessed using methods
from this class. Meta sequence names are Sopma_helix, Sopma_sheet,
Sopma_coil, Sopma_turn (if defined), and Sopma_struc.
