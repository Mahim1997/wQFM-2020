.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::PullResultI 3"
.TH Bio::Search::Result::PullResultI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::Result::PullResultI \- Bio::Search::Result::ResultI interface for
                                  'pull' parsers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # This is an interface and cannot be instantiated
.Ve
.PP
.Vb 4
\&    # typically one gets Results from a SearchIO stream
\&    use Bio::SearchIO;
\&    my $io = new Bio::SearchIO(-format => 'hmmer_pull',
\&                                -file   => 't/data/hmmpfam.out');
.Ve
.PP
.Vb 1
\&    my $result = $io->next_result;
.Ve
.PP
.Vb 3
\&    while( $hit = $result->next_hit()) {
\&        # enter code here for hit processing
\&    }
.Ve
.PP
.Vb 9
\&    my $id = $result->query_name();
\&    my $desc = $result->query_description();
\&    my $dbname = $result->database_name();
\&    my $size = $result->database_letters();
\&    my $num_entries = $result->database_entries();
\&    my $gap_ext = $result->get_parameter('gapext');
\&    my @params = $result->available_parameters;
\&    my $kappa = $result->get_statistic('kappa');
\&    my @statnames = $result->available_statistics;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Search::Result::ResultI objects are data structures containing
the results from the execution of a search algorithm.  As such, it may
contain various algorithm specific information as well as details of
the execution, but will contain a few fundamental elements, including
the ability to return Bio::Search::Hit::HitI objects.
.PP
PullResultI is for fast implementations that only do parsing work on the result
data when you actually request information by calling one of the ResultI
methods.
.PP
Many methods of ResultI are implemented in a way suitable for inheriting classes
that use Bio::PullParserI. It only really makes sense for PullResult modules to
be created by (and have as a \-parent) SearchIO modules written using
PullParserI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR Sendu Bala"
.IX Header "AUTHOR Sendu Bala"
Email bix@sendu.me.uk
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006 Sendu Bala.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "_setup"
.IX Subsection "_setup"
.Vb 6
\& Title   : _setup
\& Usage   : $self->_setup(@args)
\& Function: Implementers should call this to setup common fields and deal with
\&           common arguments to new().
\& Returns : n/a
\& Args    : @args received in new().
.Ve
.Sh "next_hit"
.IX Subsection "next_hit"
.Vb 6
\& Title   : next_hit
\& Usage   : while( $hit = $result->next_hit()) { ... }
\& Function: Returns the next available Hit object, representing potential
\&           matches between the query and various entities from the database.
\& Returns : a Bio::Search::Hit::HitI object or undef if there are no more.
\& Args    : none
.Ve
.Sh "sort_hits"
.IX Subsection "sort_hits"
.Vb 13
\& Title          : sort_hits
\& Usage          : $result->sort_hits(\e&sort_function)
\& Function       : Sorts the available hit objects by a user-supplied function.
\&              Defaults to sort by descending score.
\& Returns        : n/a
\& Args           : A coderef for the sort function. See the documentation on the Perl
\&              sort() function for guidelines on writing sort functions.  
\& Note           : To access the special variables $a and $b used by the Perl sort()
\&              function the user function must access Bio::Search::Result::ResultI namespace. 
\&              For example, use : 
\&              $result->sort_hits(sub{$Bio::Search::Result::ResultI::a->length <=> 
\&                                                         $Bio::Search::Result::ResultI::b->length});
\&              NOT $result->sort_hits($a->length <=>$b->length);
.Ve
.Sh "query_name"
.IX Subsection "query_name"
.Vb 6
\& Title   : query_name
\& Usage   : $id = $result->query_name();
\& Function: Get the string identifier of the query used by the
\&           algorithm that performed the search.
\& Returns : a string.
\& Args    : none
.Ve
.Sh "query_accession"
.IX Subsection "query_accession"
.Vb 5
\& Title   : query_accession
\& Usage   : $id = $result->query_accession();
\& Function: Get the accession (if available) for the query sequence
\& Returns : a string
\& Args    : none
.Ve
.Sh "query_length"
.IX Subsection "query_length"
.Vb 5
\& Title   : query_length
\& Usage   : $id = $result->query_length();
\& Function: Get the length of the query sequence used in the search.
\& Returns : a number
\& Args    : none
.Ve
.Sh "query_description"
.IX Subsection "query_description"
.Vb 6
\& Title   : query_description
\& Usage   : $id = $result->query_description();
\& Function: Get the description of the query sequence
\&           used in the search.
\& Returns : a string
\& Args    : none
.Ve
.Sh "database_name"
.IX Subsection "database_name"
.Vb 6
\& Title   : database_name
\& Usage   : $name = $result->database_name()
\& Function: Used to obtain the name of the database that the query was searched
\&           against by the algorithm.
\& Returns : a scalar string
\& Args    : none
.Ve
.Sh "database_letters"
.IX Subsection "database_letters"
.Vb 7
\& Title   : database_letters
\& Usage   : $size = $result->database_letters()
\& Function: Used to obtain the size of database that was searched against.
\& Returns : a scalar integer (units specific to algorithm, but probably the
\&           total number of residues in the database, if available) or undef if
\&           the information was not available to the Processor object.
\& Args    : none
.Ve
.Sh "database_entries"
.IX Subsection "database_entries"
.Vb 6
\& Title   : database_entries
\& Usage   : $num_entries = $result->database_entries()
\& Function: Used to obtain the number of entries contained in the database.
\& Returns : a scalar integer representing the number of entities in the database
\&           or undef if the information was not available.
\& Args    : none
.Ve
.Sh "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $result->algorithm
\& Function: Obtain the name of the algorithm used to obtain the Result
\& Returns : string (e.g., BLASTP)
\& Args    : [optional] scalar string to set value
.Ve
.Sh "algorithm_version"
.IX Subsection "algorithm_version"
.Vb 5
\& Title   : algorithm_version
\& Usage   : my $r_version = $result->algorithm_version
\& Function: Obtain the version of the algorithm used to obtain the Result
\& Returns : string (e.g., 2.1.2)
\& Args    : [optional] scalar string to set algorithm version value
.Ve
.Sh "algorithm_reference"
.IX Subsection "algorithm_reference"
.Vb 8
\& Title   : algorithm_reference
\& Usage   : $obj->algorithm_reference($newval)
\& Function: 
\& Returns : value of the literature reference for the algorithm
\& Args    : newvalue (optional)
\& Comments: The default implementation in ResultI returns an empty string
\&           rather than throwing a NotImplemented exception, since
\&           the ref may not always be available and is not critical.
.Ve
.Sh "num_hits"
.IX Subsection "num_hits"
.Vb 5
\& Title   : num_hits
\& Usage   : my $hitcount= $result->num_hits
\& Function: returns the number of hits for this query result
\& Returns : integer
\& Args    : none
.Ve
.Sh "hits"
.IX Subsection "hits"
.Vb 5
\& Title   : hits
\& Usage   : my @hits = $result->hits
\& Function: Returns the HitI objects contained within this Result
\& Returns : Array of Bio::Search::Hit::HitI objects
\& Args    : none
.Ve
.PP
See Also: Bio::Search::Hit::HitI
.Sh "no_hits_found"
.IX Subsection "no_hits_found"
.Vb 3
\& Usage     : $nohits = $blast->no_hits_found();
\& Function  : Get boolean indicator indicating whether or not any hits
\&             were present in the report.
.Ve
.PP
.Vb 4
\&             This is NOT the same as determining the number of hits via
\&             the hits() method, which will return zero hits if there were no
\&             hits in the report or if all hits were filtered out during the
\&             parse.
.Ve
.PP
.Vb 2
\&             Thus, this method can be used to distinguish these possibilities
\&             for hitless reports generated when filtering.
.Ve
.PP
.Vb 2
\& Returns   : Boolean
\& Args      : none
.Ve
.Sh "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result->rewind;
\& Function: Allow one to reset the Hit iterator to the beginning
\&           Since this is an in-memory implementation
\& Returns : none
\& Args    : none
.Ve
.Sh "get_parameter"
.IX Subsection "get_parameter"
.Vb 6
\& Title   : get_parameter
\& Usage   : my $gap_ext = $result->get_parameter('gapext')
\& Function: Returns the value for a specific parameter used
\&           when running this result
\& Returns : string
\& Args    : name of parameter (string)
.Ve
.Sh "available_parameters"
.IX Subsection "available_parameters"
.Vb 5
\& Title   : available_parameters
\& Usage   : my @params = $result->available_parameters
\& Function: Returns the names of the available parameters
\& Returns : Return list of available parameters used for this result
\& Args    : none
.Ve
.Sh "add_parameter"
.IX Subsection "add_parameter"
.Vb 6
\& Title   : add_parameter
\& Usage   : $report->add_parameter('gapext', 11);
\& Function: Adds a parameter
\& Returns : none
\& Args    : key  - key value name for this parama
\&           value - value for this parameter
.Ve
.Sh "get_statistic"
.IX Subsection "get_statistic"
.Vb 6
\& Title   : get_statistic
\& Usage   : my $gap_ext = $result->get_statistic('kappa')
\& Function: Returns the value for a specific statistic available 
\&           from this result
\& Returns : string
\& Args    : name of statistic (string)
.Ve
.Sh "available_statistics"
.IX Subsection "available_statistics"
.Vb 5
\& Title   : available_statistics
\& Usage   : my @statnames = $result->available_statistics
\& Function: Returns the names of the available statistics
\& Returns : Return list of available statistics used for this result
\& Args    : none
.Ve
.Sh "add_statistic"
.IX Subsection "add_statistic"
.Vb 6
\& Title   : add_statistic
\& Usage   : $report->add_statistic('lambda', 2.3);
\& Function: Adds a statistic
\& Returns : none
\& Args    : key  - key value name for this statistic
\&           value - value for this statistic
.Ve
