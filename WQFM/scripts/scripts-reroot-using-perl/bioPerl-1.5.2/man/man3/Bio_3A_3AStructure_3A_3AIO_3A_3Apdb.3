.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Structure::IO::pdb 3"
.TH Bio::Structure::IO::pdb 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Structure::IO::pdb \- PDB input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
It is probably best not to use this object directly, but
rather go through the Bio::Structure::IO handler system. Go:
.PP
.Vb 2
\&    $stream = Bio::Structure::IO->new(-file => $filename,
\&                                      -format => 'PDB');
.Ve
.PP
.Vb 3
\&    while (my $structure = $stream->next_structure) {
\&            # do something with $structure
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Structure objects to and from \s-1PDB\s0 flat
file databases. The working is similar to that of the Bio::SeqIO handlers.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Kris Boulez"
.IX Header "AUTHOR - Kris Boulez"
Email kris.boulez@algonomics.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "next_structure;"
.IX Subsection "next_structure;"
.Vb 5
\& Title   : next_structure
\& Usage   : $struc = $stream->next_structure()
\& Function: returns the next structure in the stream
\& Returns : Bio::Structure object
\& Args    :
.Ve
.Sh "write_structure"
.IX Subsection "write_structure"
.Vb 5
\& Title   : write_structure
\& Usage   : $stream->write_structure($struc)
\& Function: writes the $struc object (must be a Bio::Structure) to the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Structure object
.Ve
.Sh "_filehandle"
.IX Subsection "_filehandle"
.Vb 6
\& Title   : _filehandle
\& Usage   : $obj->_filehandle($newval)
\& Function:
\& Example :
\& Returns : value of _filehandle
\& Args    : newvalue (optional)
.Ve
.Sh "_noatom"
.IX Subsection "_noatom"
.Vb 6
\& Title   : _noatom
\& Usage   : $obj->_noatom($newval)
\& Function:
\& Example :
\& Returns : value of _noatom
\& Args    : newvalue (optional)
.Ve
.Sh "_noheader"
.IX Subsection "_noheader"
.Vb 6
\& Title   : _noheader
\& Usage   : $obj->_noheader($newval)
\& Function:
\& Example :
\& Returns : value of _noheader
\& Args    : newvalue (optional)
.Ve
.Sh "_read_PDB_singlecontline"
.IX Subsection "_read_PDB_singlecontline"
.Vb 5
\& Title   : _read_PDB_singlecontline
\& Usage   : $obj->_read_PDB_singlecontline($record, $fromto, $buffer))
\& Function: read single continued record from PDB
\& Returns : concatenated record entry (between $fromto columns)
\& Args    : record, colunm delimiters, buffer
.Ve
.Sh "_read_PDB_jrnl"
.IX Subsection "_read_PDB_jrnl"
.Vb 5
\& Title   : _read_PDB_jrnl
\& Usage   : $obj->_read_PDB_jrnl($\ebuffer))
\& Function: read jrnl record from PDB
\& Returns : Bio::Annotation::Reference object
\& Args    :
.Ve
.Sh "_read_PDB_remark_1"
.IX Subsection "_read_PDB_remark_1"
.Vb 5
\& Title   : _read_PDB_remark_1
\& Usage   : $obj->_read_PDB_remark_1($\ebuffer))
\& Function: read "remark 1"  record from PDB
\& Returns : array of Bio::Annotation::Reference objects
\& Args    :
.Ve
.Sh "_read_PDB_coordinate_section"
.IX Subsection "_read_PDB_coordinate_section"
.Vb 5
\& Title   : _read_PDB_coordinate_section
\& Usage   : $obj->_read_PDB_coordinate_section($\ebuffer))
\& Function: read one model from a PDB
\& Returns : Bio::Structure::Model object
\& Args    :
.Ve
