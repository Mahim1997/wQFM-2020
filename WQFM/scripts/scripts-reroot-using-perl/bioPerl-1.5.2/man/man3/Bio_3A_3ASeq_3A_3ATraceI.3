.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Seq::TraceI 3"
.TH Bio::Seq::TraceI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Seq::TraceI \- Interface definition for a Bio::Seq::Trace
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # get a Bio::Seq::Qual compliant object somehow
\&          $st = &get_object_somehow();
.Ve
.PP
.Vb 3
\&    # to test this is a seq object
\&          $st->isa("Bio::Seq::TraceI") 
\&               || $obj->throw("$obj does not implement the Bio::Seq::TraceI interface");
.Ve
.PP
.Vb 14
\&          # set the trace for T to be @trace_points
\&     my $arrayref = $st->trace("T",\e@trace_points);
\&          # get the trace points for "C"
\&     my $arrayref = $st->trace("C");
\&          # get a subtrace for "G" from 10 to 100 
\&     $arrayref = $st->subtrace("G",10,100);
\&          # what is the trace value for "A" at position 355?
\&     my $trace_calue = $st->traceat("A",355);
\&          # create a false trace for "A" with $accuracy
\&     $arrayref = $st->false_trace("A",Bio::Seq::Quality, $accuracy);
\&          # does this trace have entries for each base?
\&     $bool = $st->is_complete();
\&          # how many entries are there in this trace?
\&     $length = $st->length();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object defines an abstract interface to basic trace information. This
information may have come from an \s-1ABI\-\s0 or scf\- formatted file or may have been
made up.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Chad Matsalla"
.IX Header "AUTHOR - Chad Matsalla"
Email bioinformatics@dieselwurks.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SH "Implementation Specific Functions"
.IX Header "Implementation Specific Functions"
These functions are the ones that a specific implementation must
define.
.Sh "trace($base,\e@new_values)"
.IX Subsection "trace($base,@new_values)"
.Vb 11
\& Title   : trace($base,\e@new_values)
\& Usage   : @trace_Values  = @{$obj->trace($base,\e@new_values)};
\& Function: Returns the trace values as a reference to an array containing the
\&     trace values. The individual elements of the trace array are not validated
\&     and can be any numeric value.
\& Returns : A reference to an array.
\& Status  : 
\&Arguments: $base : which color channel would you like the trace values for?
\&               - $base must be one of "A","T","G","C"
\&          \e@new_values : a reference to an array of values containing trace
\&               data for this base
.Ve
.Sh "subtrace($base,$start,$end)"
.IX Subsection "subtrace($base,$start,$end)"
.Vb 10
\& Title   : subtrace($base,$start,$end)
\& Usage   : @subset_of_traces = @{$obj->subtrace("A",10,40)};
\& Function: returns the trace values from $start to $end, where the
\&        first value is 1 and the number is inclusive, ie 1-2 are the first
\&        two trace values of this base. Start cannot be larger than end but can
\&        be equal.
\& Returns : A reference to an array.
\& Args    : $base: "A","T","G" or "C"
\&          $start: a start position
\&          $end  : an end position
.Ve
.Sh "\fIcan_call_new()\fP"
.IX Subsection "can_call_new()"
.Vb 15
\& Title   : can_call_new()
\& Usage   : if( $obj->can_call_new ) {
\&             $newobj = $obj->new( %param );
\&         }
\& Function: can_call_new returns 1 or 0 depending on whether an
\&        implementation allows new constructor to be called. If a new
\&        constructor is allowed, then it should take the followed hashed
\&        constructor list.
\&           $myobject->new( -qual => $quality_as_string,
\&                           -display_id  => $id,
\&                           -accession_number => $accession,
\&                           );
\& Example :
\& Returns : 1 or 0
\& Args    :
.Ve
.Sh "traceat($channel,$position)"
.IX Subsection "traceat($channel,$position)"
.Vb 8
\& Title   : qualat($channel,$position)
\& Usage   : $trace = $obj->traceat(500);
\& Function: Return the trace value at the given location, where the
\&        first value is 1 and the number is inclusive, ie 1-2 are the first
\&        two bases of the sequence. Start cannot be larger than end but can
\&        be equal.
\& Returns : A scalar.
\& Args    : A base and a position.
.Ve
.Sh "\fIlength()\fP"
.IX Subsection "length()"
.Vb 7
\& Title   : length()
\& Usage   : $length = $obj->length("A");
\& Function: Return the length of the array holding the trace values for the "A"
\&     channel. A check should be done to make sure that this Trace object
\&     is_complete() before doing this to prevent hazardous results.
\& Returns : A scalar (the number of elements in the quality array).
\& Args    : If used, get the traces from that channel. Default to "A"
.Ve
.Sh "trace_indices($new_indices)"
.IX Subsection "trace_indices($new_indices)"
.Vb 5
\& Title   : trace_indices($new_indices)
\& Usage   : $indices = $obj->trace_indices($new_indices);
\& Function: Return the trace iindex points for this object.
\& Returns : A scalar
\& Args    : If used, the trace indices will be set to the provided value.
.Ve
