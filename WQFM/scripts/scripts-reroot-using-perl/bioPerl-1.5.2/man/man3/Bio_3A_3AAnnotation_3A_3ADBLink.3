.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::DBLink 3"
.TH Bio::Annotation::DBLink 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Annotation::DBLink \- untyped links between databases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   $link1 = new Bio::Annotation::DBLink(-database => 'TSC',
\&                                        -primary_id => 'TSC0000030'
\&                                        );
.Ve
.PP
.Vb 1
\&   #or
.Ve
.PP
.Vb 3
\&   $link2 = new Bio::Annotation::DBLink();
\&   $link2->database('dbSNP');
\&   $link2->primary_id('2367');
.Ve
.PP
.Vb 3
\&   # DBLink is-a Bio::AnnotationI object, can be added to annotation
\&   # collections, e.g. the one on features or seqs
\&   $feat->annotation->add_Annotation('dblink', $link2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an object which represents a link from one object to something
in another database without prescribing what is in the other database.
.PP
Aside from Bio::AnnotationI, this class also implements
Bio::IdentifiableI.
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Ewan Birney \- birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : $dblink = Bio::Annotation::DBLink->new(-database =>"GenBank",
\&                                                  -primary_id => "M123456");
\& Function: Creates a new instance of this class.
\& Example :
\& Returns : A new instance of Bio::Annotation::DBLink.
\& Args    : Named parameters. At present, the following parameters are
\&           recognized.
.Ve
.PP
.Vb 12
\&             -database    the name of the database referenced by the xref
\&             -primary_id  the primary (main) id of the referenced entry
\&                          (usually this will be an accession number)
\&             -optional_id a secondary ID under which the referenced entry
\&                          is known in the same database
\&             -comment     comment text for the dbxref
\&             -tagname     the name of the tag under which to add this
\&                          instance to an annotation bundle (usually 'dblink')
\&             -namespace   synonymous with -database (also overrides)
\&             -version     version of the referenced entry
\&             -authority   attribute of the Bio::IdentifiableI interface
\&             -url         attribute of the Bio::IdentifiableI interface
.Ve
.SH "AnnotationI implementing functions"
.IX Header "AnnotationI implementing functions"
.Sh "as_text"
.IX Subsection "as_text"
.Vb 6
\& Title   : as_text
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
.Ve
.PP
.Vb 6
\&           Setting this is optional. If set, it obviates the need to
\&           provide a tag to Bio::AnnotationCollectionI when adding
\&           this object. When obtaining an AnnotationI object from the
\&           collection, the collection will set the value to the tag
\&           under which it was stored unless the object has a tag
\&           stored already.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SH "Specific accessors for DBLinks"
.IX Header "Specific accessors for DBLinks"
.Sh "database"
.IX Subsection "database"
.Vb 7
\& Title   : database
\& Usage   : $self->database($newval)
\& Function: set/get on the database string. Databases are just
\&           a string here which can then be interpreted elsewhere
\& Example : 
\& Returns : value of database
\& Args    : newvalue (optional)
.Ve
.Sh "primary_id"
.IX Subsection "primary_id"
.Vb 9
\& Title   : primary_id
\& Usage   : $self->primary_id($newval)
\& Function: set/get on the primary id (a string)
\&           The primary id is the main identifier used for this object in 
\&           the database. Good examples would be accession numbers. The id
\&           is meant to be the main, stable identifier for this object
\& Example : 
\& Returns : value of primary_id
\& Args    : newvalue (optional)
.Ve
.Sh "optional_id"
.IX Subsection "optional_id"
.Vb 3
\& Title   : optional_id
\& Usage   : $self->optional_id($newval)
\& Function: get/set for the optional_id (a string)
.Ve
.PP
.Vb 6
\&           optional id is a slot for people to use as they wish. The
\&           main issue is that some databases do not have a clean
\&           single string identifier scheme. It is hoped that the
\&           primary_id can behave like a reasonably sane "single string
\&           identifier" of objects, and people can use/abuse optional
\&           ids to their heart's content to provide precise mappings.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of optional_id
\& Args    : newvalue (optional)
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $self->comment($newval)
\& Function: get/set of comments (comment object)
\&           Sets or gets comments of this dblink, which is sometimes relevant
\& Example : 
\& Returns : value of comment (Bio::Annotation::Comment)
\& Args    : newvalue (optional)
.Ve
.SH "Methods for Bio::IdentifiableI compliance"
.IX Header "Methods for Bio::IdentifiableI compliance"
.Sh "object_id"
.IX Subsection "object_id"
.Vb 5
\& Title   : object_id
\& Usage   : $string    = $obj->object_id()
\& Function: a string which represents the stable primary identifier
\&           in this namespace of this object. For DNA sequences this
\&           is its accession_number, similarly for protein sequences
.Ve
.PP
.Vb 2
\&           This is aliased to primary_id().
\& Returns : A scalar
.Ve
.Sh "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : $version    = $obj->version()
\& Function: a number which differentiates between versions of
\&           the same object. Higher numbers are considered to be
\&           later and more relevant, but a single object described
\&           the same identifier should represent the same concept
.Ve
.PP
.Vb 1
\& Returns : A number
.Ve
.Sh "url"
.IX Subsection "url"
.Vb 4
\& Title   : url
\& Usage   : $url    = $obj->url()
\& Function: URL which is associated with this DB link
\& Returns : string, full URL descriptor
.Ve
.Sh "authority"
.IX Subsection "authority"
.Vb 5
\& Title   : authority
\& Usage   : $authority    = $obj->authority()
\& Function: a string which represents the organisation which
\&           granted the namespace, written as the DNS name for  
\&           organisation (eg, wormbase.org)
.Ve
.PP
.Vb 1
\& Returns : A scalar
.Ve
.Sh "namespace"
.IX Subsection "namespace"
.Vb 5
\& Title   : namespace
\& Usage   : $string    = $obj->namespace()
\& Function: A string representing the name space this identifier
\&           is valid in, often the database name or the name
\&           describing the collection
.Ve
.PP
.Vb 2
\&           For DBLink this is the same as database().
\& Returns : A scalar
.Ve
