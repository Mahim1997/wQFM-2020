.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::EUtilities::einfo 3"
.TH Bio::DB::EUtilities::einfo 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::EUtilities::einfo \- NCBI database information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  my $einfo = Bio::DB::EUtilities->new(
\&                                     -eutil    => 'einfo',
\&                                     -db       => 'pubmed'
\&                                      );
.Ve
.PP
.Vb 1
\&  print $einfo->get_response->content;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
EInfo queries provide
information about \s-1NCBI\s0 databases.  At this time, data is postprocessed
for a complete list of Entrez databases (when '\-\f(CW\*(C`db\*(C'\fR' is not set) or for
specific database information, number of entries, date of the last update, or
Field or Link information.  Using the base \s-1URL\s0 with no
parameters returns a list of all Entrez databases.
.Sh "Parameters"
.IX Subsection "Parameters"
The following are a general list of parameters that can be used to take
advantage of EInfo.  Up-to-date help for EInfo is available at this \s-1URL\s0
(the information below is a summary of the options found there):
.PP
.Vb 1
\&  http://eutils.ncbi.nlm.nih.gov/entrez/query/static/einfo_help.html
.Ve
.ie n .IP """db""" 3
.el .IP "\f(CWdb\fR" 3
.IX Item "db"
Database parameter.  This is optional; not setting this will return a list of
all the available Entrez databases.  If a database is specified, returned \s-1XML\s0
data will provide the following information : field names, index term counts,
last update, and available links for each Entrez database.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@lists.open-bio.org               - General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at uiuc dot edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "parse_response"
.IX Subsection "parse_response"
.Vb 6
\& Title   : parse_response
\& Usage   : $db->_parse_response($content)
\& Function: parse out response for cookie
\& Returns : empty
\& Args    : none
\& Throws  : 'unparseable output exception'
.Ve
.Sh "einfo_dbfield_info"
.IX Subsection "einfo_dbfield_info"
.Vb 6
\& Title   : einfo_dbfield_info
\& Usage   : @fields = $info->einfo_dbfield_info;
\& Function: gets array of hashes with field information
\& Returns : An array or array reference (based on wantarray) of hashes
\&           with information about each field 
\& Args    : None (this is set using the _set_einfo_data method)
.Ve
.Sh "einfo_dblink_info"
.IX Subsection "einfo_dblink_info"
.Vb 6
\& Title   : einfo_dblink_info
\& Usage   : @links = $info->einfo_dblink_info;
\& Function: gets array of hashes with link information
\& Returns : An array or array reference (based on wantarray) of hashes
\&           with information about each link 
\& Args    : None (this is set using the _set_einfo_data method)
.Ve
.Sh "einfo_db_lastupdate"
.IX Subsection "einfo_db_lastupdate"
.Vb 5
\& Title   : einfo_db_last_update
\& Usage   : $date = $info->einfo_db_lastupdate;
\& Function: returns last date database was updated
\& Returns : String containing date
\& Args    : None (this is set using the _set_einfo_data method)
.Ve
.Sh "einf_db_desc"
.IX Subsection "einf_db_desc"
.Vb 5
\& Title   : einfo_db_desc
\& Usage   : $desc = $info->einfo_db_desc;
\& Function: returns database description
\& Returns : String containing descriptions
\& Args    : None (this is set using the _set_einfo_data method)
.Ve
.Sh "einfo_db_count"
.IX Subsection "einfo_db_count"
.Vb 5
\& Title   : einfo_db_count
\& Usage   : $count = $info->einfo_db_count;
\& Function: returns database record count
\& Returns : Integer (number of database records)
\& Args    : None (this is set using the _set_einfo_data method)
.Ve
