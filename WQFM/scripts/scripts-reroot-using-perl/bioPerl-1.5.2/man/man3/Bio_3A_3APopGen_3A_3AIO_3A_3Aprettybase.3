.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PopGen::IO::prettybase 3"
.TH Bio::PopGen::IO::prettybase 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::PopGen::IO::prettybase \- Extract individual allele data from PrettyBase format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use directly, use through the Bio::PopGen::IO driver
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object will parse comma delimited PrettyBase output.  PrettyBase
is defined by the SeattleSNPs http://pga.gs.washington.edu/
.PP
This is expected to be tab delimited (you can vary with the
field_delimiter flag \s-1SITE\s0 \s-1SAMPLE\s0 \s-1ALLELE1\s0 \s-1ALLELE2\s0
.PP
There are 2 initialization parameters, the delimiter
(\-field_delimiter) [default 'tab'] and a boolean \-no_header which
specifies if there is no header line to read in.  All lines starting
with '#' will be skipped
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Matthew Hahn, matthew.hahn\-at\-duke.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $obj = new Bio::PopGen::IO::prettybase();
\& Function: Builds a new Bio::PopGen::IO::prettybase object 
\& Returns : an instance of Bio::PopGen::IO::prettybase
\& Args    : -field_delimiter      => a field delimiter character or regexp (default is /\et/ ) 
\&           -header               => boolean if the file will have a header and parser should
\&                                    skip first line in the file (default is false)
\&           -convert_indel_states => convert alleles which are longer than one character
\&                                    to an 'I' meaning insert state, and alleles which are
\&                                    '-' to a delete state.
\&                                    (default is false)
.Ve
.Sh "flag"
.IX Subsection "flag"
.Vb 7
\& Title   : flag
\& Usage   : $obj->flag($flagname,$newval)
\& Function: Get/Set the flag value
\& Returns : value of a flag (a boolean)
\& Args    : A flag name, currently we expect 
\&           'header', 'field_delimiter', or 'allele_delimiter' 
\&           on set, new value (a boolean or undef, optional)
.Ve
.Sh "next_individual"
.IX Subsection "next_individual"
.Vb 5
\& Title   : next_individual
\& Usage   : my $ind = $popgenio->next_individual;
\& Function: Retrieve the next individual from a dataset
\& Returns : Bio::PopGen::IndividualI object
\& Args    : none
.Ve
.Sh "next_population"
.IX Subsection "next_population"
.Vb 6
\& Title   : next_population
\& Usage   : my $ind = $popgenio->next_population;
\& Function: Retrieve the next population from a dataset
\& Returns : Bio::PopGen::PopulationI object
\& Args    : none
\& Note    : Many implementation will not implement this
.Ve
.Sh "write_individual"
.IX Subsection "write_individual"
.Vb 5
\& Title   : write_individual
\& Usage   : $popgenio->write_individual($ind);
\& Function: Write an individual out in the file format
\& Returns : none
\& Args    : L<Bio::PopGen::PopulationI> object(s)
.Ve
.Sh "write_population"
.IX Subsection "write_population"
.Vb 6
\& Title   : write_population
\& Usage   : $popgenio->write_population($pop);
\& Function: Write a population out in the file format
\& Returns : none
\& Args    : L<Bio::PopGen::PopulationI> object(s)
\& Note    : Many implementation will not implement this
.Ve
