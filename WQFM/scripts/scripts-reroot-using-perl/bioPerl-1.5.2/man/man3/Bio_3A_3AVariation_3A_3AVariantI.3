.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Variation::VariantI 3"
.TH Bio::Variation::VariantI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Variation::VariantI \- Sequence Change SeqFeature abstract class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  #get Bio::Variant::VariantI somehow
\&  print $var->restriction_changes, "\en";
\&  foreach $allele ($var->each_Allele) {
\&      #work on Bio::Variation::Allele objects
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This superclass defines common methods to basic sequence changes.  The
instantiable classes Bio::Variation::DNAMutation,
Bio::Variation::RNAChange and Bio::Variation::AAChange use them.
See Bio::Variation::DNAMutation, Bio::Variation::RNAChange,
and Bio::Variation::AAChange for more information.
.PP
These classes store information, heavy computation to detemine allele
sequences is done elsewhere.
.PP
The database cross-references are implemented as
Bio::Annotation::DBLink objects. The methods to access them are
defined in Bio::DBLinkContainerI. See Bio::Annotation::DBLink
and Bio::DBLinkContainerI for details.
.PP
Bio::Variation::VariantI redifines and extends
Bio::SeqFeature::Generic for sequence variations. This class
describes specific sequence change events. These events are always
from a specific reference sequence to something different. See
Bio::SeqFeature::Generic for more information.
.PP
\&\s-1IMPORTANT:\s0 The notion of reference sequence permeates all
Bio::Variation classes. This is especially important to remember when
dealing with Alleles. In a polymorphic site, there can be a large
number of alleles. One of then has to be selected to be the reference
allele (allele_ori). \s-1ALL\s0 the rest has to be passed to the Variant
using the method add_Allele, including the mutated allele in a
canonical mutation. The \s-1IO\s0 modules and generated attributes depend on
it. They ignore the allele linked to using allele_mut and circulate
each Allele returned by each_Allele into allele_mut and calculate
the changes between that and allele_ori.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "id"
.IX Subsection "id"
.Vb 3
\& Title   : id
\& Usage   : $obj->id
\& Function:
.Ve
.PP
.Vb 2
\&           Read only method. Returns the id of the variation object.
\&           The id is the id of the first DBLink object attached to this object.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : scalar
\& Args    : none
.Ve
.Sh "add_Allele"
.IX Subsection "add_Allele"
.Vb 3
\& Title   : add_Allele
\& Usage   : $self->add_Allele($allele)
\& Function:
.Ve
.PP
.Vb 4
\&            Adds one Bio::Variation::Allele into the list of alleles.
\&            Note that the method forces the convention that nucleotide
\&            sequence is in lower case and amino acds are in upper
\&            case.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 1 when succeeds, 0 for failure.
\& Args    : Allele object
.Ve
.Sh "each_Allele"
.IX Subsection "each_Allele"
.Vb 3
\& Title   : alleles
\& Usage   : $obj->each_Allele();
\& Function:
.Ve
.PP
.Vb 1
\&             Returns a list of Bio::Variation::Allele objects
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : list of Alleles
\& Args    : none
.Ve
.Sh "isMutation"
.IX Subsection "isMutation"
.Vb 3
\& Title   : isMutation
\& Usage   : print join('/', $obj->each_Allele) if not $obj->isMutation;
\& Function:
.Ve
.PP
.Vb 5
\&           Returns or sets the boolean value indicating that the
\&           variant descibed is a canonical mutation with two alleles
\&           assinged to be the original (wild type) allele and mutated
\&           allele, respectively. If this value is not set, it is
\&           assumed that the Variant descibes polymorphisms.
.Ve
.PP
.Vb 1
\& Returns : a boolean
.Ve
.Sh "allele_ori"
.IX Subsection "allele_ori"
.Vb 3
\& Title   : allele_ori
\& Usage   : $obj->allele_ori();
\& Function:
.Ve
.PP
.Vb 3
\&            Links to and returns the Bio::Variation::Allele object.
\&            If value is not set, returns false. All other Alleles are
\&            compared to this.
.Ve
.PP
.Vb 2
\&            Amino acid sequences are stored in upper case characters,
\&            others in lower case.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.PP
See Bio::Variation::Allele for more.
.Sh "allele_mut"
.IX Subsection "allele_mut"
.Vb 3
\& Title   : allele_mut
\& Usage   : $obj->allele_mut();
\& Function:
.Ve
.PP
.Vb 3
\&             Links to and returns the Bio::Variation::Allele
\&             object.  Sets and returns the mutated allele sequence.
\&             If value is not set, returns false.
.Ve
.PP
.Vb 2
\&             Amino acid sequences are stored in upper case characters,
\&             others in lower case.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.PP
See Bio::Variation::Allele for more.
.Sh "length"
.IX Subsection "length"
.Vb 3
\& Title   : length
\& Usage   : $obj->length();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns the length of the affected original
\&            allele sequence.  If value is not set, returns false == 0.
.Ve
.PP
.Vb 6
\&            Value 0 means that the variant position is before the
\&            start=end sequence position. (Value 1 would denote a point
\&            mutation). This follows the convension to report an
\&            insertion (2insT) in equivalent way to a corresponding
\&            deletion (2delT) (Think about indel polymorpism ATC <=> AC
\&            where the origianal state is not known ).
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "upStreamSeq"
.IX Subsection "upStreamSeq"
.Vb 3
\& Title   : upStreamSeq
\& Usage   : $obj->upStreamSeq();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns upstream flanking sequence string.  If
\&            value is not set, returns false. The sequence should be
\&            >=25 characters long, if possible.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string or false
\& Args    : string
.Ve
.Sh "dnStreamSeq"
.IX Subsection "dnStreamSeq"
.Vb 3
\& Title   : dnStreamSeq
\& Usage   : $obj->dnStreamSeq();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns dnstream flanking sequence string.  If
\&            value is not set, returns false. The sequence should be
\&            >=25 characters long, if possible.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string or false
\& Args    : string
.Ve
.Sh "label"
.IX Subsection "label"
.Vb 3
\& Title   : label
\& Usage   : $obj->label();
\& Function:
.Ve
.PP
.Vb 5
\&            Sets and returns mutation event label(s).  If value is not
\&            set, or no argument is given returns false.  Each
\&            instantiable class needs to implement this method. Valid
\&            values are listed in 'Mutation event controlled vocabulary' in
\&            http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "status"
.IX Subsection "status"
.Vb 3
\& Title   : status
\& Usage   : $obj->status()
\& Function:
.Ve
.PP
.Vb 2
\&           Returns the status of the sequence change object.
\&           Valid values are: 'suspected' and 'proven'
.Ve
.PP
.Vb 3
\& Example : $obj->status('proven');
\& Returns : scalar
\& Args    : valid string (optional, for setting)
.Ve
.Sh "proof"
.IX Subsection "proof"
.Vb 3
\& Title   : proof
\& Usage   : $obj->proof()
\& Function:
.Ve
.PP
.Vb 2
\&           Returns the proof of the sequence change object.
\&           Valid values are: 'computed' and 'experimental'.
.Ve
.PP
.Vb 3
\& Example : $obj->proof('computed');
\& Returns : scalar
\& Args    : valid string (optional, for setting)
.Ve
.Sh "region"
.IX Subsection "region"
.Vb 3
\& Title   : region
\& Usage   : $obj->region();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the name of the sequence region type or
\&            protein domain at this location.  If value is not set,
\&            returns false.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "region_value"
.IX Subsection "region_value"
.Vb 3
\& Title   : region_value
\& Usage   : $obj->region_value();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the name of the sequence region_value or
\&            protein domain at this location.  If value is not set,
\&            returns false.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "region_dist"
.IX Subsection "region_dist"
.Vb 3
\& Title   : region_dist
\& Usage   : $obj->region_dist();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the distance tot the closest region
\&            (i.e. intro/exon or domain) boundary. If distance is not
\&            set, returns false.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : integer
\& Args    : integer
.Ve
.Sh "numbering"
.IX Subsection "numbering"
.Vb 3
\& Title   : numbering
\& Usage   : $obj->numbering()
\& Function:
.Ve
.PP
.Vb 2
\&           Returns the numbering chema used locating sequnce features.
\&           Valid values are: 'entry' and 'coding'
.Ve
.PP
.Vb 3
\& Example : $obj->numbering('coding');
\& Returns : scalar
\& Args    : valid string (optional, for setting)
.Ve
.Sh "mut_number"
.IX Subsection "mut_number"
.Vb 4
\& Title   : mut_number
\& Usage   : $num = $obj->mut_number;
\&         : $num = $obj->mut_number($number);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the number identifying the order in which the
\&           mutation has been issued. Numbers shouldstart from 1.
\&           If the number has never been set, the method will return ''
.Ve
.PP
.Vb 3
\&           If you want the output from IO modules look nice and, for
\&           multivariant/allele variations, make sense you better set
\&           this attribute.
.Ve
.PP
.Vb 1
\& Returns : an integer
.Ve
.Sh "SeqDiff"
.IX Subsection "SeqDiff"
.Vb 4
\& Title   : SeqDiff
\& Usage   : $mutobj = $obj->SeqDiff;
\&         : $mutobj = $obj->SeqDiff($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the link-reference to the umbrella
\&           Bio::Variation::SeqDiff object.  If there is no link,
\&           it will return undef
.Ve
.PP
.Vb 2
\&           Note: Adding a variant into a SeqDiff object will
\&           automatically set this value.
.Ve
.PP
.Vb 1
\& Returns : an obj_ref or undef
.Ve
.PP
See Bio::Variation::SeqDiff for more information.
.Sh "add_DBLink"
.IX Subsection "add_DBLink"
.Vb 6
\& Title   : add_DBLink
\& Usage   : $self->add_DBLink($ref)
\& Function: adds a link object
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "each_DBLink"
.IX Subsection "each_DBLink"
.Vb 6
\& Title   : each_DBLink
\& Usage   : foreach $ref ( $self->each_DBlink() )
\& Function: gets an array of DBlink of objects
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "restriction_changes"
.IX Subsection "restriction_changes"
.Vb 3
\& Title   : restriction_changes
\& Usage   : $obj->restriction_changes();
\& Function:
.Ve
.PP
.Vb 4
\&            Returns a string containing a list of restriction
\&            enzyme changes of form +EcoRI, separated by
\&            commas. Strings need to be valid restriction enzyme names
\&            as stored in REBASE. allele_ori and allele_mut need to be assigned.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
