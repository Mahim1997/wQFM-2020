.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::LiveSeq::AARange 3"
.TH Bio::LiveSeq::AARange 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::LiveSeq::AARange \- AARange abstract class for LiveSeq
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #documentation needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is used as possible parent for aminoacid range object classes.
Or it can be used straight away to define aminoacid ranges.  The idea
is that the ranges defined are attached to a Translation object and
they refer to its coordinate-system when they are first created (via
the \fInew()\fR method).  When they are created they are anyway linked to
the underlying \s-1DNA\s0 LiveSeq by way of the LiveSeq labels. This allows
to preserve the ranges even if the numbering changes in the
Translation due to deletions or insertions.
.PP
The protein sequence associated with the AARange can be accessed via
the usual \fIseq()\fR or \fIsubseq()\fR methods.
.PP
The start and end of the AARange in protein coordinate system can be
fetched with \fIaa_start()\fR and \fIaa_end()\fR methods. Note: the behaviour of
these methods would be influenced by the coordinate_start set in the
corresponding Translation object. This can be desirable but can also
lead to confusion if the coordinate_start had been changed and the
original position of the AARange was to be retrieved.
.PP
\&\fIstart()\fR and \fIend()\fR methods of the AARange will point to the labels
identifying the first nucleotide of the first and last triplet coding
for the start and end of the AminoAcidRange.
.PP
The underlying nucleotide sequence of the AARange can be retrieved
with the \fIlabelsubseq()\fR method. This would retrieve the whole \s-1DNA\s0
sequence, including possible introns. This is called \*(L"DNA_sequence\*(R".
.PP
To fetch the nucleotide sequence of the Transcript, without introns,
the \fIlabelsubseq()\fR of the attached Transcript (the Transcript the
Translation comes from) has to be accessed. This is called
\&\*(L"cDNA_sequence\*(R".
.PP
Here are the operations to retrieve these latter two kinds of
sequences:
.PP
.Vb 3
\&   $startlabel=$AARange->start;
\&   $endtripletlabel=$AARange->end;
\&   $endlabel=$AARange->{'seq'}->label(3,$endtripletlabel,$AARange->strand);
.Ve
.PP
.Vb 1
\&   $dnaseq=$AARange->labelsubseq($startlabel,undef,$endlabel));
.Ve
.PP
.Vb 1
\&   $cdnaseq=$AARange->get_Transcript->labelsubseq($startlabel,undef,$endlabel);
.Ve
.PP
To simplify, these operations have been included in two additional
methods: \fIdna_seq()\fR and \fIcdna_seq()\fR.
.PP
These would return the whole sequence, as in the examples above.  But
the above general scheme can be used by specifying different labels,
to retrieve hypothetical subsequences of interest.
.SH "AUTHOR \- Joseph A.L. Insana"
.IX Header "AUTHOR - Joseph A.L. Insana"
Email:  Insana@ebi.ac.uk, jinsana@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\&  Title   : new
\&  Usage   : $aarange = Bio::LiveSeq::AARange->new(-translation => $obj_ref,
\&                                               -start => $beginaa,
\&                                               -end => $endaa,
\&                                               -name => "ABCD",
\&                                               -description => "DCBA",
\&                                               -translength => $length);
.Ve
.PP
.Vb 12
\&  Function: generates a new AminoAcidRange LiveSeq object
\&  Returns : reference to a new object of class AARange
\&  Errorcode -1
\&  Args    : two positions in AminoAcid coordinate numbering
\&            an object reference specifying to which translation the aminoacid
\&            ranges refer to
\&            a name and a description (optional)
\&            an optional "translength" argument: this can be given when
\&            a lot of AARanges are to be created at the same time for the same
\&            Translation object, calculating it with $translation->length
\&            This would increase the speed, avoiding the new() function to
\&            calculate everytime the same length again and again for every obj.
.Ve
.Sh "get_Transcript"
.IX Subsection "get_Transcript"
.Vb 6
\&  Title   : valid
\&  Usage   : $transcript = $obj->get_Transcript()
\&  Function: retrieves the reference to the object of class Transcript (if any)
\&            attached to a LiveSeq object
\&  Returns : object reference
\&  Args    : none
.Ve
.Sh "get_Translation"
.IX Subsection "get_Translation"
.Vb 6
\&  Title   : valid
\&  Usage   : $translation = $obj->get_Translation()
\&  Function: retrieves the reference to the object of class Translation (if any)
\&            attached to a LiveSeq object
\&  Returns : object reference
\&  Args    : none
.Ve
.Sh "aa_start"
.IX Subsection "aa_start"
.Vb 5
\&  Title   : aa_start
\&  Usage   : $end = $aarange->aa_start()
\&  Returns : integer (position, according to Translation coordinate system) of
\&            the start of an AminoAcidRange object
\&  Args    : none
.Ve
.Sh "aa_end"
.IX Subsection "aa_end"
.Vb 5
\&  Title   : aa_end
\&  Usage   : $end = $aarange->aa_end()
\&  Returns : integer (position, according to Translation coordinate system) of
\&            the end of an AminoAcidRange object
\&  Args    : none
.Ve
.Sh "dna_seq"
.IX Subsection "dna_seq"
.Vb 5
\&  Title   : dna_seq
\&  Usage   : $end = $aarange->dna_seq()
\&  Returns : the sequence at DNA level of the entire AminoAcidRange
\&            this would include introns (if present)
\&  Args    : none
.Ve
.Sh "cdna_seq"
.IX Subsection "cdna_seq"
.Vb 6
\&  Title   : cdna_seq
\&  Usage   : $end = $aarange->cdna_seq()
\&  Returns : the sequence at cDNA level of the entire AminoAcidRange
\&            i.e. this is the part of the Transcript that codes for the
\&            AminoAcidRange. It would be composed just of exonic DNA.
\&  Args    : none
.Ve
