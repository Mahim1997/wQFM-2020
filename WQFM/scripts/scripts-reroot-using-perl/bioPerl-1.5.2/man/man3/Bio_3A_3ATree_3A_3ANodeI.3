.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::NodeI 3"
.TH Bio::Tree::NodeI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::NodeI \- Interface describing a Tree Node
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # get a Tree::NodeI somehow
\&    # like from a TreeIO
\&    use Bio::TreeIO;
\&    # read in a clustalw NJ in phylip/newick format
\&    my $treeio = new Bio::TreeIO(-format => 'newick', -file => 'file.dnd');
.Ve
.PP
.Vb 2
\&    my $tree = $treeio->next_tree; # we'll assume it worked for demo purposes
\&                                   # you might want to test that it was defined
.Ve
.PP
.Vb 1
\&    my $rootnode = $tree->get_root_node;
.Ve
.PP
.Vb 4
\&    # process just the next generation
\&    foreach my $node ( $rootnode->each_Descendent() ) {
\&        print "branch len is ", $node->branch_length, "\en";
\&    }
.Ve
.PP
.Vb 10
\&    # process all the children
\&    my $example_leaf_node;
\&    foreach my $node ( $rootnode->get_all_Descendents() ) {
\&        if( $node->is_Leaf ) { 
\&            print "node is a leaf ... "; 
\&            # for example use below
\&            $example_leaf_node = $node unless defined $example_leaf_node; 
\&        }
\&        print "branch len is ", $node->branch_length, "\en";
\&    }
.Ve
.PP
.Vb 2
\&    # The ancestor() method points to the parent of a node
\&    # A node can only have one parent
.Ve
.PP
.Vb 1
\&    my $parent = $example_leaf_node->ancestor;
.Ve
.PP
.Vb 2
\&    # parent won't likely have an description because it is an internal node
\&    # but child will because it is a leaf
.Ve
.PP
.Vb 2
\&    print "Parent id: ", $parent->id," child id: ", 
\&          $example_leaf_node->id, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A NodeI is capable of the basic structure of building a tree and
storing the branch length between nodes.  The branch length is the
length of the branch between the node and its ancestor, thus a root
node in a Tree will not typically have a valid branch length.
.PP
Various implementations of NodeI may extend the basic functions and
allow storing of other information (like attatching a species object
or full sequences used to build a tree or alternative sequences).  If
you don't know how to extend a Bioperl object please ask, happy to
help, we would also greatly appreciate contributions with improvements
or extensions of the objects back to the Bioperl code base so that
others don't have to reinvent your ideas.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Aaron Mackey amackey@virginia.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "add_Descendent"
.IX Subsection "add_Descendent"
.Vb 5
\& Title   : add_Descendent
\& Usage   : $node->add_Descendant($node);
\& Function: Adds a descendent to a node
\& Returns : number of current descendents for this node
\& Args    : Bio::Node::NodeI
.Ve
.Sh "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @nodes = $node->each_Descendent;
\& Function: all the descendents for this Node (but not their descendents 
\&                                              i.e. not a recursive fetchall)
\& Returns : Array of Bio::Tree::NodeI objects
\& Args    : none
.Ve
.Sh "Decorated Interface methods"
.IX Subsection "Decorated Interface methods"
.Sh "get_all_Descendents"
.IX Subsection "get_all_Descendents"
.Vb 7
\& Title   : get_all_Descendents($sortby)
\& Usage   : my @nodes = $node->get_all_Descendents;
\& Function: Recursively fetch all the nodes and their descendents
\&           *NOTE* This is different from each_Descendent
\& Returns : Array or Bio::Tree::NodeI objects
\& Args    : $sortby [optional] "height", "creation", "alpha", "revalpha", 
\&           or a coderef to be used to sort the order of children nodes.
.Ve
.Sh "is_Leaf"
.IX Subsection "is_Leaf"
.Vb 5
\& Title   : is_Leaf
\& Usage   : if( $node->is_Leaf ) 
\& Function: Get Leaf status
\& Returns : boolean
\& Args    : none
.Ve
.Sh "descendent_count"
.IX Subsection "descendent_count"
.Vb 6
\& Title   : descendent_count
\& Usage   : my $count = $node->descendent_count;
\& Function: Counts the number of descendents a node has 
\&           (and all of their subnodes)
\& Returns : integer
\& Args    : none
.Ve
.Sh "to_string"
.IX Subsection "to_string"
.Vb 5
\& Title   : to_string
\& Usage   : my $str = $node->to_string()
\& Function: For debugging, provide a node as a string
\& Returns : string
\& Args    : none
.Ve
.Sh "height"
.IX Subsection "height"
.Vb 6
\& Title   : height
\& Usage   : my $len = $node->height
\& Function: Returns the height of the tree starting at this
\&           node.  Height is the maximum branchlength to get to the tip.
\& Returns : The longest length (weighting branches with branch_length) to a leaf
\& Args    : none
.Ve
.Sh "depth"
.IX Subsection "depth"
.Vb 6
\& Title   : depth
\& Usage   : my $len = $node->depth
\& Function: Returns the depth of the tree starting at this
\&           node.  Depth is the distance from this node to the root.
\& Returns : The branch length to the root.
\& Args    : none
.Ve
.Sh "Get/Set methods"
.IX Subsection "Get/Set methods"
.Sh "branch_length"
.IX Subsection "branch_length"
.Vb 5
\& Title   : branch_length
\& Usage   : $obj->branch_length()
\& Function: Get/Set the branch length
\& Returns : value of branch_length
\& Args    : newvalue (optional)
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 5
\& Title   : id
\& Usage   : $obj->id($newval)
\& Function: The human readable identifier for the node 
\& Returns : value of human readable id
\& Args    : newvalue (optional)
.Ve
.Sh "internal_id"
.IX Subsection "internal_id"
.Vb 5
\& Title   : internal_id
\& Usage   : my $internalid = $node->internal_id
\& Function: Returns the internal unique id for this Node
\& Returns : unique id
\& Args    : none
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title   : description
\& Usage   : $obj->description($newval)
\& Function: Get/Set the description string
\& Returns : value of description
\& Args    : newvalue (optional)
.Ve
.Sh "bootstrap"
.IX Subsection "bootstrap"
.Vb 5
\& Title   : bootstrap
\& Usage   : $obj->bootstrap($newval)
\& Function: Get/Set the bootstrap value
\& Returns : value of bootstrap
\& Args    : newvalue (optional)
.Ve
.Sh "ancestor"
.IX Subsection "ancestor"
.Vb 5
\& Title   : ancestor
\& Usage   : my $node = $node->ancestor;
\& Function: Get/Set the ancestor node pointer for a Node
\& Returns : Null if this is top level node
\& Args    : none
.Ve
.Sh "invalidate_height"
.IX Subsection "invalidate_height"
.Vb 5
\& Title   : invalidate_height
\& Usage   : private helper method
\& Function: Invalidate our cached value of the node height in the tree
\& Returns : nothing
\& Args    : none
.Ve
.Sh "Methods for associating Tag/Values with a Node"
.IX Subsection "Methods for associating Tag/Values with a Node"
These methods associate tag/value pairs with a Node
.Sh "add_tag_value"
.IX Subsection "add_tag_value"
.Vb 6
\& Title   : add_tag_value
\& Usage   : $node->add_tag_value($tag,$value)
\& Function: Adds a tag value to a node 
\& Returns : number of values stored for this tag
\& Args    : $tag   - tag name
\&           $value - value to store for the tag
.Ve
.Sh "remove_tag"
.IX Subsection "remove_tag"
.Vb 5
\& Title   : remove_tag
\& Usage   : $node->remove_tag($tag)
\& Function: Remove the tag and all values for this tag
\& Returns : boolean representing success (0 if tag does not exist)
\& Args    : $tag - tagname to remove
.Ve
.Sh "remove_all_tags"
.IX Subsection "remove_all_tags"
.Vb 5
\& Title   : remove_all_tags
\& Usage   : $node->remove_all_tags()
\& Function: Removes all tags 
\& Returns : None
\& Args    : None
.Ve
.Sh "get_all_tags"
.IX Subsection "get_all_tags"
.Vb 5
\& Title   : get_all_tags
\& Usage   : my @tags = $node->get_all_tags()
\& Function: Gets all the tag names for this Node
\& Returns : Array of tagnames
\& Args    : None
.Ve
.Sh "get_tag_values"
.IX Subsection "get_tag_values"
.Vb 5
\& Title   : get_tag_values
\& Usage   : my @values = $node->get_tag_value($tag)
\& Function: Gets the values for given tag ($tag)
\& Returns : Array of values or empty list if tag does not exist
\& Args    : $tag - tag name
.Ve
.Sh "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Title   : has_tag
\& Usage   : $node->has_tag($tag)
\& Function: Boolean test if tag exists in the Node
\& Returns : Boolean
\& Args    : $tag - tagname
.Ve
.Sh "Helper Functions"
.IX Subsection "Helper Functions"
.Sh "id_output"
.IX Subsection "id_output"
.Vb 7
\& Title   : id_output
\& Usage   : my $id = $node->id_output;
\& Function: Return an id suitable for output in format like newick
\&           so that if it contains spaces or ():; characters it is properly 
\&           quoted
\& Returns : $id string if $node->id has a value
\& Args    : none
.Ve
