.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phenotype::OMIM::OMIMentry 3"
.TH Bio::Phenotype::OMIM::OMIMentry 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phenotype::OMIM::OMIMentry \- represents OMIM (Online Mendelian
Inheritance in Man) database entries
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  $obj = Bio::Phenotype::OMIM::OMIMentry->new( -mim_number          => 200000,
\&                                               -description         => "This is ...",
\&                                               -more_than_two_genes => 1 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Inherits from Bio::Phenotype::PhenotypeI.
Bio::Phenotype::OMIM::OMIMparser parses the flat file representation
of \s-1OMIM\s0 (i.e. files \*(L"omim.txt\*(R" and \*(L"genemap\*(R") returning OMIMentry objects. 
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek@gnf.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://www.genetics.wustl.edu/eddy/people/zmasek/
.PP
Address: 
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 22
\& Title   : new
\& Usage   : $obj = Bio::Phenotype::OMIM::OMIMentry->new( -mim_number          => 200000,
\&                                                        -description         => "This is ...",
\&                                                        -more_than_two_genes => 1 );                      
\& Function: Creates a new OMIMentry object.
\& Returns : A new OMIMentry object.
\& Args    : -mim_number                     => the MIM number
\&           -title                          => the title or name
\&           -alternative_titles_and_symbols => the "alternative titles and symbols"    
\&           -more_than_two_genes            => can phenotype can be caused by mutation in any of two or more genes?       
\&           -is_separate                    => is this phenotype separate from those represented by other entries  
\&           -description                    => the description of this phenotype
\&           -mapping_method                 => the mapping method      
\&           -gene_status                    => the gene status of this       
\&           -comment                        => a comment        
\&           -species                        => ref to the the species (human)
\&           -created                        => created by whom/when       
\&           -edited                         => edited by whom/when    
\&           -contributors                   => contributed by whom/when 
\&           -additional_references          => "see also"     
\&           -clinical_symptoms              => the clinical symptoms
\&           -minimim                        => the Mini MIM associated with this OMIM antry
.Ve
.Sh "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $obj->init();   
\& Function: Initializes this OMIMentry to all "" and empty lists.
\& Returns : 
\& Args    :
.Ve
.Sh "MIM_number"
.IX Subsection "MIM_number"
.Vb 7
\& Title   : MIM_number
\& Usage   : $omim->MIM_number( "100050" );
\&           or
\&           print $omim->MIM_number();
\& Function: Set/get for the MIM number of this OMIM entry.
\& Returns : The MIM number [an integer larger than 100000].
\& Args    : The MIM number [an integer larger than 100000] (optional).
.Ve
.Sh "title"
.IX Subsection "title"
.Vb 9
\& Title   : title
\& Usage   : $omim->title( "AARSKOG SYNDROME" );
\&           or
\&           print $omim->title();
\& Function: Set/get for the title or name of this OMIM entry.
\&           This method is an alias to the method "name" of
\&           Bio::Phenotype::PhenotypeI.
\& Returns : The title [scalar].
\& Args    : The title [scalar] (optional).
.Ve
.Sh "alternative_titles_and_symbols"
.IX Subsection "alternative_titles_and_symbols"
.Vb 9
\& Title   : alternative_titles_and_symbols
\& Usage   : $omim->alternative_titles_and_symbols( "AORTIC ANEURYSM, ABDOMINAL" );
\&           or
\&           print $omim->alternative_titles_and_symbols();
\& Function: Set/get for the "alternative titles and symbols" of this OMIM entry.
\&           Currently, everything after the first line of title (TI) field is
\&           considered "alternative titles and symbols".
\& Returns : "alternative titles and symbols" [scalar].
\& Args    : "alternative titles and symbols" [scalar] (optional).
.Ve
.Sh "more_than_two_genes"
.IX Subsection "more_than_two_genes"
.Vb 10
\& Title   : more_than_two_genes
\& Usage   : $omim->more_than_two_genes( 1 );
\&           or
\&           print $omim->more_than_two_genes();
\& Function: This is true if this phenotype can be caused
\&           by mutation in any of two or more genes.
\&           In OMIM, this is indicated by a number symbol (#)
\&           before an entry number (e.g. #114480 -- BREAST CANCER).
\& Returns : [1 or 0].
\& Args    : [1 or 0] (optional).
.Ve
.Sh "is_separate"
.IX Subsection "is_separate"
.Vb 14
\& Title   : is_separate
\& Usage   : $omim->is_separate( 1 );
\&           or
\&           print $omim->is_separate();
\& Function: This is true if the phenotype determined by the gene at
\&           the given locus is separate from those represented by
\&           other entries where "is_separate" is true and if the mode
\&           of inheritance of the phenotype has been proved
\&           (in the judgment of the authors and editors).
\&           In OMIM, this is indicated by a asterisk  (*)
\&           before an entry number (e.g. *113705 BREAST CANCER,
\&           TYPE 1; BRCA1).
\& Returns : [1 or 0].
\& Args    : [1 or 0] (optional).
.Ve
.Sh "mapping_method"
.IX Subsection "mapping_method"
.Vb 7
\& Title   : mapping_method
\& Usage   : $omim->mapping_method( "PCR of somatic cell hybrid DNA" );
\&           or
\&           print $omim->mapping_method();
\& Function: Set/get for the mapping method of this OMIM entry.
\& Returns : The mapping method [scalar].
\& Args    : The mapping method [scalar] (optional).
.Ve
.Sh "gene_status"
.IX Subsection "gene_status"
.Vb 13
\& Title   : gene_status
\& Usage   : $omim->gene_status( "C" );
\&           or
\&           print $omim->gene_status();
\& Function: Set/get for the gene status of this OMIM entry.
\&           The certainty with which assignment of loci to chromosomes or the linkage
\&           between two loci has been established has been graded into the following
\&           classes:
\&           <L>C = confirmed - observed in at least two laboratories or in several families.
\&           <L>P = provisional - based on evidence from one laboratory or one family.
\&           <L>I = inconsistent - results of different laboratories disagree.
\&           <L>L = limbo - evidence not as strong as that provisional, but included for
\&           heuristic reasons. (Same as `tentative'.)
.Ve
.PP
.Vb 2
\& Returns :  [C, P, I, or L].
\& Args    :  [C, P, I, or L] (optional).
.Ve
.Sh "clinical_symptoms"
.IX Subsection "clinical_symptoms"
.Vb 5
\& Title   : clinical_symptoms
\& Usage   : $omim->clinical_symptoms({});
\& Function: Set/get for the clinical symptoms of this OMIM entry.
\& Returns : [hash reference].
\& Args    : [hash reference]. Suggested not to assign alone. Parser will do.
.Ve
.Sh "clinical_symptoms_raw"
.IX Subsection "clinical_symptoms_raw"
.Vb 6
\&  Title     : clinical_symptoms_raw
\&  Usage     : $omim->clinical_symptoms( "Patients with ..." );
\&              print $omim->clinical_symptoms();
\&  Functions : Get/set for text information of clinical symptoms
\&  Returns   : The clinical symptoms [scalar].
\&  Args      : The clinical symptoms [scalar] (optional).
.Ve
.Sh "add_clinical_symptoms"
.IX Subsection "add_clinical_symptoms"
.Vb 7
\&  Title     : add_clinical_symptoms
\&  Usage     : $entry->add_clinical_symptoms('Ears', 'Floppy ears', 'Lop-ears');
\&  Function  : add one or more symptoms on one part of body.
\&  Returns   : [none]
\&  Args      : ($part, @symptoms)
\&              $part, the text name of part/organism of human
\&              @symptoms, an array of text description
.Ve
.Sh "query_clinical_symptoms"
.IX Subsection "query_clinical_symptoms"
.Vb 5
\&  Title     : get_clinical_symptoms
\&  Usage     : @symptoms = $self->query_clinical_symptoms('Ears');
\&  Function  : get all symptoms specific to one part/organism.
\&  Returns   : an array of text
\&  Args      : $organ
.Ve
.Sh "created"
.IX Subsection "created"
.Vb 7
\& Title   : created
\& Usage   : $omim->created( "Victor A. McKusick: 6/4/1986" );
\&           or
\&           print $omim->created();
\& Function: Set/get for the created field of the OMIM database.
\& Returns : Name(s) and date(s) [scalar - free form].
\& Args    : Name(s) and date(s) [scalar - free form] (optional).
.Ve
.Sh "contributors"
.IX Subsection "contributors"
.Vb 7
\& Title   : contributors
\& Usage   : $omim->contributors( "Kelly A. Przylepa - revised: 03/18/2002" );
\&           or
\&           print $omim->contributors();
\& Function: Set/get for the contributors field of the OMIM database.
\& Returns : Name(s) and date(s) [scalar - free form].
\& Args    : Name(s) and date(s) [scalar - free form] (optional).
.Ve
.Sh "edited"
.IX Subsection "edited"
.Vb 7
\& Title   : edited
\& Usage   : $omim->edited( "alopez: 06/03/1997" );
\&           or
\&           print $omim->edited();
\& Function: Set/get for the edited field of the OMIM database.
\& Returns : Name(s) and date(s) [scalar - free form].
\& Args    : Name(s) and date(s) [scalar - free form] (optional).
.Ve
.Sh "additional_references"
.IX Subsection "additional_references"
.Vb 8
\& Title   : additional_references
\& Usage   : $omim->additional_references( "Miller er al." );
\&           or
\&           print $omim->additional_references();
\& Function: Set/get for the additional references of this OMIM antry
\&           (see also).
\& Returns : additional reference [scalar].
\& Args    : additional reference [scalar] (optional).
.Ve
.Sh "miniMIM"
.IX Subsection "miniMIM"
.Vb 8
\& Title   : miniMIM
\& Usage   : $omim->miniMIM( $MM );
\&           or
\&           $MM = $omim->miniMIM();
\& Function: Set/get for the Mini MIM associated with this OMIM antry
\&           (see also).
\& Returns : [Bio::Phenotype::OMIM::MiniMIMentry].
\& Args    : [Bio::Phenotype::OMIM::MiniMIMentry] (optional).
.Ve
.Sh "each_AllelicVariant"
.IX Subsection "each_AllelicVariant"
.Vb 6
\& Title   : each_AllelicVariant()
\& Usage   : @avs = $obj->each_AllelicVariant();                 
\& Function: Returns a list of Bio::Phenotype::OMIM::OMIMentryAllelicVariant objects
\&           associated with this OMIM entry.
\& Returns : A list of Bio::Phenotype::OMIM::OMIMentryAllelicVariant objects.
\& Args    :
.Ve
.Sh "add_AllelicVariants"
.IX Subsection "add_AllelicVariants"
.Vb 8
\& Title   : add_AllelicVariants
\& Usage   : $obj->add_AllelicVariants( @avs );
\&           or
\&           $obj->add_AllelicVariants( $av );                  
\& Function: Pushes one or more OMIMentryAllelicVariant
\&           into the list of OMIMentryAllelicVariants.
\& Returns : 
\& Args    : Bio::Phenotype::OMIM::OMIMentryAllelicVariant object(s).
.Ve
.Sh "remove_AllelicVariants"
.IX Subsection "remove_AllelicVariants"
.Vb 6
\& Title   : remove_AllelicVariants
\& Usage   : $obj->remove_AllelicVariants();
\& Function: Deletes (and returns) the list of OMIMentryAllelicVariant objects
\&           associated with this OMIM entry.
\& Returns : A list of OMIMentryAllelicVariant objects.
\& Args    :
.Ve
