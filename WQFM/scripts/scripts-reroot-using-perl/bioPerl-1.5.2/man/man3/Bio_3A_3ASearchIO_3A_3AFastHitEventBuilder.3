.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::FastHitEventBuilder 3"
.TH Bio::SearchIO::FastHitEventBuilder 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SearchIO::FastHitEventBuilder \- Event Handler for SearchIO events.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Do not use this object directly, this object is part of the SearchIO
\&  # event based parsing system.
.Ve
.PP
.Vb 1
\&  # to use the FastHitEventBuilder do this
.Ve
.PP
.Vb 1
\&  use Bio::SearchIO::FastHitEventBuilder;
.Ve
.PP
.Vb 1
\&  my $searchio = new Bio::SearchIO(-format => $format, -file => $file);
.Ve
.PP
.Vb 1
\&  $searchio->attach_EventHandler(new Bio::SearchIO::FastHitEventBuilder);
.Ve
.PP
.Vb 5
\&  while( my $r = $searchio->next_result ) {
\&   while( my $h = $r->next_hit ) {
\&    # note that Hits will NOT have HSPs
\&   }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object handles Search Events generated by the SearchIO classes
and build appropriate Bio::Search::* objects from them.  This object
is intended for lightweight parsers which only want Hits and not deal
with the overhead of HSPs.  It is a lot faster than the standard
parser event handler but of course you are getting less information
and less objects out.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $obj = new Bio::SearchIO::FastHitEventBuilder();
\& Function: Builds a new Bio::SearchIO::FastHitEventBuilder object 
\& Returns : Bio::SearchIO::FastHitEventBuilder
\& Args    : -hit_factory    => Bio::Factory::ObjectFactoryI
\&           -result_factory => Bio::Factory::ObjectFactoryI
.Ve
.PP
See Bio::Factory::ObjectFactoryI for more information
.Sh "will_handle"
.IX Subsection "will_handle"
.Vb 5
\& Title   : will_handle
\& Usage   : if( $handler->will_handle($event_type) ) { ... }
\& Function: Tests if this event builder knows how to process a specific event
\& Returns : boolean
\& Args    : event type name
.Ve
.Sh "\s-1SAX\s0 methods"
.IX Subsection "SAX methods"
.Sh "start_result"
.IX Subsection "start_result"
.Vb 5
\& Title   : start_result
\& Usage   : $handler->start_result($resulttype)
\& Function: Begins a result event cycle
\& Returns : none 
\& Args    : Type of Report
.Ve
.Sh "end_result"
.IX Subsection "end_result"
.Vb 4
\& Title   : end_result
\& Usage   : my @results = $parser->end_result
\& Function: Finishes a result handler cycle Returns : A Bio::Search::Result::ResultI
\& Args    : none
.Ve
.Sh "start_hit"
.IX Subsection "start_hit"
.Vb 5
\& Title   : start_hit
\& Usage   : $handler->start_hit()
\& Function: Starts a Hit event cycle
\& Returns : none
\& Args    : type of event and associated hashref
.Ve
.Sh "end_hit"
.IX Subsection "end_hit"
.Vb 5
\& Title   : end_hit
\& Usage   : $handler->end_hit()
\& Function: Ends a Hit event cycle
\& Returns : Bio::Search::Hit::HitI object
\& Args    : type of event and associated hashref
.Ve
.Sh "Factory methods"
.IX Subsection "Factory methods"
.Sh "register_factory"
.IX Subsection "register_factory"
.Vb 6
\& Title   : register_factory
\& Usage   : $handler->register_factory('TYPE',$factory);
\& Function: Register a specific factory for a object type class
\& Returns : none
\& Args    : string representing the class and
\&           Bio::Factory::ObjectFactoryI
.Ve
.PP
See Bio::Factory::ObjectFactoryI for more information
.Sh "factory"
.IX Subsection "factory"
.Vb 5
\& Title   : factory
\& Usage   : my $f = $handler->factory('TYPE');
\& Function: Retrieves the associated factory for requested 'TYPE'
\& Returns : a Bio::Factory::ObjectFactoryI or undef if none registered
\& Args    : name of factory class to retrieve
.Ve
.PP
See Bio::Factory::ObjectFactoryI for more information
.Sh "inclusion_threshold"
.IX Subsection "inclusion_threshold"
See Bio::SearchIO::blast::inclusion_threshold.
