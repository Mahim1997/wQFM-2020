.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Factory::SequenceProcessorI 3"
.TH Bio::Factory::SequenceProcessorI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Factory::SequenceProcessorI \- Interface for chained sequence 
                                   processing algorithms
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::SeqIO;
\&    use MySeqProcessor; # is-a Bio::Factory::SequenceProcessorI
.Ve
.PP
.Vb 10
\&    # obtain your source stream, e.g., an EMBL file
\&    my $seqin = Bio::SeqIO->new(-fh => \e*STDIN, -format => 'embl');
\&    # create your processor (it must implement this interface)
\&    my $seqalgo = MySeqProcessor->new();
\&    # chain together
\&    $seqalgo->source_stream($seqin);
\&    # you could create more processors and chain them one after another
\&    # ...
\&    # finally, the last link in the chain is your SeqIO stream
\&    my $seqpipe = $seqalgo;
.Ve
.PP
.Vb 5
\&    # once you've established the pipeline, proceed as if you had a
\&    # single SeqIO stream
\&    while(my $seq = $seqpipe->next_seq()) {
\&        # ... do something ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This defines an interface that allows seamless chaining of sequence
processing algorithms encapsulated in modules while retaining the
overall Bio::SeqIO interface at the end of the pipeline.
.PP
This is especially useful if you want an easily configurable
processing pipeline of re-usable algorithms as building blocks instead
of (hard\-)coding the whole algorithm in a single script.
.PP
There are literally no restrictions as to what an individual module
can do with a sequence object it obtains from the source stream before
it makes it available through its own \fInext_seq()\fR method. It can
manipulate the sequence object, but otherwise keep it intact, but it
can also create any number of new sequence objects from it, or it can
discard some, or any combination thereof. The only requirement is that
its \fInext_seq()\fR method return Bio::PrimarySeqI compliant objects. In
order to play nice, if a processor creates new objects it should try
to use the same sequence factory that the source stream uses, but this
is not strongly mandated.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "source_stream"
.IX Subsection "source_stream"
.Vb 4
\& Title   : source_stream
\& Usage   : $obj->source_stream($newval)
\& Function: Get/set the source sequence stream for this sequence
\&           processor.
.Ve
.PP
.Vb 2
\&           An implementation is not required to allow set, but will
\&           usually do so.
.Ve
.PP
.Vb 4
\& Example : 
\& Returns : A Bio::Factory::SequenceStreamI compliant object
\& Args    : on set, new value (a Bio::Factory::SequenceStreamI compliant
\&           object)
.Ve
.SH "Bio::Factory::SequenceStreamI methods"
.IX Header "Bio::Factory::SequenceStreamI methods"
.Vb 8
\& The requirement to implement these methods is inherited from
\& L<Bio::Factory::SequenceStreamI>. An implementation may not
\& necessarily have to implement all methods in a meaningful way. Which
\& methods will be necessary very much depends on the context in which
\& an implementation of this interface is used. E.g., if it is only used
\& for post-processing sequences read from a SeqIO stream, write_seq()
\& will not be used and hence does not need to be implemented in a
\& meaningful way (it may in fact even throw an exception).
.Ve
.PP
.Vb 4
\& Also, since an implementor will already receive built objects from a
\& sequence stream, sequence_factory() may or may not be relevant,
\& depending on whether the processing method does or does not involve
\& creating new objects.
.Ve
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 3
\& Title   : next_seq
\& Usage   : $seq = stream->next_seq
\& Function: Reads the next sequence object from the stream and returns it.
.Ve
.PP
.Vb 5
\&           In the case of a non-recoverable situation an exception
\&           will be thrown.  Do not assume that you can resume parsing
\&           the same stream after catching the exception. Note that you
\&           can always turn recoverable errors into exceptions by
\&           calling $stream->verbose(2).
.Ve
.PP
.Vb 2
\& Returns : a Bio::Seq sequence object
\& Args    : none
.Ve
.PP
See Bio::Root::RootI
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream->write_seq($seq)
\& Function: writes the $seq object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Seq object
.Ve
.Sh "sequence_factory"
.IX Subsection "sequence_factory"
.Vb 5
\& Title   : sequence_factory
\& Usage   : $seqio->sequence_factory($seqfactory)
\& Function: Get the Bio::Factory::SequenceFactoryI
\& Returns : Bio::Factory::SequenceFactoryI
\& Args    : none
.Ve
