.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Location::Split 3"
.TH Bio::Location::Split 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Location::Split \- Implementation of a Location on a Sequence
which has multiple locations (start/end points)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Location::Split;
.Ve
.PP
.Vb 8
\&    my $splitlocation = new Bio::Location::Split();
\&    $splitlocation->add_sub_Location(new Bio::Location::Simple(-start=>1,
\&                                                               -end=>30,
\&                                                               -strand=>1));
\&    $splitlocation->add_sub_Location(new Bio::Location::Simple(-start=>50,
\&                                                               -end=>61,
\&                                                               -strand=>1));   
\&    my @sublocs = $splitlocation->sub_Location();
.Ve
.PP
.Vb 8
\&    my $count = 1;
\&    # print the start/end points of the sub locations
\&    foreach my $location ( sort { $a->start <=> $b->start } 
\&                           @sublocs ) {
\&        printf "sub feature %d [%d..%d]\en", 
\&               $count, $location->start,$location->end, "\en";
\&        $count++;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This implementation handles locations which span more than one
start/end location, or and/or lie on different sequences, and can
work with split locations that depend on the specific order of the
sublocations ('join') or don't have a specific order but represent
a feature spanning discontiguous sublocations ('order', 'bond').
.PP
Note that the order in which sublocations are added may be very important,
depending on the specific split location type.  For instance, a 'join'
must have the sublocations added in the order that one expects to
join the sublocations, whereas all other types are sorted based on the
sequence location.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-AT\-bioperl_DOT_org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "each_Location"
.IX Subsection "each_Location"
.Vb 8
\& Title   : each_Location
\& Usage   : @locations = $locObject->each_Location($order);
\& Function: Conserved function call across Location:: modules - will
\&           return an array containing the component Location(s) in
\&           that object, regardless if the calling object is itself a
\&           single location or one containing sublocations.
\& Returns : an array of Bio::LocationI implementing objects
\& Args    : Optional sort order to be passed to sub_Location()
.Ve
.Sh "sub_Location"
.IX Subsection "sub_Location"
.Vb 7
\& Title   : sub_Location
\& Usage   : @sublocs = $splitloc->sub_Location();
\& Function: Returns the array of sublocations making up this compound (split)
\&           location. Those sublocations referring to the same sequence as
\&           the root split location will be sorted by start position (forward
\&           sort) or end position (reverse sort) and come first (before
\&           those on other sequences).
.Ve
.PP
.Vb 2
\&           The sort order can be optionally specified or suppressed by the
\&           value of the first argument. The default is no sort.
.Ve
.PP
.Vb 3
\& Returns : an array of Bio::LocationI implementing objects
\& Args    : Optionally 1, 0, or -1 for specifying a forward, no, or reverse
\&           sort order
.Ve
.Sh "add_sub_Location"
.IX Subsection "add_sub_Location"
.Vb 5
\& Title   : add_sub_Location
\& Usage   : $splitloc->add_sub_Location(@locationIobjs);
\& Function: add an additional sublocation
\& Returns : number of current sub locations
\& Args    : list of Bio::LocationI implementing object(s) to add
.Ve
.Sh "splittype"
.IX Subsection "splittype"
.Vb 5
\&  Title   : splittype
\&  Usage   : $splittype = $location->splittype();
\&  Function: get/set the split splittype
\&  Returns : the splittype of split feature (join, order)
\&  Args    : splittype to set
.Ve
.Sh "is_single_sequence"
.IX Subsection "is_single_sequence"
.Vb 7
\&  Title   : is_single_sequence
\&  Usage   : if($splitloc->is_single_sequence()) {
\&                print "Location object $splitloc is split ".
\&                      "but only across a single sequence\en";
\&            }
\&  Function: Determine whether this location is split across a single or
\&            multiple sequences.
.Ve
.PP
.Vb 2
\&            This implementation ignores (sub-)locations that do not define
\&            seq_id(). The same holds true for the root location.
.Ve
.PP
.Vb 3
\&  Returns : TRUE if all sublocations lie on the same sequence as the root
\&            location (feature), and FALSE otherwise.
\&  Args    : none
.Ve
.Sh "guide_strand"
.IX Subsection "guide_strand"
.Vb 7
\&  Title   : guide_strand
\&  Usage   : $str = $loc->guide_strand();
\&  Function: Get/Set the guide strand.  Of use only if the split type is
\&            a 'join' (this helps determine the order of sublocation
\&                        retrieval)
\&  Returns : value of guide strand (1, -1, or undef)
\&  Args    : new value (-1 or 1, optional)
.Ve
.SH "LocationI methods"
.IX Header "LocationI methods"
.Sh "strand"
.IX Subsection "strand"
.Vb 5
\& Title   : strand
\& Usage   : $obj->strand($newval)
\& Function: For SplitLocations, setting the strand of the container
\&           (this object) is a short-cut for setting the strand of all
\&           sublocations.
.Ve
.PP
.Vb 3
\&           In get-mode, checks if no sub-location is remote, and if
\&           all have the same strand. If so, it returns that shared
\&           strand value. Otherwise it returns undef.
.Ve
.PP
.Vb 4
\& Example : 
\& Returns : on get, value of strand if identical between sublocations 
\&           (-1, 1, or undef)
\& Args    : new value (-1 or 1, optional)
.Ve
.Sh "flip_strand"
.IX Subsection "flip_strand"
.Vb 6
\&  Title   : flip_strand
\&  Usage   : $location->flip_strand();
\&  Function: Flip-flop a strand to the opposite.  Also switch Split strand
\&            from undef to -1 or -1 to undef
\&  Returns : None
\&  Args    : None
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 5
\&  Title   : start
\&  Usage   : $start = $location->start();
\&  Function: get the starting point of the first (sorted) sublocation
\&  Returns : integer
\&  Args    : none
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 5
\&  Title   : end
\&  Usage   : $end = $location->end();
\&  Function: get the ending point of the last (sorted) sublocation
\&  Returns : integer
\&  Args    : none
.Ve
.Sh "min_start"
.IX Subsection "min_start"
.Vb 5
\&  Title   : min_start
\&  Usage   : $min_start = $location->min_start();
\&  Function: get the minimum starting point
\&  Returns : the minimum starting point from the contained sublocations
\&  Args    : none
.Ve
.Sh "max_start"
.IX Subsection "max_start"
.Vb 5
\&  Title   : max_start
\&  Usage   : my $maxstart = $location->max_start();
\&  Function: Get maximum starting location of feature startpoint  
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.Sh "start_pos_type"
.IX Subsection "start_pos_type"
.Vb 6
\&  Title   : start_pos_type
\&  Usage   : my $start_pos_type = $location->start_pos_type();
\&  Function: Get start position type (ie <,>, ^) 
\&  Returns : type of position coded as text 
\&            ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "min_end"
.IX Subsection "min_end"
.Vb 5
\&  Title   : min_end
\&  Usage   : my $minend = $location->min_end();
\&  Function: Get minimum ending location of feature endpoint 
\&  Returns : integer or undef if no minimum ending point.
\&  Args    : none
.Ve
.Sh "max_end"
.IX Subsection "max_end"
.Vb 5
\&  Title   : max_end
\&  Usage   : my $maxend = $location->max_end();
\&  Function: Get maximum ending location of feature endpoint 
\&  Returns : integer or undef if no maximum ending point.
\&  Args    : none
.Ve
.Sh "end_pos_type"
.IX Subsection "end_pos_type"
.Vb 6
\&  Title   : end_pos_type
\&  Usage   : my $end_pos_type = $location->end_pos_type();
\&  Function: Get end position type (ie <,>, ^) 
\&  Returns : type of position coded as text 
\&            ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "seq_id"
.IX Subsection "seq_id"
.Vb 3
\&  Title   : seq_id
\&  Usage   : my $seqid = $location->seq_id();
\&  Function: Get/Set seq_id that location refers to
.Ve
.PP
.Vb 4
\&            We override this here in order to propagate to all sublocations
\&            which are not remote (provided this root is not remote either)
\&  Returns : seq_id
\&  Args    : [optional] seq_id value to set
.Ve
.Sh "coordinate_policy"
.IX Subsection "coordinate_policy"
.Vb 4
\&  Title   : coordinate_policy
\&  Usage   : $policy = $location->coordinate_policy();
\&            $location->coordinate_policy($mypolicy); # set may not be possible
\&  Function: Get the coordinate computing policy employed by this object.
.Ve
.PP
.Vb 2
\&            See Bio::Location::CoordinatePolicyI for documentation about
\&            the policy object and its use.
.Ve
.PP
.Vb 3
\&            The interface *does not* require implementing classes to accept
\&            setting of a different policy. The implementation provided here
\&            does, however, allow to do so.
.Ve
.PP
.Vb 7
\&            Implementors of this interface are expected to initialize every
\&            new instance with a CoordinatePolicyI object. The implementation
\&            provided here will return a default policy object if none has
\&            been set yet. To change this default policy object call this
\&            method as a class method with an appropriate argument. Note that
\&            in this case only subsequently created Location objects will be
\&            affected.
.Ve
.PP
.Vb 2
\&  Returns : A Bio::Location::CoordinatePolicyI implementing object.
\&  Args    : On set, a Bio::Location::CoordinatePolicyI implementing object.
.Ve
.Sh "to_FTstring"
.IX Subsection "to_FTstring"
.Vb 5
\&  Title   : to_FTstring
\&  Usage   : my $locstr = $location->to_FTstring()
\&  Function: returns the FeatureTable string of this location
\&  Returns : string
\&  Args    : none
.Ve
