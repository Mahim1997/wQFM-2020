.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::AnalysisResult 3"
.TH Bio::Tools::AnalysisResult 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::AnalysisResult \- Base class for analysis result objects and parsers
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # obtain a AnalysisResult derived object somehow
.Ve
.PP
.Vb 3
\&    print "Method ", $result->analysis_method(),
\&          ", version ", $result->analysis_method_version(),
\&          ", performed on ", $result->analysis_date(), "\en";
.Ve
.PP
.Vb 5
\&    # annotate a sequence utilizing SeqAnalysisParserI methods
\&    while($feat = $result->next_feature()) {
\&        $seq->add_SeqFeature($feat);
\&    }
\&    $result->close();
.Ve
.PP
.Vb 2
\&    # query object, e.g. a Bio::SeqI implementing object
\&    $queryseq = $result->analysis_query();
.Ve
.PP
.Vb 3
\&    # Subject of the analysis -- may be undefined. Refer to derived module
\&    # to find out what is returned.
\&    $subject = $result->analysis_subject();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The AnalysisResult module is supposed to be the base class for modules
encapsulating parsers and interpreters for the result of a analysis
that was carried out with a query sequence.
.PP
The notion of an analysis represented by this base class is that of a
unary or binary operator, taking either one query or a query and a
subject and producing a result. The query is e.g. a sequence, and a
subject is either a sequence, too, or a database of sequences.
.PP
This module also implements the Bio::SeqAnalysisParserI interface, and
thus can be used wherever such an object fits.  See
Bio::SeqAnalysisParserI.  Developers will
find a ready-to-use \fB\f(BIparse()\fB\fR method, but need to implement
\&\fB\f(BInext_feature()\fB\fR in an inheriting class. Support for initialization
with input file names and reading from streams is also ready to use.
.PP
Note that this module does not provide support for \fBrunning\fR an
analysis.  Rather, it is positioned in the subsequent parsing step
(concerned with turning raw results into BioPerl objects).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp\-at\-gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "_initialize_state"
.IX Subsection "_initialize_state"
.Vb 4
\& Title   : _initialize_state
\& Usage   : n/a; usually called by _initialize()
\& Function: This method is for BioPerl B<developers> only, as indicated by the
\&           leading underscore in its name.
.Ve
.PP
.Vb 6
\&           Performs initialization or reset of the state of this object. The
\&           difference to _initialize() is that it may be called at any time,
\&           and repeatedly within the lifetime of this object. B<Note>, however,
\&           that this is potentially dangerous in a multi-threading
\&           environment. In general, calling this method twice is discouraged
\&           for this reason.
.Ve
.PP
.Vb 6
\&           This method is supposed to reset the state such that any 'history'
\&           is lost. State information that does not change during object
\&           lifetime is not considered as history, e.g. parent, name, etc shall
\&           not be reset. An inheriting object should only be concerned with
\&           state information it introduces itself, and for everything else
\&           call SUPER::_initialize_state(@args).
.Ve
.PP
.Vb 3
\&           An example is parsing an input file: a state reset implies
\&           discarding any unread input, and the actual input itself, followed
\&           by setting the new input.
.Ve
.PP
.Vb 9
\&           The argument syntax is the same as for L<new()|new> and L<_initialize()|_initialize>,
\&           i.e., named parameters following the -name=>$value convention.
\&           The following parameters are dealt with by the implementation
\&           provided here:
\&              -INPUT, -FH, -FILE
\&           (tags are case-insensitive).
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "analysis_query"
.IX Subsection "analysis_query"
.Vb 6
\& Usage     : $query_obj = $result->analysis_query();
\& Purpose   : Set/Get the name of the query used to generate the result, that
\&             is, the entity on which the analysis was performed. Will mostly
\&             be a sequence object (Bio::PrimarySeq compatible).
\& Argument  :
\& Returns   : The object set before. Mostly a Bio::PrimarySeq compatible object.
.Ve
.Sh "analysis_subject"
.IX Subsection "analysis_subject"
.Vb 8
\& Usage     : $result->analyis_subject();
\& Purpose   : Set/Get the subject of the analysis against which it was
\&             performed. For similarity searches it will probably be a database,
\&             and for sequence feature predictions (exons, promoters, etc) it
\&             may be a collection of models or homologous sequences that were
\&             used, or undefined.
\& Returns   : The object that was set before, or undef.
\& Argument  :
.Ve
.Sh "analysis_date"
.IX Subsection "analysis_date"
.Vb 5
\& Usage     : $result->analysis_date();
\& Purpose   : Set/Get the date on which the analysis was performed.
\& Returns   : String
\& Argument  :
\& Comments  :
.Ve
.Sh "analysis_method"
.IX Subsection "analysis_method"
.Vb 6
\& Usage     : $result->analysis_method();
\& Purpose   : Set/Get the name of the sequence analysis method that was used
\&             to produce this result (BLASTP, FASTA, etc.). May also be the
\&             actual name of a program.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "analysis_method_version"
.IX Subsection "analysis_method_version"
.Vb 5
\& Usage     : $result->analysis_method_version();
\& Purpose   : Set/Get the version string of the analysis program.
\&           : (e.g., 1.4.9MP, 2.0a19MP-WashU).
\& Returns   : String
\& Argument  : n/a
.Ve
