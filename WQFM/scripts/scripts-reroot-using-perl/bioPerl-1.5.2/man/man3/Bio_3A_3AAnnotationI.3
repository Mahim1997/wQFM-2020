.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::AnnotationI 3"
.TH Bio::AnnotationI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::AnnotationI \- Annotation interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # generally you get AnnotationI's from AnnotationCollectionI's
.Ve
.PP
.Vb 10
\&   foreach $key ( $ac->get_all_annotation_keys() ) {
\&       @values = $ac->get_Annotations($key);
\&       foreach $value ( @values ) {
\&          # value is an Bio::AnnotationI, and defines a "as_text" method
\&          print "Annotation ",$key," stringified value ",$value->as_text,"\en";
\&          # you can also use a generic hash_tree method for getting
\&          # stuff out say into XML format
\&          $hash_tree = $value->hash_tree();
\&       }
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Interface all annotations must support. There are two things that each
annotation has to support.
.PP
.Vb 1
\&  $annotation->as_text()
.Ve
.PP
Annotations have to support an \*(L"as_text\*(R" method. This should be a
single text string, without newlines representing the annotation,
mainly for human readability. It is not aimed at being able to
store/represent the annotation.
.PP
The second method allows annotations to at least attempt to represent
themselves as pure data for storage/display/whatever. The method
hash_tree
.PP
.Vb 1
\&   $hash = $annotation->hash_tree();
.Ve
.PP
should return an anonymous hash with \*(L"XML\-like\*(R" formatting. The
formatting is as follows.
.PP
.Vb 1
\&  (1) For each key in the hash, if the value is a reference'd array -
.Ve
.PP
.Vb 6
\&      (2) For each element of the array if the value is a object -
\&          Assume the object has the method "hash_tree";
\&      (3) else if the value is a referene to a hash
\&          Recurse again from point (1)
\&      (4) else
\&          Assumme the value is a scalar, and handle it directly as text
.Ve
.PP
.Vb 1
\&   (5) else (if not an array) apply rules 2,3 and 4 to value
.Ve
.PP
The \s-1XML\s0 path in tags is represented by the keys taken in the
hashes. When arrays are encountered they are all present in the path
level of this tag
.PP
This is a pretty \*(L"natural\*(R" representation of an object tree in an \s-1XML\s0
style, without forcing everything to inheriet off some super-generic
interface for representing things in the hash.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 1
\&  bioperl-l@bioperl.org
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "as_text"
.IX Subsection "as_text"
.Vb 8
\& Title   : as_text
\& Usage   :
\& Function: single text string, without newlines representing the
\&           annotation, mainly for human readability. It is not aimed
\&           at being able to store/represent the annotation.
\& Example :
\& Returns : a string
\& Args    : none
.Ve
.Sh "hash_tree"
.IX Subsection "hash_tree"
.Vb 6
\& Title   : hash_tree
\& Usage   :
\& Function: should return an anonymous hash with "XML-like" formatting
\& Example :
\& Returns : a hash reference
\& Args    : none
.Ve
.Sh "tagname"
.IX Subsection "tagname"
.Vb 3
\& Title   : tagname
\& Usage   : $obj->tagname($newval)
\& Function: Get/set the tagname for this annotation value.
.Ve
.PP
.Vb 6
\&           Setting this is optional. If set, it obviates the need to
\&           provide a tag to Bio::AnnotationCollectionI when adding
\&           this object. When obtaining an AnnotationI object from the
\&           collection, the collection will set the value to the tag
\&           under which it was stored unless the object has a tag
\&           stored already.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : value of tagname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
