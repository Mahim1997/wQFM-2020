.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::TreeFunctionsI 3"
.TH Bio::Tree::TreeFunctionsI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::TreeFunctionsI \- Decorated Interface implementing basic Tree exploration methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::TreeIO;
\&  my $in = new Bio::TreeIO(-format => 'newick', -file => 'tree.tre');
.Ve
.PP
.Vb 1
\&  my $tree = $in->next_tree;
.Ve
.PP
.Vb 1
\&  my @nodes = $tree->find_node('id1');
.Ve
.PP
.Vb 3
\&  if( $tree->is_monophyletic(-nodes => \e@nodes, -outgroup => $outnode) ){
\&   #...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface provides a set of implementated Tree functions which
only use the defined methods in the TreeI or NodeI interface.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich, Aaron Mackey, Justin Reese"
.IX Header "AUTHOR - Jason Stajich, Aaron Mackey, Justin Reese"
Email jason-at-bioperl-dot-org
Email amackey\-at\-virginia.edu
Email jtr4v\-at\-virginia.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.PP
Rerooting code was worked on by
.PP
.Vb 2
\&  Daniel Barker d.barker-at-reading.ac.uk
\&  Ramiro Barrantes Ramiro.Barrantes-at-uvm.edu
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "find_node"
.IX Subsection "find_node"
.Vb 8
\& Title   : find_node
\& Usage   : my @nodes = $self->find_node(-id => 'node1');
\& Function: returns all nodes that match a specific field, by default this
\&           is id, but different branch_length, 
\& Returns : List of nodes which matched search
\& Args    : text string to search for
\&           OR
\&           -fieldname => $textstring
.Ve
.Sh "remove_Node"
.IX Subsection "remove_Node"
.Vb 5
\& Title   : remove_Node
\& Usage   : $tree->remove_Node($node)
\& Function: Removes a node from the tree
\& Returns : boolean represent status of success
\& Args    : either Bio::Tree::NodeI or string of the node id
.Ve
.Sh "get_lineage_nodes"
.IX Subsection "get_lineage_nodes"
.Vb 6
\& Title   : get_lineage_nodes
\& Usage   : my @nodes = $tree->get_lineage_nodes($node);
\& Function: Get the full lineage of a node (all its ancestors, in the order
\&           root->most recent ancestor)
\& Returns : list of nodes
\& Args    : either Bio::Tree::NodeI or string of the node id
.Ve
.Sh "splice"
.IX Subsection "splice"
.Vb 15
\& Title   : splice
\& Usage   : $tree->splice(-remove_id => \e@ids);
\& Function: Remove all the nodes from a tree that correspond to the supplied
\&           args, making all the descendents of a removed node the descendents
\&           of the removed node's ancestor.
\&           You can ask to explicitly remove certain nodes by using -remove_*,
\&           remove them conditionally by using -remove_* in combination with
\&           -keep_*, or remove everything except certain nodes by using only
\&           -keep_*.
\& Returns : n/a
\& Args    : just a list of Bio::Tree::NodeI objects to remove, OR
\&           -key => value pairs, where -key has the prefix 'remove' or 'keep',
\&           followed by an underscore, followed by a fieldname (like for the
\&           method find_node). Value should be a scalar or an array ref of
\&           scalars (again, like you might supply to find_node).
.Ve
.PP
.Vb 6
\&           So (-remove_id => [1, 2]) will remove all nodes from the tree that
\&           have an id() of '1' or '2', while
\&           (-remove_id => [1, 2], -keep_id => [2]) will remove all nodes with
\&           an id() of '1'.
\&           (-keep_id => [2]) will remove all nodes unless they have an id() of
\&           '2' (note, no -remove_*).
.Ve
.Sh "get_lca"
.IX Subsection "get_lca"
.Vb 8
\& Title   : get_lca
\& Usage   : get_lca(-nodes => \e@nodes ); OR
\&           get_lca(@nodes);
\& Function: given two or more nodes, returns the lowest common ancestor (aka most
\&           recent common ancestor)
\& Returns : node object or undef if there is no commen ancestor
\& Args    : -nodes => arrayref of nodes to test, OR
\&           just a list of nodes
.Ve
.Sh "merge_lineage"
.IX Subsection "merge_lineage"
.Vb 6
\& Title   : merge_lineage
\& Usage   : merge_lineage($node)
\& Function: Merge a lineage of nodes with this tree.
\& Returns : n/a
\& Args    : Bio::Tree::TreeI with only one leaf, OR
\&           Bio::Tree::NodeI which has an ancestor
.Ve
.PP
.Vb 1
\& For example, if we are the tree $tree:
.Ve
.PP
.Vb 5
\& +---B
\& |
\& A
\& |
\& +---C
.Ve
.PP
.Vb 1
\& and we want to merge the lineage $other_tree:
.Ve
.PP
.Vb 1
\& A---C---D
.Ve
.PP
.Vb 1
\& After calling $tree->merge_lineage($other_tree), $tree looks like:
.Ve
.PP
.Vb 5
\& +---B
\& |
\& A
\& |
\& +---C---D
.Ve
.Sh "contract_linear_paths"
.IX Subsection "contract_linear_paths"
.Vb 6
\& Title   : contract_linear_paths
\& Usage   : contract_linear_paths()
\& Function: Splices out all nodes in the tree that have an ancestor and only one
\&           descendent.
\& Returns : n/a
\& Args    : none
.Ve
.PP
.Vb 1
\& For example, if we are the tree $tree:
.Ve
.PP
.Vb 5
\&             +---E
\&             |
\& A---B---C---D
\&             |
\&             +---F
.Ve
.PP
.Vb 1
\& After calling $tree->contract_linear_paths(), $tree looks like:
.Ve
.PP
.Vb 5
\&     +---E
\&     |
\& A---D
\&     |
\&     +---F
.Ve
.Sh "distance"
.IX Subsection "distance"
.Vb 5
\& Title   : distance
\& Usage   : distance(-nodes => \e@nodes )
\& Function: returns the distance between two given nodes
\& Returns : numerical distance
\& Args    : -nodes => arrayref of nodes to test
.Ve
.Sh "is_monophyletic"
.IX Subsection "is_monophyletic"
.Vb 8
\& Title   : is_monophyletic
\& Usage   : if( $tree->is_monophyletic(-nodes => \e@nodes, 
\&                                      -outgroup => $outgroup)
\& Function: Will do a test of monophyly for the nodes specified
\&           in comparison to a chosen outgroup
\& Returns : boolean
\& Args    : -nodes    => arrayref of nodes to test
\&           -outgroup => outgroup to serve as a reference
.Ve
.Sh "is_paraphyletic"
.IX Subsection "is_paraphyletic"
.Vb 10
\& Title   : is_paraphyletic
\& Usage   : if( $tree->is_paraphyletic(-nodes =>\e@nodes,
\&                                      -outgroup => $node) ){ }
\& Function: Tests whether or not a given set of nodes are paraphyletic
\&           (representing the full clade) given an outgroup
\& Returns : [-1,0,1] , -1 if the group is not monophyletic
\&                       0 if the group is not paraphyletic
\&                       1 if the group is paraphyletic
\& Args    : -nodes => Array of Bio::Tree::NodeI objects which are in the tree
\&           -outgroup => a Bio::Tree::NodeI to compare the nodes to
.Ve
.Sh "reroot"
.IX Subsection "reroot"
.Vb 5
\& Title   : reroot
\& Usage   : $tree->reroot($node);
\& Function: Reroots a tree making a new node the root
\& Returns : 1 on success, 0 on failure
\& Args    : Bio::Tree::NodeI that is in the tree, but is not the current root
.Ve
.Sh "findnode_by_id"
.IX Subsection "findnode_by_id"
.Vb 6
\& Title   : findnode_by_id
\& Usage   : my $node = $tree->find_node_by_id($id);
\& Function: Get a node by its internal id (which should be 
\&           unique for the tree)
\& Returns : L<Bio::Tree::NodeI>
\& Args    : node id
.Ve
