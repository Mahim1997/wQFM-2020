.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::BPlite 3"
.TH Bio::Tools::BPlite 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::BPlite \- Lightweight BLAST parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Tools::BPlite;
\& my $report = new Bio::Tools::BPlite(-fh=>\e*STDIN);
.Ve
.PP
.Vb 25
\&  {
\&    $report->query;
\&    $report->database;
\&    while(my $sbjct = $report->nextSbjct) {
\&        $sbjct->name;
\&        while (my $hsp = $sbjct->nextHSP) {
\&            $hsp->score;
\&            $hsp->bits;
\&            $hsp->percent;
\&            $hsp->P;
\&            $hsp->EXP;
\&            $hsp->match;
\&            $hsp->positive;
\&            $hsp->length;
\&            $hsp->querySeq;
\&            $hsp->sbjctSeq;
\&            $hsp->homologySeq;
\&            $hsp->query->start;
\&            $hsp->query->end;
\&            $hsp->hit->start;
\&            $hsp->hit->end;
\&            $hsp->hit->seq_id;
\&            $hsp->hit->overlaps($exon);
\&        }
\&    }
.Ve
.PP
.Vb 4
\&    # the following line takes you to the next report in the stream/file
\&    # it will return 0 if that report is empty,
\&    # but that is valid for an empty blast report.
\&    # Returns -1 for EOF.
.Ve
.PP
.Vb 3
\&    last if ($report->_parseHeader == -1);
\&    redo;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BPlite is a package for parsing \s-1BLAST\s0 reports. The \s-1BLAST\s0 programs are a family
of widely used algorithms for sequence database searches. The reports are
non-trivial to parse, and there are differences in the formats of the various
flavors of \s-1BLAST\s0. BPlite parses \s-1BLASTN\s0, \s-1BLASTP\s0, \s-1BLASTX\s0, \s-1TBLASTN\s0, and \s-1TBLASTX\s0
reports from both the high performance \s-1WU\-BLAST\s0, and the more generic
\&\s-1NCBI\-BLAST\s0.
.PP
Many people have developed \s-1BLAST\s0 parsers (I myself have made at least three).
BPlite is for those people who would rather not have a giant object
specification, but rather a simple handle to a \s-1BLAST\s0 report that works well
in pipes.
.Sh "Object"
.IX Subsection "Object"
BPlite has three kinds of objects, the report, the subject, and the \s-1HSP\s0. To
create a new report, you pass a filehandle reference to the BPlite constructor.
.PP
.Vb 1
\& my $report = new Bio::Tools::BPlite(-fh=>\e*STDIN); # or any other filehandle
.Ve
.PP
The report has two attributes (query and database), and one method (nextSbjct).
.PP
.Vb 6
\& $report->query;     # access to the query name
\& $report->database;  # access to the database name
\& $report->nextSbjct; # gets the next subject
\& while(my $sbjct = $report->nextSbjct) {
\&     # canonical form of use is in a while loop
\& }
.Ve
.PP
A subject is a \s-1BLAST\s0 hit, which should not be confused with an \s-1HSP\s0 (below). A
\&\s-1BLAST\s0 hit may have several alignments associated with it. A useful way of
thinking about it is that a subject is a gene and HSPs are the exons. Subjects
have one attribute (name) and one method (nextHSP).
.PP
.Vb 5
\& $sbjct->name;    # access to the subject name
\& $sbjct->nextHSP; # gets the next HSP from the sbjct
\& while(my $hsp = $sbjct->nextHSP) {
\&     # canonical form is again a while loop
\& }
.Ve
.PP
An \s-1HSP\s0 is a high scoring pair, or simply an alignment.  \s-1HSP\s0 objects
inherit all the useful methods from RangeI/SeqFeatureI/FeaturePair,
but provide an additional set of attributes (score, bits, percent, P,
match, \s-1EXP\s0, positive, length, querySeq, sbjctSeq, homologySeq) that
should be familiar to anyone who has seen a blast report.
.PP
For lazy/efficient coders, two-letter abbreviations are available for the 
attributes with long names (qs, ss, hs). Ranges of the aligned sequences in
query/subject and other information (like seqname) are stored
in SeqFeature objects (i.e.: \f(CW$hsp\fR\->query, \f(CW$hsp\fR\->subject which is equal to
\&\f(CW$hsp\fR\->feature1, \f(CW$hsp\fR\->feature2). querySeq, sbjctSeq and homologySeq do only
contain the alignment sequences from the blast report.
.PP
.Vb 18
\& $hsp->score;
\& $hsp->bits;
\& $hsp->percent;
\& $hsp->P;
\& $hsp->match;
\& $hsp->positive;
\& $hsp->length;
\& $hsp->querySeq;      $hsp->qs;
\& $hsp->sbjctSeq;      $hsp->ss;
\& $hsp->homologySeq;   $hsp->hs;
\& $hsp->query->start;
\& $hsp->query->end;
\& $hsp->query->seq_id;
\& $hsp->hit->primary_tag; # "similarity"
\& $hsp->hit->source_tag;  # "BLAST"
\& $hsp->hit->start;
\& $hsp->hit->end;
\& ...
.Ve
.PP
So a very simple look into a \s-1BLAST\s0 report might look like this.
.PP
.Vb 7
\& my $report = new Bio::Tools::BPlite(-fh=>\e*STDIN);
\& while(my $sbjct = $report->nextSbjct) {
\&     print ">",$sbjct->name,"\en";
\&     while(my $hsp = $sbjct->nextHSP) {
\&                print "\et",$hsp->start,"..",$hsp->end," ",$hsp->bits,"\en";
\&     }
\& }
.Ve
.PP
The output of such code might look like this:
.PP
.Vb 6
\& >foo
\&     100..155 29.5
\&     268..300 20.1
\& >bar
\&     100..153 28.5
\&     265..290 22.1
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Ian Korf (ikorf@sapiens.wustl.edu, http://sapiens.wustl.edu/~ikorf), 
Lorenz Pollak (lorenz@ist.org, bioperl port)
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This software was developed at the Genome Sequencing Center at Washington
Univeristy, St. Louis, \s-1MO\s0.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason@cgt.mc.duke.edu
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1999 Ian Korf. All Rights Reserved.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Function: Create a new Bio::Tools::BPlite object
\& Returns : Bio::Tools::BPlite
\& Args    : -file     input file (alternative to -fh)
\&           -fh       input stream (alternative to -file)
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 10
\& Title   : next_feature
\& Usage   : while( my $feat = $res->next_feature ) { # do something }
\& Function: SeqAnalysisParserI implementing function. This implementation
\&           iterates over all HSPs. If the HSPs of the current subject match
\&           are exhausted, it will automatically call nextSbjct().
\& Example :
\& Returns : A Bio::SeqFeatureI compliant object, in this case a
\&           Bio::Tools::BPlite::HSP object, and FALSE if there are no more
\&           HSPs.
\& Args    : None
.Ve
.Sh "query"
.IX Subsection "query"
.Vb 6
\& Title    : query
\& Usage    : $query = $obj->query();
\& Function : returns the query object
\& Example  :
\& Returns  : query object
\& Args     :
.Ve
.Sh "qlength"
.IX Subsection "qlength"
.Vb 6
\& Title    : qlength
\& Usage    : $len = $obj->qlength();
\& Function : returns the length of the query 
\& Example  :
\& Returns  : length of query
\& Args     :
.Ve
.Sh "pattern"
.IX Subsection "pattern"
.Vb 3
\& Title    : pattern
\& Usage    : $pattern = $obj->pattern();
\& Function : returns the pattern used in a PHIBLAST search
.Ve
.Sh "query_pattern_location"
.IX Subsection "query_pattern_location"
.Vb 4
\& Title    : query_pattern_location
\& Usage    : $qpl = $obj->query_pattern_location();
\& Function : returns reference to array of locations in the query sequence
\&            of pattern used in a PHIBLAST search
.Ve
.Sh "database"
.IX Subsection "database"
.Vb 6
\& Title    : database
\& Usage    : $db = $obj->database();
\& Function : returns the database used in this search
\& Example  :
\& Returns  : database used for search
\& Args     :
.Ve
.Sh "nextSbjct"
.IX Subsection "nextSbjct"
.Vb 7
\& Title    : nextSbjct
\& Usage    : $sbjct = $obj->nextSbjct();
\& Function : Method of iterating through all the Sbjct retrieved 
\&            from parsing the report 
\& Example  : while ( my $sbjct = $obj->nextSbjct ) {}
\& Returns  : next Sbjct object or null if finished
\& Args     :
.Ve
