.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::InstanceSite 3"
.TH Bio::Matrix::PSM::InstanceSite 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Matrix::PSM::InstanceSite \- A PSM site occurance
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Matrix::PSM::InstanceSite;
.Ve
.PP
.Vb 1
\&  #You can get an InstanceSite object either from a file:
.Ve
.PP
.Vb 1
\&  my ($instances,$matrix)=$SomePSMFile->parse_next;
.Ve
.PP
.Vb 1
\&  #or from memory
.Ve
.PP
.Vb 4
\&  my %params=(seq=>'TATAAT',
\&    id=>"TATAbox1", accession=>'ENSG00000122304', mid=>'TB1',
\&    desc=>'TATA box, experimentally verified in PRM1 gene',
\&    -relpos=>-35, -anchor=>'CHR7', -start=>35000921, -end=>35000926);
.Ve
.PP
.Vb 2
\&  #Last 2 arguments are passed to create a Bio::LocatableSeq object
\&  #Anchor shows the coordinates system for the Bio::LocatableSeq object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Abstract interface to \s-1PSM\s0 site occurrence (\s-1PSM\s0 sequence
match). InstanceSite objects may be used to describe a \s-1PSM\s0 (See
Bio::Matrix::PSM::SiteMatrix) sequence matches.  The usual
characteristic of such a match is sequence coordinates, score,
sequence and sequence (gene) identifier\- accession number or other id.
.PP
This object inherits from Bio::LocatableSeq (which defines the real
sequence) and might hold a SiteMatrix object, used to detect the \s-1CRE\s0
(cis\-regulatory element), or created from this \s-1CRE\s0.
.PP
While the documentation states that the motif id and gene id
(accession) combination should be unique, this is not entirely true\-
there might be more than one occurrence of the same cis-regulatory
element in the upstream region of the same gene.  Therefore relpos
would be the third element to create a really unique combination.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.Sh "Description"
.IX Subsection "Description"
Bio::Matrix::PSM::InstanceSiteI implementation
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
.Sh "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $isntance=new Bio::Matrix::PSM::InstanceSite 
\&                         (-seq=>'TATAAT', -id=>"TATAbox1",
\&                          -accession_number='ENSG00000122304', -mid=>'TB1',
\&                          -desc=>'TATA box, experimentally verified in PRM1 gene',
\&                          -relpos=>-35, -anchor=>'CHR7', -start=>35000921, -end=>35000926, strand=>1)
\& Function: Creates an InstanceSite object from memory.
\& Throws  :
\& Example :
\& Returns : Bio::Matrix::PSM::InstanceSite object
\& Args    : hash
.Ve
.Sh "mid"
.IX Subsection "mid"
.Vb 7
\& Title   : mid
\& Usage   : my $mid=$instance->mid;
\& Function: Get/Set the motif id
\& Throws  :
\& Example :
\& Returns : scalar
\& Args    : scalar
.Ve
.Sh "score"
.IX Subsection "score"
.Vb 8
\& Title   : score
\& Usage   : my $score=$instance->score;
\& Function: Get/Set the score (mismatches) between the instance and the attached (or
\&            initial) PSM
\& Throws  :
\& Example :
\& Returns : real number
\& Args    : real number
.Ve
.Sh "anchor"
.IX Subsection "anchor"
.Vb 7
\& Title   : anchor
\& Usage   : my $anchor=$instance->anchor;
\& Function: Get/Set the anchor which shows what coordinate system start/end use
\& Throws  :
\& Example :
\& Returns : string
\& Args    : string
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 7
\& Title   : start
\& Usage   : my $start=$instance->start;
\& Function: Get/Set the position of the instance on the sequence used
\& Throws  :
\& Example :
\& Returns : integer
\& Args    : integer
.Ve
.Sh "minstance"
.IX Subsection "minstance"
.Vb 8
\& Title   : minstance
\& Usage   : my $minstance=$misntance->score;
\& Function: Get/Set the unique identifier- sequence id/motif id, for example PRM1_TATAbox.
\&          Not necessarily human readable.
\& Throws  :
\& Example :
\& Returns : string
\& Args    : string
.Ve
.Sh "relpos"
.IX Subsection "relpos"
.Vb 8
\& Title   : relpos
\& Usage   : my $seqpos=$instance->relpos;
\& Function: Get/Set the relative position of the instance with respect to the transcription start
\&            site (if known). Can and usually is negative.
\& Throws  :
\& Example :
\& Returns : integer
\& Args    : integer
.Ve
.Sh "annotation"
.IX Subsection "annotation"
.Vb 5
\& Title   : annotation
\& Usage   : $ann = $seq->annotation or $seq->annotation($annotation)
\& Function: Gets or sets the annotation
\& Returns : L<Bio::AnnotationCollectionI> object
\& Args    : None or L<Bio::AnnotationCollectionI> object
.Ve
.PP
See Bio::AnnotationCollectionI and Bio::Annotation::Collection
for more information
.Sh "species"
.IX Subsection "species"
.Vb 5
\& Title   : species
\& Usage   : $species = $seq->species() or $seq->species($species)
\& Function: Gets or sets the species
\& Returns : L<Bio::Species> object
\& Args    : None or L<Bio::Species> object
.Ve
.PP
See Bio::Species for more information
.Sh "frame"
.IX Subsection "frame"
.Vb 8
\& Title   : frame
\& Usage   : my $frane=$instance->frame;
\& Function: Get/Set the frame of a DNA instance with respect to a protein motif used.
\&            Returns undef if the motif was not protein or the DB is protein.
\& Throws  :
\& Example :
\& Returns : integer
\& Args    : integer (0, 1, 2)
.Ve
