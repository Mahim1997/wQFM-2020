.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::embl 3"
.TH Bio::SeqIO::embl 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::embl \- EMBL sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
It is probably best not to use this object directly, but
rather go through the SeqIO handler system. Go:
.PP
.Vb 1
\&    $stream = Bio::SeqIO->new(-file => $filename, -format => 'EMBL');
.Ve
.PP
.Vb 3
\&    while ( (my $seq = $stream->next_seq()) ) {
\&            # do something with $seq
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Seq objects to and from \s-1EMBL\s0 flat
file databases.
.PP
There is a lot of flexibility here about how to dump things which
should be documented more fully.
.PP
There should be a common object that this and Genbank share (probably
with Swissprot). Too much of the magic is identical.
.Sh "Optional functions"
.IX Subsection "Optional functions"
.IP "\fI_show_dna()\fR" 3
.IX Item "_show_dna()"
(output only) shows the dna or not
.IP "\fI_post_sort()\fR" 3
.IX Item "_post_sort()"
(output only) provides a sorting func which is applied to the FTHelpers
before printing
.IP "\fI_id_generation_func()\fR" 3
.IX Item "_id_generation_func()"
This is function which is called as
.Sp
.Vb 1
\&   print "ID   ", $func($annseq), "\en";
.Ve
.Sp
To generate the \s-1ID\s0 line. If it is not there, it generates a sensible \s-1ID\s0
line using a number of tools.
.Sp
If you want to output annotations in \s-1EMBL\s0 format they need to be
stored in a Bio::Annotation::Collection object which is accessible
through the Bio::SeqI interface method \fIannotation()\fR.
.Sp
The following are the names of the keys which are polled from a
Bio::Annotation::Collection object.
.Sp
.Vb 3
\& reference  - Should contain Bio::Annotation::Reference objects
\& comment    - Should contain Bio::Annotation::Comment objects
\& dblink     - Should contain Bio::Annotation::DBLink objects
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $seq = $stream->next_seq()
\& Function: returns the next sequence in the stream
\& Returns : Bio::Seq object
\& Args    :
.Ve
.Sh "_write_ID_line"
.IX Subsection "_write_ID_line"
.Vb 8
\& Title   : _write_ID_line
\& Usage   : $self->_write_ID_line($seq);
\& Function: Writes the EMBL Release 87 format ID line to the stream, unless
\&         : there is a user-supplied ID line generation function in which
\&         : case that is used instead.
\&         : ( See Bio::SeqIO::embl::_id_generation_function(). )
\& Returns : nothing
\& Args    : Bio::Seq object
.Ve
.Sh "_is_valid_division"
.IX Subsection "_is_valid_division"
.Vb 5
\& Title   : _is_valid_division
\& Usage   : $self->_is_valid_division($div)
\& Function: tests division code for validity
\& Returns : true if $div is a valid EMBL release 87 taxonomic division.
\& Args    : taxonomic division code string
.Ve
.Sh "_is_valid_molecule_type"
.IX Subsection "_is_valid_molecule_type"
.Vb 5
\& Title   : _is_valid_molecule_type
\& Usage   : $self->_is_valid_molecule_type($mol)
\& Function: tests molecule type for validity
\& Returns : true if $mol is a valid EMBL release 87 molecule type.
\& Args    : molecule type string
.Ve
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream->write_seq($seq)
\& Function: writes the $seq object (must be seq) to the stream
\& Returns : 1 for success and undef for error
\& Args    : array of 1 to n Bio::SeqI objects
.Ve
.Sh "_print_EMBL_FTHelper"
.IX Subsection "_print_EMBL_FTHelper"
.Vb 5
\& Title   : _print_EMBL_FTHelper
\& Usage   :
\& Function: Internal function
\& Returns : 1 if writing suceeded, otherwise undef
\& Args    :
.Ve
.Sh "_read_EMBL_Species"
.IX Subsection "_read_EMBL_Species"
.Vb 7
\& Title   : _read_EMBL_Species
\& Usage   :
\& Function: Reads the EMBL Organism species and classification
\&           lines.
\& Example :
\& Returns : A Bio::Species object
\& Args    : a reference to the current line buffer, accession number
.Ve
.Sh "_read_EMBL_DBLink"
.IX Subsection "_read_EMBL_DBLink"
.Vb 6
\& Title   : _read_EMBL_DBLink
\& Usage   :
\& Function: Reads the EMBL database cross reference ("DR") lines
\& Example :
\& Returns : A list of Bio::Annotation::DBLink objects
\& Args    :
.Ve
.Sh "_filehandle"
.IX Subsection "_filehandle"
.Vb 6
\& Title   : _filehandle
\& Usage   : $obj->_filehandle($newval)
\& Function:
\& Example :
\& Returns : value of _filehandle
\& Args    : newvalue (optional)
.Ve
.Sh "_read_FTHelper_EMBL"
.IX Subsection "_read_FTHelper_EMBL"
.Vb 6
\& Title   : _read_FTHelper_EMBL
\& Usage   : _read_FTHelper_EMBL($buffer)
\& Function: reads the next FT key line
\& Example :
\& Returns : Bio::SeqIO::FTHelper object
\& Args    : filehandle and reference to a scalar
.Ve
.Sh "_write_line_EMBL"
.IX Subsection "_write_line_EMBL"
.Vb 6
\& Title   : _write_line_EMBL
\& Usage   :
\& Function: internal function
\& Example :
\& Returns : 1 if writing suceeded, else undef
\& Args    :
.Ve
.Sh "_write_line_EMBL_regex"
.IX Subsection "_write_line_EMBL_regex"
.Vb 9
\& Title   : _write_line_EMBL_regex
\& Usage   :
\& Function: internal function for writing lines of specified
\&           length, with different first and the next line
\&           left hand headers and split at specific points in the
\&           text
\& Example :
\& Returns : nothing
\& Args    : file handle, first header, second header, text-line, regex for line breaks, total line length
.Ve
.Sh "_post_sort"
.IX Subsection "_post_sort"
.Vb 5
\& Title   : _post_sort
\& Usage   : $obj->_post_sort($newval)
\& Function:
\& Returns : value of _post_sort
\& Args    : newvalue (optional)
.Ve
.Sh "_show_dna"
.IX Subsection "_show_dna"
.Vb 5
\& Title   : _show_dna
\& Usage   : $obj->_show_dna($newval)
\& Function:
\& Returns : value of _show_dna
\& Args    : newvalue (optional)
.Ve
.Sh "_id_generation_func"
.IX Subsection "_id_generation_func"
.Vb 5
\& Title   : _id_generation_func
\& Usage   : $obj->_id_generation_func($newval)
\& Function:
\& Returns : value of _id_generation_func
\& Args    : newvalue (optional)
.Ve
.Sh "_ac_generation_func"
.IX Subsection "_ac_generation_func"
.Vb 5
\& Title   : _ac_generation_func
\& Usage   : $obj->_ac_generation_func($newval)
\& Function:
\& Returns : value of _ac_generation_func
\& Args    : newvalue (optional)
.Ve
.Sh "_sv_generation_func"
.IX Subsection "_sv_generation_func"
.Vb 5
\& Title   : _sv_generation_func
\& Usage   : $obj->_sv_generation_func($newval)
\& Function:
\& Returns : value of _sv_generation_func
\& Args    : newvalue (optional)
.Ve
.Sh "_kw_generation_func"
.IX Subsection "_kw_generation_func"
.Vb 5
\& Title   : _kw_generation_func
\& Usage   : $obj->_kw_generation_func($newval)
\& Function:
\& Returns : value of _kw_generation_func
\& Args    : newvalue (optional)
.Ve
