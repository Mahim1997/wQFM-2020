.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::bl2seq 3"
.TH Bio::AlignIO::bl2seq 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::AlignIO::bl2seq \- bl2seq sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::AlignIO class, as in:
.PP
.Vb 1
\&    use Bio::AlignIO;
.Ve
.PP
.Vb 4
\&    $in  = Bio::AlignIO->new(-file   => "inputfilename" ,
\&                             -format => "bl2seq",
\&                             -report_type => "blastn");
\&    $aln = $in->next_aln();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can create Bio::SimpleAlign sequence alignment objects (of
two sequences) from \f(CW\*(C`bl2seq\*(C'\fR \s-1BLAST\s0 reports.
.PP
A nice feature of this module is that \- in combination with
Bio::Tools::Run::StandAloneBlast.pm or a remote \s-1BLAST\s0 \- it can be used to
align two sequences and make a Bio::SimpleAlign object from them which
can then be manipulated using any Bio::SimpleAlign methods, eg:
.PP
.Vb 4
\&   # Get two sequences
\&   $str = Bio::SeqIO->new(-file=>'t/amino.fa' , '-format' => 'Fasta', );
\&   my $seq3 = $str->next_seq();
\&   my $seq4 = $str->next_seq();
.Ve
.PP
.Vb 5
\&   # Run bl2seq on them
\&   $factory = Bio::Tools::StandAloneBlast->new('program' => 'blastp',
\&                                               'outfile' => 'bl2seq.out');
\&   my $bl2seq_report = $factory->bl2seq($seq3, $seq4);
\&   # Note that report is a Bio::SearchIO object
.Ve
.PP
.Vb 3
\&   # Use AlignIO.pm to create a SimpleAlign object from the bl2seq report
\&   $str = Bio::AlignIO->new(-file=> 'bl2seq.out','-format' => 'bl2seq');
\&   $aln = $str->next_aln();
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Peter Schattner"
.IX Header "AUTHOR - Peter Schattner"
Email: schattner@alum.mit.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $alignio = Bio::SimpleAlign->new(-format => 'bl2seq',
\&                                               -file   => 'filename',
\&                                               -report_type => 'blastx');
\& Function: Get a L<Bio::SimpleAlign>
\& Returns : L<Bio::SimpleAlign> object
\& Args    : -report_type => report type (blastn,blastx,tblastx,tblastn,blastp)
.Ve
.Sh "next_aln"
.IX Subsection "next_aln"
.Vb 6
\& Title   : next_aln
\& Usage   : $aln = $stream->next_aln()
\& Function: returns the next alignment in the stream.
\& Returns : L<Bio::Align::AlignI> object on success,
\&           undef on error or end of file
\& Args    : none
.Ve
.Sh "write_aln (\s-1NOT\s0 \s-1IMPLEMENTED\s0)"
.IX Subsection "write_aln (NOT IMPLEMENTED)"
.Vb 5
\& Title   : write_aln
\& Usage   : $stream->write_aln(@aln)
\& Function: writes the $aln object into the stream in bl2seq format
\& Returns : 1 for success and 0 for error
\& Args    : L<Bio::Align::AlignI> object
.Ve
.Sh "report_type"
.IX Subsection "report_type"
.Vb 5
\& Title   : report_type
\& Usage   : $obj->report_type($newval)
\& Function: Sets the report type (blastn, blastp...)
\& Returns : value of report_type (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
