.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::LiveSeq::Mutator 3"
.TH Bio::LiveSeq::Mutator 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::LiveSeq::Mutator \- Package mutating LiveSequences
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  # $gene is a Bio::LiveSeq::Gene object
\&  my $mutate = Bio::LiveSeq::Mutator->new('-gene' => $gene,
\&                                          '-numbering' => "coding"
\&                                           );
\&  # $mut is a Bio::LiveSeq::Mutation object
\&  $mutate->add_Mutation($mut);
\&  # $results is a Bio::Variation::SeqDiff object
\&  my $results=$mutate->change_gene();
\&  if ($results) {
\&      my $out = Bio::Variation::IO->new( '-format' => 'flat');
\&      $out->write($results);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class mutates Bio::LiveSeq::Gene objects and returns a
Bio::Variation::SeqDiff object. Mutations are described as
Bio::LiveSeq::Mutation objects. See Bio::LiveSeq::Gene,
Bio::Variation::SeqDiff, and Bio::LiveSeq::Mutation for details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho & Joseph A.L. Insana"
.IX Header "AUTHOR - Heikki Lehvaslaiho & Joseph A.L. Insana"
.Vb 2
\&  Email:  heikki-at-bioperl-dot-org
\&          insana@ebi.ac.uk, jinsana@gmx.net
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
.Vb 2
\&  The rest of the documentation details each of the object
\&  methods. Internal methods are usually preceded with a _
.Ve
.Sh "gene"
.IX Subsection "gene"
.Vb 4
\& Title   : gene
\& Usage   : $mutobj = $obj->gene;
\&         : $mutobj = $obj->gene($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the link-reference to a
\&           Bio::LiveSeq::Gene object. If no value has ben set, it
\&           will return undef
.Ve
.PP
.Vb 2
\& Returns : an object reference  or undef
\& Args    : a Bio::LiveSeq::Gene
.Ve
.PP
See Bio::LiveSeq::Gene for more information.
.Sh "numbering"
.IX Subsection "numbering"
.Vb 3
\& Title   : numbering
\& Usage   : $obj->numbering();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns coordinate system used in positioning the
\&            mutations. See L<change_gene> for details.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : string
\& Args    : string (coding [transcript number] | gene | entry)
.Ve
.Sh "add_Mutation"
.IX Subsection "add_Mutation"
.Vb 6
\& Title   : add_Mutation
\& Usage   : $self->add_Mutation($ref)
\& Function: adds a Bio::LiveSeq::Mutation object
\& Example :
\& Returns :
\& Args    : a Bio::LiveSeq::Mutation
.Ve
.PP
See Bio::LiveSeq::Mutation for more information.
.Sh "each_Mutation"
.IX Subsection "each_Mutation"
.Vb 6
\& Title   : each_Mutation
\& Usage   : foreach $ref ( $a->each_Mutation )
\& Function: gets an array of Bio::LiveSeq::Mutation objects
\& Example :
\& Returns : array of Mutations
\& Args    :
.Ve
.PP
See Bio::LiveSeq::Mutation for more information.
.Sh "mutation"
.IX Subsection "mutation"
.Vb 4
\& Title   : mutation
\& Usage   : $mutobj = $obj->mutation;
\&         : $mutobj = $obj->mutation($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the link-reference to the current mutation
\&           object.  If the value is not set, it will return undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : an object reference  or undef
.Ve
.Sh "\s-1DNA\s0"
.IX Subsection "DNA"
.Vb 4
\& Title   : DNA
\& Usage   : $mutobj = $obj->DNA;
\&         : $mutobj = $obj->DNA($objref);
\& Function:
.Ve
.PP
.Vb 4
\&           Returns or sets the reference to the LiveSeq object holding
\&           the reference sequence. If there is no link, it will return
\&           undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : an object reference or undef
.Ve
.Sh "\s-1RNA\s0"
.IX Subsection "RNA"
.Vb 4
\& Title   : RNA
\& Usage   : $mutobj = $obj->RNA;
\&         : $mutobj = $obj->RNA($objref);
\& Function:
.Ve
.PP
.Vb 4
\&           Returns or sets the reference to the LiveSeq object holding
\&           the reference sequence. If the value is not set, it will return
\&           undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : an object reference  or undef
.Ve
.Sh "dnamut"
.IX Subsection "dnamut"
.Vb 4
\& Title   : dnamut
\& Usage   : $mutobj = $obj->dnamut;
\&         : $mutobj = $obj->dnamut($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the reference to the current DNAMutation object.
\&           If the value is not set, it will return undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : a Bio::Variation::DNAMutation object or undef
.Ve
.PP
See Bio::Variation::DNAMutation for more information.
.Sh "rnachange"
.IX Subsection "rnachange"
.Vb 4
\& Title   : rnachange
\& Usage   : $mutobj = $obj->rnachange;
\&         : $mutobj = $obj->rnachange($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the reference to the current RNAChange object.
\&           If the value is not set, it will return undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : a Bio::Variation::RNAChange object or undef
.Ve
.PP
See Bio::Variation::RNAChange for more information.
.Sh "aachange"
.IX Subsection "aachange"
.Vb 4
\& Title   : aachange
\& Usage   : $mutobj = $obj->aachange;
\&         : $mutobj = $obj->aachange($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the reference to the current AAChange object.
\&           If the value is not set, it will return undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : a Bio::Variation::AAChange object or undef
.Ve
.PP
See Bio::Variation::AAChange for more information.
.Sh "exons"
.IX Subsection "exons"
.Vb 4
\& Title   : exons
\& Usage   : $mutobj = $obj->exons;
\&         : $mutobj = $obj->exons($objref);
\& Function:
.Ve
.PP
.Vb 3
\&           Returns or sets the reference to a current array of Exons.
\&           If the value is not set, it will return undef.
\&           Internal method.
.Ve
.PP
.Vb 1
\& Returns : an array of Bio::LiveSeq::Exon objects or undef
.Ve
.PP
See Bio::LiveSeq::Exon for more information.
.Sh "change_gene_with_alignment"
.IX Subsection "change_gene_with_alignment"
.Vb 2
\& Title   : change_gene_with_alignment
\& Usage   : $results=$mutate->change_gene_with_alignment($aln);
.Ve
.PP
.Vb 1
\& Function:
.Ve
.PP
.Vb 5
\&           Returns a Bio::Variation::SeqDiff object containing the
\&           results of the changes in the alignment. The alignment has
\&           to be pairwise and have one sequence named 'QUERY', the
\&           other one is assumed to be a part of the sequence from
\&           $gene.
.Ve
.PP
.Vb 3
\&           This method offers a shortcut to change_gene and
\&           automates the creation of Bio::LiveSeq::Mutation objects.
\&           Use it with almost identical sequnces, e.g. to locate a SNP.
.Ve
.PP
.Vb 2
\& Args    : Bio::SimpleAlign object representing a short local alignment
\& Returns : Bio::Variation::SeqDiff object or 0 on error
.Ve
.PP
See Bio::LiveSeq::Mutation, Bio::SimpleAlign, and
Bio::Variation::SeqDiff  for more information.
.Sh "create_mutation"
.IX Subsection "create_mutation"
.Vb 3
\& Title   : create_mutation
\& Usage   : 
\& Function:
.Ve
.PP
.Vb 3
\&           Formats sequence differences from two sequences into
\&           Bio::LiveSeq::Mutation objects which can be applied to a
\&           gene.
.Ve
.PP
.Vb 3
\&           To keep it generic, sequence arguments need not to be
\&           Bio::LocatableSeq. Coordinate change to parent sequence
\&           numbering needs to be done by the calling code.
.Ve
.PP
.Vb 1
\&           Called from change_gene_with_alignment
.Ve
.PP
.Vb 5
\& Args    : Bio::PrimarySeqI inheriting object for the reference sequence
\&           Bio::PrimarySeqI inheriting object for the query sequence
\&           integer for the start position of the local sequence difference
\&           integer for the length of the sequence difference
\& Returns : Bio::LiveSeq::Mutation object
.Ve
.Sh "change_gene"
.IX Subsection "change_gene"
.Vb 7
\& Title   : change_gene
\& Usage   : my $mutate = Bio::LiveSeq::Mutator->new(-gene => $gene,
\&                                                   numbering => "coding"
\&                                                   );
\&           # $mut is Bio::LiveSeq::Mutation object
\&           $mutate->add_Mutation($mut);
\&           my $results=$mutate->change_gene();
.Ve
.PP
.Vb 1
\& Function:
.Ve
.PP
.Vb 5
\&           Returns a Bio::Variation::SeqDiff object containing the
\&           results of the changes performed according to the
\&           instructions present in Mutation(s).  The -numbering
\&           argument decides what molecule is being changed and what
\&           numbering scheme being used:
.Ve
.PP
.Vb 1
\&            -numbering => "entry"
.Ve
.PP
.Vb 2
\&               determines the DNA level, using the numbering from the
\&               beginning of the sequence
.Ve
.PP
.Vb 1
\&            -numbering => "coding"
.Ve
.PP
.Vb 2
\&               determines the RNA level, using the numbering from the
\&               beginning of the 1st transcript
.Ve
.PP
.Vb 2
\&               Alternative transcripts can be used by specifying
\&               "coding 2" or "coding 3" ...
.Ve
.PP
.Vb 1
\&            -numbering => "gene"
.Ve
.PP
.Vb 4
\&               determines the DNA level, using the numbering from the
\&               beginning of the 1st transcript and inluding introns.
\&               The meaning equals 'coding' if the reference molecule
\&               is cDNA.
.Ve
.PP
.Vb 4
\& Args    : Bio::LiveSeq::Gene object
\&           Bio::LiveSeq::Mutation object(s)
\&           string specifying a numbering scheme (defaults to 'coding')
\& Returns : Bio::Variation::SeqDiff object or 0 on error
.Ve
.Sh "_mutationpos2label"
.IX Subsection "_mutationpos2label"
.Vb 6
\& Title   : _mutationpos2label
\& Usage   :
\& Function: converts mutation positions into labels
\& Example :
\& Returns : number of valid mutations
\& Args    : LiveSeq sequence object
.Ve
.Sh "_set_DNAMutation"
.IX Subsection "_set_DNAMutation"
.Vb 3
\& Title   : _set_DNAMutation
\& Usage   :
\& Function:
.Ve
.PP
.Vb 3
\&           Stores DNA level mutation attributes before mutation into
\&           Bio::Variation::DNAMutation object.  Links it to SeqDiff
\&           object.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : Bio::Variation::DNAMutation object
\& Args    : Bio::Variation::SeqDiff object
.Ve
.PP
See Bio::Variation::DNAMutation and Bio::Variation::SeqDiff.
.Sh "_set_effects"
.IX Subsection "_set_effects"
.Vb 3
\& Title   : _set_effects
\& Usage   :
\& Function:
.Ve
.PP
.Vb 4
\&           Stores RNA and AA level mutation attributes before mutation
\&           into Bio::Variation::RNAChange and
\&           Bio::Variation::AAChange objects.  Links them to
\&           SeqDiff object.
.Ve
.PP
.Vb 4
\& Example :
\& Returns :
\& Args    : Bio::Variation::SeqDiff object
\&           Bio::Variation::DNAMutation object
.Ve
.PP
See Bio::Variation::RNAChange, Bio::Variation::RNAChange,
Bio::Variation::SeqDiff, and Bio::Variation::DNAMutation.
.Sh "_untranslated"
.IX Subsection "_untranslated"
.Vb 3
\& Title   : _untranslated
\& Usage   :
\& Function:
.Ve
.PP
.Vb 3
\&           Stores RNA change attributes before mutation
\&           into Bio::Variation::RNAChange object.  Links it to
\&           SeqDiff object.
.Ve
.PP
.Vb 4
\& Example :
\& Returns :
\& Args    : Bio::Variation::SeqDiff object
\&           Bio::Variation::DNAMutation object
.Ve
.PP
See Bio::Variation::RNAChange, Bio::Variation::SeqDiff and
Bio::Variation::DNAMutation for details.
