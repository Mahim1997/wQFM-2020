.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Gene::TranscriptI 3"
.TH Bio::SeqFeature::Gene::TranscriptI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeature::Gene::TranscriptI \- Interface for a feature representing a
         transcript of exons, promoter(s), UTR, and a poly\-adenylation site.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #documentation needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A feature representing a transcript.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "promoters"
.IX Subsection "promoters"
.Vb 3
\& Title   : promoters()
\& Usage   : @proms = $transcript->promoters();
\& Function: Get the promoter features of this transcript.
.Ve
.PP
.Vb 3
\&           Note that OO-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
.Ve
.PP
.Vb 3
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           promoter regions or sites.
\& Args    :
.Ve
.Sh "exons"
.IX Subsection "exons"
.Vb 5
\& Title   : exons()
\& Usage   : @exons = $transcript->exons();
\&           @inital = $transcript->exons('Initial');
\& Function: Get the individual exons this transcript comprises of, or all exons
\&           of a specified type.
.Ve
.PP
.Vb 2
\&           Refer to the documentation of the class that produced this 
\&           transcript object for information about the possible types.
.Ve
.PP
.Vb 2
\&           See Bio::SeqFeature::Gene::ExonI for properties of the
\&           returned objects.
.Ve
.PP
.Vb 2
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects
\& Args    : An optional string specifying the type of the exon.
.Ve
.Sh "introns"
.IX Subsection "introns"
.Vb 6
\& Title   : introns()
\& Usage   : @introns = $transcript->introns();
\& Function: Get all introns this transcript comprises of.
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           introns.
\& Args    :
.Ve
.Sh "poly_A_site"
.IX Subsection "poly_A_site"
.Vb 5
\& Title   : poly_A_site()
\& Usage   : $polyAsite = $transcript->poly_A_site();
\& Function: Get the poly-adenylation site of this transcript.
\& Returns : A Bio::SeqFeatureI implementing object.
\& Args    :
.Ve
.Sh "utrs"
.IX Subsection "utrs"
.Vb 3
\& Title   : utrs()
\& Usage   : @utr_sites = $transcript->utrs();
\& Function: Get the UTR regions this transcript comprises of.
.Ve
.PP
.Vb 2
\&           See Bio::SeqFeature::Gene::ExonI for properties of the
\&           returned objects.
.Ve
.PP
.Vb 2
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects
\& Args    :
.Ve
.Sh "mrna"
.IX Subsection "mrna"
.Vb 3
\& Title   : mrna()
\& Usage   : $mrna = $transcript->mrna();
\& Function: Get the mRNA of the transcript as a sequence object.
.Ve
.PP
.Vb 2
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.Sh "cds"
.IX Subsection "cds"
.Vb 4
\& Title   : cds()
\& Usage   : $cds = $transcript->cds();
\& Function: Get the CDS (coding sequence) of the transcript as a sequence
\&           object.
.Ve
.PP
.Vb 2
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.Sh "protein"
.IX Subsection "protein"
.Vb 3
\& Title   : protein()
\& Usage   : $protein = $transcript->protein();
\& Function: Get the protein encoded by the transcript as a sequence object.
.Ve
.PP
.Vb 2
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.Sh "parent"
.IX Subsection "parent"
.Vb 5
\& Title   : parent
\& Usage   : $obj->parent($newval)
\& Function: get the parent gene of the transcript
\& Returns : value of parent - a Bio::SeqFeature::Gene::GeneStructureI-compliant object
\& Args    : a Bio::SeqFeature::Gene::GeneStructureI-compliant object (optional)
.Ve
