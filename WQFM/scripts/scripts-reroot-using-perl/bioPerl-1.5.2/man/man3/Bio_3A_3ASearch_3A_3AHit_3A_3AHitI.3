.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::Hit::HitI 3"
.TH Bio::Search::Hit::HitI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::Hit::HitI \- Interface for a hit in a similarity search result
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# Bio::Search::Hit::HitI objects should not be instantiated since this
# module defines a pure interface.
.PP
# Given an object that implements the Bio::Search::Hit::HitI  interface,
# you can do the following things with it:
.PP
.Vb 5
\&    # Get a HitI object from a SearchIO stream:
\&    use Bio::SeachIO;
\&    my $searchio = new Bio::SearchIO(-format => 'blast', -file => 'result.bls');
\&    my $result = $searchio->next_result;
\&    my $hit    = $result->next_hit;
.Ve
.PP
.Vb 1
\&    $hit_name = $hit->name();
.Ve
.PP
.Vb 1
\&    $desc = $hit->description();
.Ve
.PP
.Vb 1
\&    $len = $hit->length
.Ve
.PP
.Vb 1
\&    $alg = $hit->algorithm();
.Ve
.PP
.Vb 1
\&    $score = $hit->raw_score();
.Ve
.PP
.Vb 1
\&    $significance = $hit->significance();
.Ve
.PP
.Vb 1
\&    $rank = $hit->rank(); # the Nth hit for a specific query
.Ve
.PP
.Vb 1
\&    while( $hsp = $obj->next_hsp()) { ... } # process in iterator fashion
.Ve
.PP
.Vb 1
\&    for my $hsp ( $obj->hsps()()) { ... } # process in list fashion
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    Bio::Search::Hit::* objects are data structures that contain information
\&about specific hits obtained during a library search.  Some information will
\&be algorithm-specific, but others will be generally defined.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Aaron Mackey, Steve Chervitz"
.IX Header "AUTHOR - Aaron Mackey, Steve Chervitz"
Email amackey@virginia.edu  (original author)
Email sac@bioperl.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999\-2001 Aaron Mackey, Steve Chervitz. All Rights Reserved.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "name"
.IX Subsection "name"
.Vb 5
\& Title   : name
\& Usage   : $hit_name = $hit->name();
\& Function: returns the name of the Hit sequence
\& Returns : a scalar string
\& Args    : none
.Ve
.PP
The \fBname\fR of a hit is unique within a Result or within an Iteration.
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title   : description
\& Usage   : $desc = $hit->description();
\& Function: Retrieve the description for the hit
\& Returns : a scalar string
\& Args    : none
.Ve
.Sh "accession"
.IX Subsection "accession"
.Vb 5
\& Title   : accession
\& Usage   : $acc = $hit->accession();
\& Function: Retrieve the accession (if available) for the hit
\& Returns : a scalar string (empty string if not set)
\& Args    : none
.Ve
.Sh "locus"
.IX Subsection "locus"
.Vb 5
\& Title   : locus
\& Usage   : $acc = $hit->locus();
\& Function: Retrieve the locus(if available) for the hit
\& Returns : a scalar string (empty string if not set)
\& Args    : none
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 5
\& Title   : length
\& Usage   : my $len = $hit->length
\& Function: Returns the length of the hit 
\& Returns : integer
\& Args    : none
.Ve
.Sh "algorithm"
.IX Subsection "algorithm"
.Vb 9
\& Title   : algorithm
\& Usage   : $alg = $hit->algorithm();
\& Function: Gets the algorithm specification that was used to obtain the hit
\&           For BLAST, the algorithm denotes what type of sequence was aligned 
\&           against what (BLASTN: dna-dna, BLASTP prt-prt, BLASTX translated 
\&           dna-prt, TBLASTN prt-translated dna, TBLASTX translated 
\&           dna-translated dna).
\& Returns : a scalar string 
\& Args    : none
.Ve
.Sh "raw_score"
.IX Subsection "raw_score"
.Vb 7
\& Title   : raw_score
\& Usage   : $score = $hit->raw_score();
\& Function: Gets the "raw score" generated by the algorithm.  What
\&           this score is exactly will vary from algorithm to algorithm,
\&           returning undef if unavailable.
\& Returns : a scalar value
\& Args    : none
.Ve
.Sh "score"
.IX Subsection "score"
Equivalent to \fIraw_score()\fR
.Sh "significance"
.IX Subsection "significance"
.Vb 8
\& Title   : significance
\& Usage   : $significance = $hit->significance();
\& Function: Used to obtain the E or P value of a hit, i.e. the probability that
\&           this particular hit was obtained purely by random chance.  If
\&           information is not available (nor calculatable from other
\&           information sources), return undef.
\& Returns : a scalar value or undef if unavailable
\& Args    : none
.Ve
.Sh "bits"
.IX Subsection "bits"
.Vb 6
\& Usage     : $hit_object->bits();
\& Purpose   : Gets the bit score of the best HSP for the current hit.
\& Example   : $bits = $hit_object->bits();
\& Returns   : Integer or double for FASTA reports
\& Argument  : n/a
\& Comments  : For BLAST1, the non-bit score is listed in the summary line.
.Ve
.PP
See Also   : \fIscore()\fR
.Sh "next_hsp"
.IX Subsection "next_hsp"
.Vb 6
\& Title    : next_hsp
\& Usage    : while( $hsp = $obj->next_hsp()) { ... }
\& Function : Returns the next available High Scoring Pair
\& Example  : 
\& Returns  : L<Bio::Search::HSP::HSPI> object or null if finished
\& Args     : none
.Ve
.Sh "hsps"
.IX Subsection "hsps"
.Vb 10
\& Usage     : $hit_object->hsps();
\& Purpose   : Get a list containing all HSP objects.
\&           : Get the numbers of HSPs for the current hit.
\& Example   : @hsps = $hit_object->hsps();
\&           : $num  = $hit_object->hsps();  # alternatively, use num_hsps()
\& Returns   : Array context : list of L<Bio::Search::HSP::BlastHSP> objects.
\&           : Scalar context: integer (number of HSPs).
\&           :                 (Equivalent to num_hsps()).
\& Argument  : n/a. Relies on wantarray
\& Throws    : Exception if the HSPs have not been collected.
.Ve
.PP
See Also   : \fIhsp()\fR, \fInum_hsps()\fR
.Sh "num_hsps"
.IX Subsection "num_hsps"
.Vb 6
\& Usage     : $hit_object->num_hsps();
\& Purpose   : Get the number of HSPs for the present Blast hit.
\& Example   : $nhsps = $hit_object->num_hsps();
\& Returns   : Integer
\& Argument  : n/a
\& Throws    : Exception if the HSPs have not been collected.
.Ve
.PP
See Also   : \fIhsps()\fR
.Sh "seq_inds"
.IX Subsection "seq_inds"
.Vb 18
\& Usage     : $hit->seq_inds( seq_type, class, collapse );
\& Purpose   : Get a list of residue positions (indices) across all HSPs
\&           : for identical or conserved residues in the query or sbjct sequence.
\& Example   : @s_ind = $hit->seq_inds('query', 'identical');
\&           : @h_ind = $hit->seq_inds('hit', 'conserved');
\&           : @h_ind = $hit->seq_inds('hit', 'conserved', 1);
\& Returns   : Array of integers 
\&           : May include ranges if collapse is non-zero.
\& Argument  : [0] seq_type  = 'query' or 'hit' or 'sbjct'  (default = 'query')
\&           :                 ('sbjct' is synonymous with 'hit')
\&           : [1] class     = 'identical' or 'conserved' (default = 'identical')
\&           :              (can be shortened to 'id' or 'cons')
\&           :              (actually, anything not 'id' will evaluate to 'conserved').
\&           : [2] collapse  = boolean, if non-zero, consecutive positions are merged
\&           :             using a range notation, e.g., "1 2 3 4 5 7 9 10 11" 
\&           :             collapses to "1-5 7 9-11". This is useful for 
\&           :             consolidating long lists. Default = no collapse.
\& Throws    : n/a.
.Ve
.PP
See Also   : \fIBio::Search::HSP::HSPI::seq_inds()\fR
.Sh "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $hit->rewind;
\& Function: Allow one to reset the HSP iterator to the beginning
\&           if possible
\& Returns : none
\& Args    : none
.Ve
.Sh "overlap"
.IX Subsection "overlap"
.Vb 11
\& Usage     : $hit_object->overlap( [integer] );
\& Purpose   : Gets/Sets the allowable amount overlap between different HSP sequences.
\& Example   : $hit_object->overlap(5);
\&           : $overlap = $hit_object->overlap;
\& Returns   : Integer.
\& Argument  : integer.
\& Throws    : n/a
\& Status    : Experimental
\& Comments  : Any two HSPs whose sequences overlap by less than or equal
\&           : to the overlap() number of resides will be considered separate HSPs
\&           : and will not get tiled by L<Bio::Search::BlastUtils::_adjust_contigs()>.
.Ve
.PP
See Also   : \fIBio::Search::BlastUtils::_adjust_contigs()\fR, \s-1BUGS\s0 
.Sh "n"
.IX Subsection "n"
.Vb 15
\& Usage     : $hit_object->n();
\& Purpose   : Gets the N number for the current Blast hit.
\&           : This is the number of HSPs in the set which was ascribed
\&           : the lowest P-value (listed on the description line).
\&           : This number is not the same as the total number of HSPs.
\&           : To get the total number of HSPs, use num_hsps().
\& Example   : $n = $hit_object->n();
\& Returns   : Integer
\& Argument  : n/a
\& Throws    : Exception if HSPs have not been set (BLAST2 reports).
\& Comments  : Note that the N parameter is not reported in gapped BLAST2.
\&           : Calling n() on such reports will result in a call to num_hsps().
\&           : The num_hsps() method will count the actual number of
\&           : HSPs in the alignment listing, which may exceed N in
\&           : some cases.
.Ve
.PP
See Also   : \fInum_hsps()\fR
.Sh "p"
.IX Subsection "p"
.Vb 20
\& Usage     : $hit_object->p( [format] );
\& Purpose   : Get the P-value for the best HSP of the given BLAST hit.
\&           : (Note that P-values are not provided with NCBI Blast2 reports).
\& Example   : $p =  $sbjct->p;
\&           : $p =  $sbjct->p('exp');  # get exponent only.
\&           : ($num, $exp) =  $sbjct->p('parts');  # split sci notation into parts
\& Returns   : Float or scientific notation number (the raw P-value, DEFAULT).
\&           : Integer if format == 'exp' (the magnitude of the base 10 exponent).
\&           : 2-element list (float, int) if format == 'parts' and P-value
\&           :                is in scientific notation (See Comments).
\& Argument  : format: string of 'raw' | 'exp' | 'parts'
\&           :    'raw' returns value given in report. Default. (1.2e-34)
\&           :    'exp' returns exponent value only (34)
\&           :    'parts' returns the decimal and exponent as a 
\&           :            2-element list (1.2, -34) (See Comments).
\& Throws    : Warns if no P-value is defined. Uses expect instead.
\& Comments  : Using the 'parts' argument is not recommended since it will not
\&           : work as expected if the P-value is not in scientific notation.
\&           : That is, floats are not converted into sci notation before
\&           : splitting into parts.
.Ve
.PP
See Also   : \fIexpect()\fR, \fIsignif()\fR, \fIBio::Search::BlastUtils::get_exponent()\fR
.Sh "hsp"
.IX Subsection "hsp"
.Vb 12
\& Usage     : $hit_object->hsp( [string] );
\& Purpose   : Get a single HSPI object for the present HitI object.
\& Example   : $hspObj  = $hit_object->hsp;  # same as 'best'
\&           : $hspObj  = $hit_object->hsp('best');
\&           : $hspObj  = $hit_object->hsp('worst');
\& Returns   : Object reference for a L<Bio::Search::HSP::HSPI> object.
\& Argument  : String (or no argument).
\&           :   No argument (default) = highest scoring HSP (same as 'best').
\&           :   'best' or 'first' = highest scoring HSP.
\&           :   'worst' or 'last' = lowest scoring HSP.
\& Throws    : Exception if the HSPs have not been collected.
\&           : Exception if an unrecognized argument is used.
.Ve
.PP
See Also   : \fIhsps()\fR, num_hsps()
.Sh "logical_length"
.IX Subsection "logical_length"
.Vb 14
\& Usage     : $hit_object->logical_length( [seq_type] );
\&           : (mostly intended for internal use).
\& Purpose   : Get the logical length of the hit sequence.
\&           : If the Blast is a TBLASTN or TBLASTX, the returned length 
\&           : is the length of the would-be amino acid sequence (length/3).
\&           : For all other BLAST flavors, this function is the same as length().
\& Example   : $len    = $hit_object->logical_length();
\& Returns   : Integer 
\& Argument  : seq_type = 'query' or 'hit' or 'sbjct' (default = 'query')
\&             ('sbjct' is synonymous with 'hit')
\& Throws    : n/a
\& Comments  : This is important for functions like frac_aligned_query()
\&           : which need to operate in amino acid coordinate space when dealing
\&           : with [T]BLAST[NX] type reports.
.Ve
.PP
See Also   : \fIlength()\fR, \fIfrac_aligned_query()\fR, \fIfrac_aligned_hit()\fR
.Sh "rank"
.IX Subsection "rank"
.Vb 6
\& Title   : rank
\& Usage   : $obj->rank($newval)
\& Function: Get/Set the rank of this Hit in the Query search list
\&           i.e. this is the Nth hit for a specific query
\& Returns : value of rank
\& Args    : newvalue (optional)
.Ve
.Sh "each_accession_number"
.IX Subsection "each_accession_number"
.Vb 7
\& Title   : each_accession_number
\& Usage   : $obj->each_accession_number
\& Function: Get each accession number listed in the description of the hit.
\&           If there are no alternatives, then only the primary accession will 
\&           be given
\& Returns : list of all accession numbers in the description
\& Args    : none
.Ve
.Sh "tiled_hsps"
.IX Subsection "tiled_hsps"
.Vb 10
\& Usage     : $hit_object->tiled_hsps( [integer] );
\& Purpose   : Gets/Sets an indicator for whether or not the HSPs in this Hit 
\&           : have been tiled.
\&           : Methods that rely on HSPs being tiled should check this
\&           : and then call SearchUtils::tile_hsps() if not.
\& Example   : $hit_object->tiled_hsps(1);
\&           : if( $hit_object->tiled_hsps ) { # do something }
\& Returns   : Boolean (1 or 0) 
\& Argument  : integer (optional)
\& Throws    : n/a
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 33
\& Usage     : $sbjct->strand( [seq_type] );
\& Purpose   : Gets the strand(s) for the query, sbjct, or both sequences
\&           : in the best HSP of the BlastHit object after HSP tiling.
\&           : Only valid for BLASTN, TBLASTX, BLASTX-query, TBLASTN-hit.
\& Example   : $qstrand = $sbjct->strand('query');
\&           : $sstrand = $sbjct->strand('hit');
\&           : ($qstrand, $sstrand) = $sbjct->strand();
\& Returns   : scalar context: integer '1', '-1', or '0'
\&           : array context without args: list of two strings (queryStrand, sbjctStrand)
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Argument  : In scalar context: seq_type = 'query' or 'hit' or 'sbjct' (default = 'query')
\&             ('sbjct' is synonymous with 'hit')
\& Throws    : n/a
\& Comments  : This method requires that all HSPs be tiled. If they have not
\&           : already been tiled, they will be tiled first automatically..
\&           : If you don't want the tiled data, iterate through each HSP
\&           : calling strand() on each (use hsps() to get all HSPs).
\&           :
\&           : Formerly (prior to 10/21/02), this method would return the
\&           : string "-1/1" for hits with HSPs on both strands.
\&           : However, now that strand and frame is properly being accounted
\&           : for during HSP tiling, it makes more sense for strand()
\&           : to return the strand data for the best HSP after tiling.
\&           :
\&           : If you really want to know about hits on opposite strands,
\&           : you should be iterating through the HSPs using methods on the
\&           : HSP objects.
\&           :
\&           : A possible use case where knowing whether a hit has HSPs 
\&           : on both strands would be when filtering via SearchIO for hits with 
\&           : this property. However, in this case it would be better to have a
\&           : dedicated method such as $hit->hsps_on_both_strands(). Similarly
\&           : for frame. This could be provided if there is interest.
.Ve
.PP
See Also   : Bio::Search::HSP::HSPI::strand()
.Sh "frame"
.IX Subsection "frame"
.Vb 11
\& Usage     : $hit_object->frame();
\& Purpose   : Gets the reading frame for the best HSP after HSP tiling.
\&           : This is only valid for BLASTX and TBLASTN/X type reports.
\& Example   : $frame = $hit_object->frame();
\& Returns   : Integer (-2 .. +2)
\& Argument  : n/a
\& Throws    : Exception if HSPs have not been set.
\& Comments  : This method requires that all HSPs be tiled. If they have not
\&           : already been tiled, they will be tiled first automatically..
\&           : If you don't want the tiled data, iterate through each HSP
\&           : calling frame() on each (use hsps() to get all HSPs).
.Ve
.PP
See Also   : \fIhsps()\fR
.Sh "matches"
.IX Subsection "matches"
.Vb 24
\& Usage     : $hit_object->matches( [class] );
\& Purpose   : Get the total number of identical or conserved matches 
\&           : (or both) across all HSPs.
\&           : (Note: 'conservative' matches are indicated as 'positives' 
\&           :         in BLAST reports.)
\& Example   : ($id,$cons) = $hit_object->matches(); # no argument
\&           : $id = $hit_object->matches('id');
\&           : $cons = $hit_object->matches('cons'); 
\& Returns   : Integer or a 2-element array of integers 
\& Argument  : class = 'id' | 'cons' OR none. 
\&           : If no argument is provided, both identical and conservative 
\&           : numbers are returned in a two element list.
\&           : (Other terms can be used to refer to the conservative
\&           :  matches, e.g., 'positive'. All that is checked is whether or
\&           :  not the supplied string starts with 'id'. If not, the 
\&           : conservative matches are returned.)
\& Throws    : Exception if the requested data cannot be obtained.
\& Comments  : This method requires that all HSPs be tiled. If there is more than one
\&           : HSP and they have not already been tiled, they will be tiled first automatically..
\&           :
\&           : If you need data for each HSP, use hsps() and then interate
\&           : through the HSP objects.
\&           : Does not rely on wantarray to return a list. Only checks for
\&           : the presence of an argument (no arg = return list).
.Ve
.PP
See Also   : \fIBio::Search::HSP::GenericHSP::matches()\fR, \fIhsps()\fR
