.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Location::Simple 3"
.TH Bio::Location::Simple 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Location::Simple \- Implementation of a Simple Location on a Sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Location::Simple;
.Ve
.PP
.Vb 2
\&    my $location = new Bio::Location::Simple(-start => 1, -end => 100,
\&                                             -strand => 1 );
.Ve
.PP
.Vb 5
\&    if( $location->strand == -1 ) {
\&        printf "complement(%d..%d)\en", $location->start, $location->end;
\&    } else {
\&        printf "%d..%d\en", $location->start, $location->end;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of Bio::LocationI to manage exact location
information on a Sequence: '22' or '12..15' or '16^17'.
.PP
You can test the type of the location using \fIlength()\fR function () or
directly \fIlocation_type()\fR which can one of two values: '\s-1EXACT\s0' or
\&'\s-1IN\-BETWEEN\s0'.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "start"
.IX Subsection "start"
.Vb 6
\&  Title   : start
\&  Usage   : $start = $loc->start();
\&  Function: get/set the start of this range
\&  Returns : the start of this range
\&  Args    : optionaly allows the start to be set
\&          : using $loc->start($start)
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 6
\&  Title   : end
\&  Usage   : $end = $loc->end();
\&  Function: get/set the end of this range
\&  Returns : the end of this range
\&  Args    : optionaly allows the end to be set
\&          : using $loc->end($start)
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 6
\&  Title   : strand
\&  Usage   : $strand = $loc->strand();
\&  Function: get/set the strand of this range
\&  Returns : the strandedness (-1, 0, +1)
\&  Args    : optionaly allows the strand to be set
\&          : using $loc->strand($strand)
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 6
\& Title   : length
\& Usage   : $len = $loc->length();
\& Function: get the length in the coordinate space this location spans
\& Example :
\& Returns : an integer
\& Args    : none
.Ve
.Sh "min_start"
.IX Subsection "min_start"
.Vb 5
\&  Title   : min_start
\&  Usage   : my $minstart = $location->min_start();
\&  Function: Get minimum starting location of feature startpoint
\&  Returns : integer or undef if no minimum starting point.
\&  Args    : none
.Ve
.Sh "max_start"
.IX Subsection "max_start"
.Vb 3
\&  Title   : max_start
\&  Usage   : my $maxstart = $location->max_start();
\&  Function: Get maximum starting location of feature startpoint.
.Ve
.PP
.Vb 1
\&            In this implementation this is exactly the same as min_start().
.Ve
.PP
.Vb 2
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.Sh "start_pos_type"
.IX Subsection "start_pos_type"
.Vb 3
\&  Title   : start_pos_type
\&  Usage   : my $start_pos_type = $location->start_pos_type();
\&  Function: Get start position type (ie <,>, ^).
.Ve
.PP
.Vb 3
\&  Returns : type of position coded as text 
\&            ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "min_end"
.IX Subsection "min_end"
.Vb 5
\&  Title   : min_end
\&  Usage   : my $minend = $location->min_end();
\&  Function: Get minimum ending location of feature endpoint 
\&  Returns : integer or undef if no minimum ending point.
\&  Args    : none
.Ve
.Sh "max_end"
.IX Subsection "max_end"
.Vb 3
\&  Title   : max_end
\&  Usage   : my $maxend = $location->max_end();
\&  Function: Get maximum ending location of feature endpoint
.Ve
.PP
.Vb 1
\&            In this implementation this is exactly the same as min_end().
.Ve
.PP
.Vb 2
\&  Returns : integer or undef if no maximum ending point.
\&  Args    : none
.Ve
.Sh "end_pos_type"
.IX Subsection "end_pos_type"
.Vb 3
\&  Title   : end_pos_type
\&  Usage   : my $end_pos_type = $location->end_pos_type();
\&  Function: Get end position type (ie <,>, ^)
.Ve
.PP
.Vb 3
\&  Returns : type of position coded as text 
\&            ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "location_type"
.IX Subsection "location_type"
.Vb 5
\&  Title   : location_type
\&  Usage   : my $location_type = $location->location_type();
\&  Function: Get location type encoded as text
\&  Returns : string ('EXACT' or 'IN-BETWEEN')
\&  Args    : 'EXACT' or '..' or 'IN-BETWEEN' or '^'
.Ve
.Sh "is_remote"
.IX Subsection "is_remote"
.Vb 5
\& Title   : is_remote
\& Usage   : $self->is_remote($newval)
\& Function: Getset for is_remote value
\& Returns : value of is_remote
\& Args    : newvalue (optional)
.Ve
.Sh "to_FTstring"
.IX Subsection "to_FTstring"
.Vb 5
\&  Title   : to_FTstring
\&  Usage   : my $locstr = $location->to_FTstring()
\&  Function: returns the FeatureTable string of this location
\&  Returns : string
\&  Args    : none
.Ve
