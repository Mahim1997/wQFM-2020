.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::BlastHSP 3"
.TH Bio::Search::HSP::BlastHSP 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::HSP::BlastHSP \- Bioperl BLAST High\-Scoring Pair object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Search::Hit::BlastHit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Bio::Search::HSP::BlastHSP object provides an interface to data
obtained in a single alignment section of a Blast report (known as a
\&\*(L"High\-scoring Segment Pair\*(R"). This is essentially a pairwise
alignment with score information.
.PP
BlastHSP objects are accessed via Bio::Search::Hit::BlastHit
objects after parsing a \s-1BLAST\s0 report using the Bio::SearchIO
system.
.PP
The construction of BlastHSP objects is performed by
Bio::Factory::BlastHitFactory in a process that is
orchestrated by the Blast parser (Bio::SearchIO::psiblast).
The resulting BlastHSPs are then accessed via
Bio::Search::Hit::BlastHit). Therefore, you do not need to
use Bio::Search::HSP::BlastHSP) directly. If you need to construct
BlastHSPs directly, see the \fInew()\fR function for details.
.PP
For Bio::SearchIO \s-1BLAST\s0 parsing usage examples, see the
\&\f(CW\*(C`examples/search\-blast\*(C'\fR directory of the Bioperl distribution.
.Sh "Start and End coordinates"
.IX Subsection "Start and End coordinates"
Sequence endpoints are swapped so that start is always less than
end. This affects For \s-1TBLASTN/X\s0 hits on the minus strand. Strand
information can be recovered using the \fIstrand()\fR method. This
normalization step is standard Bioperl practice. It also facilitates
use of range information by methods such as \fImatch()\fR.
.IP "* Supports \s-1BLAST\s0 versions 1.x and 2.x, gapped and ungapped." 1
.IX Item "Supports BLAST versions 1.x and 2.x, gapped and ungapped."
.PP
Bio::Search::HSP::BlastHSP.pm has the ability to extract a list of all
residue indices for identical and conservative matches along both
query and sbjct sequences. Since this degree of detail is not always
needed, this behavior does not occur during construction of the BlastHSP
object.  These data will automatically be collected as necessary as
the BlastHSP.pm object is used.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Search::HSP::BlastHSP.pm is a concrete class that inherits from
Bio::SeqFeature::SimilarityPair and Bio::Search::HSP::HSPI.
Bio::Seq and Bio::SimpleAlign are employed for creating
sequence and alignment objects, respectively.
.Sh "Relationship to SimpleAlign.pm & Seq.pm"
.IX Subsection "Relationship to SimpleAlign.pm & Seq.pm"
BlastHSP.pm can provide the query or sbjct sequence as a Bio::Seq
object via the \fIseq()\fR method. The BlastHSP.pm object can also create a
two-sequence Bio::SimpleAlign alignment object using the the query
and sbjct sequences via the \fIget_aln()\fR method. Creation of alignment
objects is not automatic when constructing the BlastHSP.pm object since
this level of functionality is not always required and would generate
a lot of extra overhead when crunching many reports.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Chervitz <sac\-at\-bioperl.org>
.PP
See the \s-1FEEDBACK\s0 section  for where to send bug reports and comments.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This software was originally developed in the Department of Genetics
at Stanford University. I would also like to acknowledge my
colleagues at Affymetrix for useful feedback.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 3
\& Bio::Search::Hit::BlastHit.pm          - Blast hit object.
\& Bio::Search::Result::BlastResult.pm    - Blast Result object.
\& Bio::Seq.pm                            - Biosequence object
.Ve
.Sh "Links:"
.IX Subsection "Links:"
.Vb 1
\& http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-2001 Steve Chervitz. All Rights Reserved.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 28
\& Usage     : $hsp = Bio::Search::HSP::BlastHSP->new( %named_params );
\&           : Bio::Search::HSP::BlastHSP objects are constructed
\&           : automatically by Bio::SearchIO::BlastHitFactory,
\&           : so there is no need for direct instantiation.
\& Purpose   : Constructs a new BlastHSP object and Initializes key variables
\&           : for the HSP.
\& Returns   : A Bio::Search::HSP::BlastHSP object
\& Argument  : Named parameters:
\&           : Parameter keys are case-insensitive.
\&           :      -RAW_DATA  => array ref containing raw BLAST report data for
\&           :                    for a single HSP. This includes all lines
\&           :                    of the HSP alignment from a traditional BLAST
\&                                or PSI-BLAST (non-XML) report,
\&           :      -RANK         => integer (1..n).
\&           :      -PROGRAM      => string ('TBLASTN', 'BLASTP', etc.).
\&           :      -QUERY_NAME   => string, id of query sequence
\&           :      -HIT_NAME     => string, id of hit sequence
\&           :
\& Comments  : Having the raw data allows this object to do lazy parsing of
\&           : the raw HSP data (i.e., not parsed until needed).
\&           :
\&           : Note that there is a fair amount of basic parsing that is
\&           : currently performed in this module that would be more appropriate
\&           : to do within a separate factory object.
\&           : This parsing code will likely be relocated and more initialization
\&           : parameters will be added to new().
\&           :
\&See Also   : L<Bio::SeqFeature::SimilarityPair::new()>, L<Bio::SeqFeature::Similarity::new()>
.Ve
.Sh "algorithm"
.IX Subsection "algorithm"
.Vb 9
\& Title   : algorithm
\& Usage   : $alg = $hsp->algorithm();
\& Function: Gets the algorithm specification that was used to obtain the hsp
\&           For BLAST, the algorithm denotes what type of sequence was aligned
\&           against what (BLASTN: dna-dna, BLASTP prt-prt, BLASTX translated
\&           dna-prt, TBLASTN prt-translated dna, TBLASTX translated
\&           dna-translated dna).
\& Returns : a scalar string
\& Args    : none
.Ve
.Sh "\fIsignif()\fP"
.IX Subsection "signif()"
.Vb 10
\& Usage     : $hsp_obj->signif()
\& Purpose   : Get the P-value or Expect value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43)
\&           : Returns P-value if it is defined, otherwise, Expect value.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Provided for consistency with BlastHit::signif()
\&           : Support for returning the significance data in different
\&           : formats (e.g., exponent only), is not provided for HSP objects.
\&           : This is only available for the BlastHit or Blast object.
.Ve
.PP
See Also   : p(), \fIexpect()\fR, \fIBio::Search::Hit::BlastHit::signif()\fR
.Sh "evalue"
.IX Subsection "evalue"
.Vb 8
\& Usage     : $hsp_obj->evalue()
\& Purpose   : Get the Expect value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43)
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Support for returning the expectation data in different
\&           : formats (e.g., exponent only), is not provided for HSP objects.
\&           : This is only available for the BlastHit or Blast object.
.Ve
.PP
See Also   : p()
.Sh "p"
.IX Subsection "p"
.Vb 9
\& Usage     : $hsp_obj->p()
\& Purpose   : Get the P-value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43) or undef if not defined.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : P-value is not defined with NCBI Blast2 reports.
\&           : Support for returning the expectation data in different
\&           : formats (e.g., exponent only) is not provided for HSP objects.
\&           : This is only available for the BlastHit or Blast object.
.Ve
.PP
See Also   : \fIexpect()\fR
.Sh "length"
.IX Subsection "length"
.Vb 10
\& Usage     : $hsp->length( [seq_type] )
\& Purpose   : Get the length of the aligned portion of the query or sbjct.
\& Example   : $hsp->length('query')
\& Returns   : integer
\& Argument  : seq_type: 'query' | 'hit' or 'sbjct' | 'total'  (default = 'total')
\&             ('sbjct' is synonymous with 'hit')
\& Throws    : n/a
\& Comments  : 'total' length is the full length of the alignment
\&           : as reported in the denominators in the alignment section:
\&           : "Identical = 34/120 Positives = 67/120".
.Ve
.PP
See Also   : \fIgaps()\fR
.Sh "gaps"
.IX Subsection "gaps"
.Vb 14
\& Usage     : $hsp->gaps( [seq_type] )
\& Purpose   : Get the number of gaps in the query, sbjct, or total alignment.
\&           : Also can return query gaps and sbjct gaps as a two-element list
\&           : when in array context.
\& Example   : $total_gaps      = $hsp->gaps();
\&           : ($qgaps, $sgaps) = $hsp->gaps();
\&           : $qgaps           = $hsp->gaps('query');
\& Returns   : scalar context: integer
\&           : array context without args: (int, int) = ('queryGaps', 'sbjctGaps')
\& Argument  : seq_type: 'query' or 'hit' or 'sbjct' or 'total'
\&           :  ('sbjct' is synonymous with 'hit')
\&           : (default = 'total', scalar context)
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
.PP
See Also   : \fIlength()\fR, \fImatches()\fR
.Sh "frac_identical"
.IX Subsection "frac_identical"
.Vb 21
\& Usage     : $hsp_object->frac_identical( [seq_type] );
\& Purpose   : Get the fraction of identical positions within the given HSP.
\& Example   : $frac_iden = $hsp_object->frac_identical('query');
\& Returns   : Float (2-decimal precision, e.g., 0.75).
\& Argument  : seq_type: 'query' or 'hit' or 'sbjct' or 'total'
\&           :  ('sbjct' is synonymous with 'hit')
\&           : default = 'total' (but see comments below).
\& Throws    : n/a
\& Comments  : Different versions of Blast report different values for the total
\&           : length of the alignment. This is the number reported in the
\&           : denominators in the stats section:
\&           : "Identical = 34/120 Positives = 67/120".
\&           : NCBI-BLAST uses the total length of the alignment (with gaps)
\&           : WU-BLAST uses the length of the query sequence (without gaps).
\&           : Therefore, when called without an argument or an argument of 'total',
\&           : this method will report different values depending on the
\&           : version of BLAST used.
\&           :
\&           : To get the fraction identical among only the aligned residues,
\&           : ignoring the gaps, call this method with an argument of 'query'
\&           : or 'sbjct' ('sbjct' is synonymous with 'hit').
.Ve
.PP
See Also   : \fIfrac_conserved()\fR, \fInum_identical()\fR, \fImatches()\fR
.Sh "frac_conserved"
.IX Subsection "frac_conserved"
.Vb 23
\& Usage     : $hsp_object->frac_conserved( [seq_type] );
\& Purpose   : Get the fraction of conserved positions within the given HSP.
\&           : (Note: 'conservative' positions are called 'positives' in the
\&           : Blast report.)
\& Example   : $frac_cons = $hsp_object->frac_conserved('query');
\& Returns   : Float (2-decimal precision, e.g., 0.75).
\& Argument  : seq_type: 'query' or 'hit' or 'sbjct' or 'total'
\&           :  ('sbjct' is synonymous with 'hit')
\&           : default = 'total' (but see comments below).
\& Throws    : n/a
\& Comments  : Different versions of Blast report different values for the total
\&           : length of the alignment. This is the number reported in the
\&           : denominators in the stats section:
\&           : "Identical = 34/120 Positives = 67/120".
\&           : NCBI-BLAST uses the total length of the alignment (with gaps)
\&           : WU-BLAST uses the length of the query sequence (without gaps).
\&           : Therefore, when called without an argument or an argument of 'total',
\&           : this method will report different values depending on the
\&           : version of BLAST used.
\&           :
\&           : To get the fraction conserved among only the aligned residues,
\&           : ignoring the gaps, call this method with an argument of 'query'
\&           : or 'sbjct'.
.Ve
.PP
See Also   : \fIfrac_conserved()\fR, \fInum_conserved()\fR, \fImatches()\fR
.Sh "query_string"
.IX Subsection "query_string"
.Vb 5
\& Title   : query_string
\& Usage   : my $qseq = $hsp->query_string;
\& Function: Retrieves the query sequence of this HSP as a string
\& Returns : string
\& Args    : none
.Ve
.Sh "hit_string"
.IX Subsection "hit_string"
.Vb 5
\& Title   : hit_string
\& Usage   : my $hseq = $hsp->hit_string;
\& Function: Retrieves the hit sequence of this HSP as a string
\& Returns : string
\& Args    : none
.Ve
.Sh "homology_string"
.IX Subsection "homology_string"
.Vb 8
\& Title   : homology_string
\& Usage   : my $homo_string = $hsp->homology_string;
\& Function: Retrieves the homology sequence for this HSP as a string.
\&         : The homology sequence is the string of symbols in between the
\&         : query and hit sequences in the alignment indicating the degree
\&         : of conservation (e.g., identical, similar, not similar).
\& Returns : string
\& Args    : none
.Ve
.Sh "expect"
.IX Subsection "expect"
See \fIBio::Search::HSP::HSPI::expect()\fR
.Sh "rank"
.IX Subsection "rank"
.Vb 5
\& Usage     : $hsp->rank( [string] );
\& Purpose   : Get the rank of the HSP within a given Blast hit.
\& Example   : $rank = $hsp->rank;
\& Returns   : Integer (1..n) corresponding to the order in which the HSP
\&             appears in the BLAST report.
.Ve
.Sh "to_string"
.IX Subsection "to_string"
.Vb 10
\& Title   : to_string
\& Usage   : print $hsp->to_string;
\& Function: Returns a string representation for the Blast HSP.
\&           Primarily intended for debugging purposes.
\& Example : see usage
\& Returns : A string of the form:
\&           [BlastHSP] <rank>
\&           e.g.:
\&           [BlastHit] 1
\& Args    : None
.Ve
.Sh "n"
.IX Subsection "n"
.Vb 11
\& Usage     : $hsp_obj->n()
\& Purpose   : Get the N value (num HSPs on which P/Expect is based).
\&           : This value is not defined with NCBI Blast2 with gapping.
\& Returns   : Integer or null string if not defined.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : The 'N' value is listed in parenthesis with P/Expect value:
\&           : e.g., P(3) = 1.2e-30  ---> (N = 3).
\&           : Not defined in NCBI Blast2 with gaps.
\&           : This typically is equal to the number of HSPs but not always.
\&           : To obtain the number of HSPs, use Bio::Search::Hit::BlastHit::num_hsps().
.Ve
.PP
See Also   : \fIBio::SeqFeature::SimilarityPair::score()\fR
.Sh "matches"
.IX Subsection "matches"
.Vb 17
\& Usage     : $hsp->matches([seq_type], [start], [stop]);
\& Purpose   : Get the total number of identical and conservative matches
\&           : in the query or sbjct sequence for the given HSP. Optionally can
\&           : report data within a defined interval along the seq.
\&           : (Note: 'conservative' matches are called 'positives' in the
\&           : Blast report.)
\& Example   : ($id,$cons) = $hsp_object->matches('hit');
\&           : ($id,$cons) = $hsp_object->matches('query',300,400);
\& Returns   : 2-element array of integers
\& Argument  : (1) seq_type = 'query' or 'hit' or 'sbjct' (default = query)
\&           :  ('sbjct' is synonymous with 'hit')
\&           : (2) start = Starting coordinate (optional)
\&           : (3) stop  = Ending coordinate (optional)
\& Throws    : Exception if the supplied coordinates are out of range.
\& Comments  : Relies on seq_str('match') to get the string of alignment symbols
\&           : between the query and sbjct lines which are used for determining
\&           : the number of identical and conservative matches.
.Ve
.PP
See Also   : \fIlength()\fR, \fIgaps()\fR, \fIseq_str()\fR, \fIBio::Search::Hit::BlastHit::_adjust_contigs()\fR
.Sh "num_identical"
.IX Subsection "num_identical"
.Vb 6
\& Usage     : $hsp_object->num_identical();
\& Purpose   : Get the number of identical positions within the given HSP.
\& Example   : $num_iden = $hsp_object->num_identical();
\& Returns   : integer
\& Argument  : n/a
\& Throws    : n/a
.Ve
.PP
See Also   : \fInum_conserved()\fR, \fIfrac_identical()\fR
.Sh "num_conserved"
.IX Subsection "num_conserved"
.Vb 6
\& Usage     : $hsp_object->num_conserved();
\& Purpose   : Get the number of conserved positions within the given HSP.
\& Example   : $num_iden = $hsp_object->num_conserved();
\& Returns   : integer
\& Argument  : n/a
\& Throws    : n/a
.Ve
.PP
See Also   : \fInum_identical()\fR, \fIfrac_conserved()\fR
.Sh "range"
.IX Subsection "range"
.Vb 9
\& Usage     : $hsp->range( [seq_type] );
\& Purpose   : Gets the (start, end) coordinates for the query or sbjct sequence
\&           : in the HSP alignment.
\& Example   : ($query_beg, $query_end) = $hsp->range('query');
\&           : ($hit_beg, $hit_end) = $hsp->range('hit');
\& Returns   : Two-element array of integers
\& Argument  : seq_type = string, 'query' or 'hit' or 'sbjct'  (default = 'query')
\&           :  ('sbjct' is synonymous with 'hit')
\& Throws    : n/a
.Ve
.PP
See Also   : \fIstart()\fR, \fIend()\fR
.Sh "start"
.IX Subsection "start"
.Vb 14
\& Usage     : $hsp->start( [seq_type] );
\& Purpose   : Gets the start coordinate for the query, sbjct, or both sequences
\&           : in the HSP alignment.
\&           : NOTE: Start will always be less than end.
\&           : To determine strand, use $hsp->strand()
\& Example   : $query_beg = $hsp->start('query');
\&           : $hit_beg = $hsp->start('hit');
\&           : ($query_beg, $hit_beg) = $hsp->start();
\& Returns   : scalar context: integer
\&           : array context without args: list of two integers
\& Argument  : In scalar context: seq_type = 'query' or 'hit' or 'sbjct' (default= 'query')
\&           :  ('sbjct' is synonymous with 'hit')
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
.PP
See Also   : \fIend()\fR, \fIrange()\fR
.Sh "end"
.IX Subsection "end"
.Vb 14
\& Usage     : $hsp->end( [seq_type] );
\& Purpose   : Gets the end coordinate for the query, sbjct, or both sequences
\&           : in the HSP alignment.
\&           : NOTE: Start will always be less than end.
\&           : To determine strand, use $hsp->strand()
\& Example   : $query_end = $hsp->end('query');
\&           : $hit_end = $hsp->end('hit');
\&           : ($query_end, $hit_end) = $hsp->end();
\& Returns   : scalar context: integer
\&           : array context without args: list of two integers
\& Argument  : In scalar context: seq_type = 'query' or 'hit' or 'sbjct' (default= 'query')
\&           :  ('sbjct' is synonymous with 'hit')
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
.PP
See Also   : \fIstart()\fR, \fIrange()\fR, \fIstrand()\fR
.Sh "strand"
.IX Subsection "strand"
.Vb 16
\& Usage     : $hsp_object->strand( [seq_type] )
\& Purpose   : Get the strand of the query or sbjct sequence.
\& Example   : print $hsp->strand('query');
\&           : ($query_strand, $hit_strand) = $hsp->strand();
\& Returns   : -1, 0, or 1
\&           : -1 = Minus strand, +1 = Plus strand
\&           : Returns 0 if strand is not defined, which occurs
\&           : for BLASTP reports, and the query of TBLASTN
\&           : as well as the hit if BLASTX reports.
\&           : In scalar context without arguments, returns queryStrand value.
\&           : In array context without arguments, returns a two-element list
\&           :    of strings (queryStrand, sbjctStrand).
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Argument  : seq_type: 'query' or 'hit' or 'sbjct' or undef
\&           :  ('sbjct' is synonymous with 'hit')
\& Throws    : n/a
.Ve
.PP
See Also   : \fI_set_seq()\fR, \fI_set_match_stats()\fR
.Sh "seq"
.IX Subsection "seq"
.Vb 11
\& Usage     : $hsp->seq( [seq_type] );
\& Purpose   : Get the query or sbjct sequence as a Bio::Seq.pm object.
\& Example   : $seqObj = $hsp->seq('query');
\& Returns   : Object reference for a Bio::Seq.pm object.
\& Argument  : seq_type = 'query' or 'hit' or 'sbjct' (default = 'query').
\&           :  ('sbjct' is synonymous with 'hit')
\& Throws    : Propagates any exception that occurs during construction
\&           : of the Bio::Seq.pm object.
\& Comments  : The sequence is returned in an array of strings corresponding
\&           : to the strings in the original format of the Blast alignment.
\&           : (i.e., same spacing).
.Ve
.PP
See Also   : \fIseq_str()\fR, \fIseq_inds()\fR, Bio::Seq
.Sh "seq_str"
.IX Subsection "seq_str"
.Vb 11
\& Usage     : $hsp->seq_str( seq_type );
\& Purpose   : Get the full query, sbjct, or 'match' sequence as a string.
\&           : The 'match' sequence is the string of symbols in between the
\&           : query and sbjct sequences.
\& Example   : $str = $hsp->seq_str('query');
\& Returns   : String
\& Argument  : seq_Type = 'query' or 'hit' or 'sbjct' or 'match'
\&           :  ('sbjct' is synonymous with 'hit')
\& Throws    : Exception if the argument does not match an accepted seq_type.
\& Comments  : Calls _set_seq_data() to set the 'match' sequence if it has
\&           : not been set already.
.Ve
.PP
See Also   : \fIseq()\fR, \fIseq_inds()\fR, \fI_set_match_seq()\fR
.Sh "seq_inds"
.IX Subsection "seq_inds"
.Vb 20
\& Usage     : $hsp->seq_inds( seq_type, class, collapse );
\& Purpose   : Get a list of residue positions (indices) for all identical
\&           : or conserved residues in the query or sbjct sequence.
\& Example   : @s_ind = $hsp->seq_inds('query', 'identical');
\&           : @h_ind = $hsp->seq_inds('hit', 'conserved');
\&           : @h_ind = $hsp->seq_inds('hit', 'conserved', 1);
\& Returns   : List of integers
\&           : May include ranges if collapse is true.
\& Argument  : seq_type  = 'query' or 'hit' or 'sbjct'  (default = query)
\&           :  ('sbjct' is synonymous with 'hit')
\&           : class     = 'identical' or 'conserved' (default = identical)
\&           :              (can be shortened to 'id' or 'cons')
\&           :              (actually, anything not 'id' will evaluate to 'conserved').
\&           : collapse  = boolean, if true, consecutive positions are merged
\&           :             using a range notation, e.g., "1 2 3 4 5 7 9 10 11"
\&           :             collapses to "1-5 7 9-11". This is useful for
\&           :             consolidating long lists. Default = no collapse.
\& Throws    : n/a.
\& Comments  : Calls _set_residues() to set the 'match' sequence if it has
\&           : not been set already.
.Ve
.PP
See Also   : \fIseq()\fR, \fI_set_residues()\fR, \fIBio::Search::BlastUtils::collapse_nums()\fR, \fIBio::Search::Hit::BlastHit::seq_inds()\fR
.Sh "get_aln"
.IX Subsection "get_aln"
.Vb 12
\& Usage     : $hsp->get_aln()
\& Purpose   : Get a Bio::SimpleAlign object constructed from the query + sbjct
\&           : sequences of the present HSP object.
\& Example   : $aln_obj = $hsp->get_aln();
\& Returns   : Object reference for a Bio::SimpleAlign.pm object.
\& Argument  : n/a.
\& Throws    : Propagates any exception ocurring during the construction of
\&           : the Bio::SimpleAlign object.
\& Comments  : Requires Bio::SimpleAlign.
\&           : The Bio::SimpleAlign object is constructed from the query + sbjct
\&           : sequence objects obtained by calling seq().
\&           : Gap residues are included (see $GAP_SYMBOL).
.Ve
.PP
See Also   : \fIseq()\fR, Bio::SimpleAlign
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those
wishing to modify or understand the code. Two things to bear in mind:
.IP "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate,
create or modify an accessor (and let me know, too!).
.IP "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for these data member descriptions to become obsolete as
this module is still evolving. Always double check this info and search
for members not described here.
.PP
An instance of Bio::Search::HSP::BlastHSP.pm is a blessed reference to a hash containing
all or some of the following fields:
.PP
.Vb 3
\& FIELD           VALUE
\& --------------------------------------------------------------
\& (member names are mostly self-explanatory)
.Ve
.PP
.Vb 32
\& _score              :
\& _bits               :
\& _p                  :
\& _n                  : Integer. The 'N' value listed in parenthesis with P/Expect value:
\&                     : e.g., P(3) = 1.2e-30  ---> (N = 3).
\&                     : Not defined in NCBI Blast2 with gaps.
\&                     : To obtain the number of HSPs, use Bio::Search::Hit::BlastHit::num_hsps().
\& _expect             :
\& _queryLength        :
\& _queryGaps          :
\& _queryStart         :
\& _queryStop          :
\& _querySeq           :
\& _sbjctLength        :
\& _sbjctGaps          :
\& _sbjctStart         :
\& _sbjctStop          :
\& _sbjctSeq           :
\& _matchSeq           : String. Contains the symbols between the query and sbjct lines
\&                       which indicate identical (letter) and conserved ('+') matches
\&                       or a mismatch (' ').
\& _numIdentical       :
\& _numConserved       :
\& _identicalRes_query :
\& _identicalRes_sbjct :
\& _conservedRes_query :
\& _conservedRes_sbjct :
\& _match_indent       : The number of leading space characters on each line containing
\&                       the match symbols. _match_indent is 13 in this example:
\&                         Query:   285 QNSAPWGLARISHRERLNLGSFNKYLYDDDAG
\&                                      Q +APWGLARIS       G+ + Y YD+ AG
\&                         ^^^^^^^^^^^^^
.Ve
