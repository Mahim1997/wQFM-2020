.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::LinkageMap 3"
.TH Bio::Map::LinkageMap 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Map::LinkageMap \- A representation of a genetic linkage map.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 14
\&    use Bio::Map::LinkageMap;
\&        # create a new map
\&    my $map = new Bio::Map::LinkageMap(-name => 'Chads Superterriffic Map',
\&                                      -type => 'Linkage',
\&                                      -units=> 'cM');
\&        # create the location of a marker for that map
\&    my $position = new Bio::Map::LinkagePosition( -positions => 1,
\&                -distance => "22.3");
\&        # create a marker and place it at that position
\&    my $marker = new Bio::Map::Marker::Microsatellite(
\&                        -name => 'SuuuperMarker',
\&                        -position => $position);
\&        # place that marker on that map
\&    $map->add_element($marker);
.Ve
.PP
.Vb 1
\&        # done!
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object describes the basic functionality of a genetic linkage map in
Bioperl. Each 'position' can have one or more markers that map some number of
units from the markers at the previous position.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Chad Matsalla"
.IX Header "AUTHOR - Chad Matsalla"
Email bioinformatics1@dieselwurks.com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Lincoln Stein       lstein@cshl.org
Heikki Lehvaslaiho  heikki-at-bioperl-dot-org
Jason Stajich       jason@bioperl.org
Sendu Bala          bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $linkage_map = new Bio::Map::LinkageMap();
\& Function: Builds a new Bio::Map::LinkageMap object
\& Returns : Bio::Map::LinkageMap
\& Args    : -name    => the name of the map (string) [optional]
\&               -type    => the type of this map (string, defaults to Linkage) [optional]
\&           -species => species for this map (Bio::Species) [optional]
\&           -units   => the map units (string, defaults to cM) [optional]
\&           -elements=> elements to initialize with
\&                       (arrayref of Bio::Map::MappableI objects) [optional]
\&           -uid      => Unique ID of this map
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 7
\& Title   : length
\& Usage   : my $length = $map->length();
\& Function: Retrieves the length of the map. In the case of a LinkageMap, the
\&               length is the sum of all marker distances.
\& Returns : An integer representing the length of this LinkageMap. Will return
\&               0 if length is not calculateable
\& Args    : None.
.Ve
.Sh "add_element($marker)"
.IX Subsection "add_element($marker)"
.Vb 14
\& Title   : add_element($marker)
\& Usage   : $map->add_element($marker)
\& Function: Add a Bio::Map::MappableI object to the Map
\& Returns : none
\& Args    : Bio::Map::MappableI object
\& Notes   : It is strongly recommended that you use a
\&           Bio::Map::LinkagePosition as the position in any
\&           Bio::Map::Mappable that you create to place on this
\&           map. Using some other Bio::Map::Position might work but might
\&           be unpredictable.
\&           N.B. I've added Bio::Map::OrderedPosition which should achieve
\&                similar things from LinkagePosition and will work for
\&                RH markers too.
\&=cut
.Ve
.PP
#*** what is this? what calls it? note that it seems to be private
sub _add_element_will_be_deleted {
    my ($self,$marker) = \f(CW@_\fR;
.PP
.Vb 1
\&    my $o_position = $marker->position();
.Ve
.PP
.Vb 3
\&    $self->debug( "marker position is ". $marker->position());
\&#     print("add_element: \e$o_position is $o_position\en");
\&#     print("add_element: \e$marker is $marker\en");
.Ve
.PP
.Vb 13
\&    my $position;
\&    unless ( $o_position->isa('Bio::Map::LinkagePosition') ||
\&             $o_position->isa('Bio::Map::OrderedPosition')
\&             ) {
\&        $self->warn("You really should use a Linkage Position for this object. This insures that there is only one position. Trying anyway...");        
\&        my @p = ( $o_position->each_position_value($self));
\&        $position = shift @p;
\&        if( ! defined $position ) {
\&            $self->throw("This marker ($marker) does not have a position in this map ($self)");
\&        }
\&    } else {
\&        $position = $o_position->order;
\&    }
.Ve
.PP
.Vb 5
\&    if ($self->{'_elements'}[$position]) {
\&        $self->warn("Replacing the marker in position $position because in a linkage map the position is a key.");
\&    }   
\&    $self->{'_elements'}[$position] = $marker;
\&}
.Ve
.PP
1;
