.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::Glyph::cds 3"
.TH Bio::Graphics::Glyph::cds 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graphics::Glyph::cds \- The "cds" glyph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  See L<Bio::Graphics::Panel> and L<Bio::Graphics::Glyph>.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This glyph draws features that are associated with a protein coding
region.  At high magnifications, draws a series of boxes that are
color-coded to indicate the frame in which the translation occurs.  At
low magnifications, draws the amino acid sequence of the resulting
protein.  Amino acids that are created by a splice are optionally
shown in a distinctive color.
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
The following options are standard among all Glyphs.  See
Bio::Graphics::Glyph for a full explanation.
.PP
.Vb 2
\&  Option      Description                      Default
\&  ------      -----------                      -------
.Ve
.PP
.Vb 1
\&  -fgcolor      Foreground color               black
.Ve
.PP
.Vb 1
\&  -outlinecolor Synonym for -fgcolor
.Ve
.PP
.Vb 1
\&  -bgcolor      Background color               turquoise
.Ve
.PP
.Vb 1
\&  -fillcolor    Synonym for -bgcolor
.Ve
.PP
.Vb 1
\&  -linewidth    Line width                     1
.Ve
.PP
.Vb 1
\&  -height       Height of glyph                10
.Ve
.PP
.Vb 1
\&  -font         Glyph font                     gdSmallFont
.Ve
.PP
.Vb 1
\&  -connector    Connector type                 0 (false)
.Ve
.PP
.Vb 2
\&  -connector_color
\&                Connector color                black
.Ve
.PP
.Vb 1
\&  -label        Whether to draw a label        0 (false)
.Ve
.PP
.Vb 1
\&  -description  Whether to draw a description  0 (false)
.Ve
.PP
.Vb 2
\&  -strand_arrow Whether to indicate            0 (false)
\&                 strandedness
.Ve
.PP
.Vb 1
\&  -hilite       Highlight color                undef (no color)
.Ve
.PP
In addition, the cds glyph recognizes the following glyph-specific
options:
.PP
.Vb 2
\&  Option      Description                      Default
\&  ------      -----------                      -------
.Ve
.PP
.Vb 1
\&  -frame0f    Color for first (+) frame        background color
.Ve
.PP
.Vb 1
\&  -frame1f    Color for second (+) frame       background color
.Ve
.PP
.Vb 1
\&  -frame2f    Color for third (+) frame        background color
.Ve
.PP
.Vb 1
\&  -frame0r    Color for first (-) frame        background color
.Ve
.PP
.Vb 1
\&  -frame1r    Color for second (-) frame       background color
.Ve
.PP
.Vb 1
\&  -frame2r    Color for third (-) frame        background color
.Ve
.PP
.Vb 1
\&  -gridcolor  Color for the "staff"            lightslategray
.Ve
.PP
.Vb 5
\&  -translation Number of lines of reading      3frame
\&               frames to show. One of
\&               "3frame", or "6frame".
\&               For 6frame, specify a height
\&               of at least 30 pixels.
.Ve
.PP
.Vb 4
\&  -sixframe   Draw a six-frame staff           0 (false; usually draws 3 frame)
\&              This value overrides
\&              -translation, which essentially
\&              does the same thing.
.Ve
.PP
.Vb 4
\&  -require_subparts
\&              Don't draw the reading frame 0   false
\&              unless it is a feature
\&              subpart.
.Ve
.PP
.Vb 3
\&  -sub_part   For objects with multiple        undef
\&              subpart types, defines which
\&              is the CDS part.
.Ve
.PP
.Vb 1
\&  -codontable   Codon table to use             1 (see Bio::Tools::CodonTable)
.Ve
.PP
.Vb 6
\&  -phase_style  The way phase is to be
\&                interpreted. One of            "012"
\&                "012" or "021"
\&  -ignore_empty_phase                          false
\&              Only draw features that have
\&              their phase defined.
.Ve
.PP
.Vb 2
\&  -cds_only   Only draw features of type       false
\&              'CDS'
.Ve
.PP
This glyph is more sensitive to the underlying data model than usual,
so there are a few additional options to use to help adapt the glyph
to different environments.
.PP
The \-require_subparts option is suggested when rendering spliced
transcripts which contain multiple \s-1CDS\s0 subparts.  Otherwise, the glyph
will hickup when zoomed way down onto an intron between two CDSs (a
phantom reading frame will appear).  For unspliced sequences, do *not*
use \-require_subparts.
.PP
The \-phase_style controls how the value returned by the \fIphase()\fR or
\&\fIframe()\fR methods is to be interpreted. The official interpretation is
that the phase value indicates the offset into the feature at which
the reading frame starts \*(-- e.g. a phase of \*(L"2\*(R" means the reading
frame starts after skipping two bases from the beginning of the
feature.  However, many \s-1GFF2\s0 format feature files interpret this field
to mean the position reading frame of the first base of the feature \*(--
e.g. a phase of \*(L"2\*(R" means that the reading frame starts after skipping
just one base from the beginning of the feature. Specify \*(L"012\*(R" to
interpret the phase field in the correct way, and \*(L"021\*(R" to interpret
the phase field in the legacy way. The default is \*(L"012.\*(R"
.PP
Here is how the option names were chosen:
.PP
.Vb 4
\&    * * *                  Base the reading frame starts on
\&    A B C A B C A B C...
\&    0 1 2                  PHASE REPRESENTED CORRECTLY
\&    0 2 1                  PHASE REPRESENTED IN THE LEGACY WAY
.Ve
.PP
Set the \-ignore_empty_phase option to true if you wish to skip
subfeatures that do not have a defined \fIphase()\fR or \fIframe()\fR. This is useful
if you are rendering exons that have both translated and untranslated
parts, and you wish to skip the untranslated parts.
.PP
Set the \-cds_only option to true if you wish to draw the glyph only
for subfeatures of type '\s-1CDS\s0'. This is recommended.
.SH "SUGGESTED STANZA FOR GENOME BROWSER"
.IX Header "SUGGESTED STANZA FOR GENOME BROWSER"
Using the \*(L"coding\*(R" aggregator, this produces a nice gbrowse display.
.PP
.Vb 14
\& [CDS]
\& feature      = coding
\& glyph        = cds
\& frame0f      = cadetblue
\& frame1f      = blue
\& frame2f      = darkblue
\& frame0r      = darkred
\& frame1r      = red
\& frame2r      = crimson
\& description  = 0
\& height       = 13
\& label        = CDS frame
\& key          = CDS
\& citation     = This track shows CDS reading frames.
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report them.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel,
Bio::Graphics::Glyph,
Bio::Graphics::Glyph::arrow,
Bio::Graphics::Glyph::cds,
Bio::Graphics::Glyph::crossbox,
Bio::Graphics::Glyph::diamond,
Bio::Graphics::Glyph::dna,
Bio::Graphics::Glyph::dot,
Bio::Graphics::Glyph::ellipse,
Bio::Graphics::Glyph::extending_arrow,
Bio::Graphics::Glyph::generic,
Bio::Graphics::Glyph::graded_segments,
Bio::Graphics::Glyph::heterogeneous_segments,
Bio::Graphics::Glyph::line,
Bio::Graphics::Glyph::pinsertion,
Bio::Graphics::Glyph::primers,
Bio::Graphics::Glyph::rndrect,
Bio::Graphics::Glyph::segments,
Bio::Graphics::Glyph::ruler_arrow,
Bio::Graphics::Glyph::toomany,
Bio::Graphics::Glyph::transcript,
Bio::Graphics::Glyph::transcript2,
Bio::Graphics::Glyph::translation,
Bio::Graphics::Glyph::triangle,
Bio::DB::GFF,
Bio::SeqI,
Bio::SeqFeatureI,
Bio::Das,
\&\s-1GD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
