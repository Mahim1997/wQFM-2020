.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graph::IO 3"
.TH Bio::Graph::IO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graph::IO \- Class for reading /writing biological graph data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # This is a class for reading /writing biological data that can
\&  # be represented by graphs e.g., protein interaction data.
.Ve
.PP
.Vb 7
\&  # e.g., a graph reformatter..
\&  my $graph_in = Bio::Graph::IO->new(-file =>'myfile.dat',
\&                                     -format=>'dip' );
\&  my $graph = $graph_in->next_graph();
\&  my $graph_out = Bio::Graph::IO->new(-file =>'outfile.dat',
\&                                      -format=>'psixml') ;
\&  $graph_out->write_graph($graph);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is analagous to the SeqIO and AlignIO classes. To read in a
file of a particular format, file and format are given as key/value
pairs as arguments.  The Bio::Graph::IO checks that the appropriate
module is available and loads it.
.PP
At present only the \s-1DIP\s0 tab delimited format and \s-1PSI\s0 \s-1XML\s0 format are supported
.SH "METHODS"
.IX Header "METHODS"
The main methods are:
.ie n .Sh "$graph = $io\fP\->\fInext_graph()"
.el .Sh "$graph = \f(CW$io\fP\->\fInext_graph()\fP"
.IX Subsection "$graph = $io->next_graph()"
The next_graph method does not imply that multiple graphs are
contained in a file, more to maintain the consistency of nomenclature
with the \f(CW$seqio\fR\->\fInext_seq()\fR and \f(CW$alnio\fR\->\fInext_aln()\fR methods.
.Sh "$io\->write_graph($graph) (not implemented yet)."
.IX Subsection "$io->write_graph($graph) (not implemented yet)."
Writes the graph data to file in requested format.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
To read or write from \s-1XML\s0 you will need the XML::Twig module available
from \s-1CPAN\s0.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.
.PP
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Richard Adams"
.IX Header "AUTHOR - Richard Adams"
Email richard.adams@ed.ac.uk
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Name       : new
\& Usage      : $io = Bio::Graph::IO->new(-file => 'myfile.dat', 
\&                                        -format => 'dip');
\& Returns    : A Bio::Graph::IO stream initialised to the appropriate format.
\& Args       : Named parameters: 
\&              -file      => $filename
\&              -format    => format
\&              -threshold => a confidence score for the interaction, optional
.Ve
.Sh "next_graph"
.IX Subsection "next_graph"
.Vb 4
\& Name       : next_graph
\& Usage      : $gr = $io->next_graph().
\& Returns    : A Bio::Graph::ProteinGraph object.
\& Args       : None
.Ve
.Sh "write_graph"
.IX Subsection "write_graph"
.Vb 4
\& Name       : write_graph
\& Usage      : $gr = $io->write_graph($graph).
\& Args       : A Bio::Graph object.
\& Returns    : None
.Ve
.Sh "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 5
\& Title   : _load_format_module
\& Usage   : *INTERNAL BioGraphIO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Returns :
\& Args    :
.Ve
