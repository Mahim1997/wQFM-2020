.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Restriction::IO::base 3"
.TH Bio::Restriction::IO::base 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Restriction::IO::base \- base enzyme set
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::Restriction::IO class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class defines some base methods for restriction enzyme input and
at the same time gives a base list of common enzymes.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Edwards, redwards@utmem.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "read"
.IX Subsection "read"
.Vb 5
\& Title   : read
\& Usage   : $renzs = $stream->read
\& Function: reads all the restrction enzymes from the stream
\& Returns : a Bio::Restriction::Restriction object
\& Args    : none
.Ve
.Sh "write"
.IX Subsection "write"
.Vb 6
\& Title   : write
\& Usage   : $stream->write($renzs)
\& Function: writes restriction enzymes into the stream
\& Returns : 1 for success and 0 for error
\& Args    : a Bio::Restriction::Enzyme
\&           or a Bio::Restriction::EnzymeCollection object
.Ve
.Sh "Common \s-1REBASE\s0 parsing methods"
.IX Subsection "Common REBASE parsing methods"
The rest of the methods in this file are to be used by other \s-1REBASE\s0
parsers. They are not to be used outside subclasses of this base
class. (They are 'protected' in the sense the word is used in Java.)
.Sh "_cuts_from_site"
.IX Subsection "_cuts_from_site"
.Vb 6
\& Title   : _cuts_from_site
\& Usage   : ($site, $cut, $comp_cut) = _cuts_from_site('ACGCGT(4/5)');
\& Function: Separates cut positions from a single site string.
\&           Does nothing to site if it does not have the cut string
\& Returns : array of site_string, forward_cut_position, reverse_cut_position
\& Args    : recognition site string
.Ve
.Sh "_meth"
.IX Subsection "_meth"
.Vb 8
\& Title   : _meth
\& Usage   : ($pos, $meth) = $self->_meth('2(5)');
\& Function: Separates methylation postion and coce from a string.
\&           Adjusts the postion depending on enzyme site length
\&           and symmetry 
\& Returns : array of position and methylation code
\& Args    : 1. reference to Enzyme object
\&           2. methylation description string
.Ve
.Sh "_coordinate_shift_to_cut"
.IX Subsection "_coordinate_shift_to_cut"
.Vb 7
\& Title   : _coordinate_shift_to_cut
\& Usage   : $cut = $self->_coordinate_shift_to_cut($oricut, offset);
\& Function: Adjust cut position coordinates to start from the 
\&           first nucleotides of site
\& Returns : Cut position in correct coordinates
\& Args    : 1. Original cut position
\&           2. Length of the recognition site
.Ve
.Sh "_make_multisites"
.IX Subsection "_make_multisites"
.Vb 3
\& Title   : _make_multisites
\& Usage   : $self->_make_multisites($collection, $first_enzyme, \e@sites, \e@mets)
\& Function:
.Ve
.PP
.Vb 6
\&           Bless a Bio::Restriction::Enzyme (which is already part of
\&           the collection object) into
\&           Bio::Restriction::Enzyme::MultiSite and clone it as many
\&           times as there are alternative sites. The new objects are
\&           added into the collection and into others list of sister
\&           objects.
.Ve
.PP
.Vb 5
\& Returns : nothing, does in place editing
\& Args    : 1. a Bio::Restriction::EnzymeCollection
\&           2. a Bio::Restriction::Enzyme
\&           3. reference to an array of recognition site strings
\&           4. reference to an array of methylation code strings, optional
.Ve
.Sh "_make_multicuts"
.IX Subsection "_make_multicuts"
.Vb 3
\& Title   : _make_multicuts
\& Usage   : $self->_make_multicuts($collection, $first_enzyme, $precuts)
\& Function:
.Ve
.PP
.Vb 6
\&           Bless a Bio::Restriction::Enzyme (which is already part of
\&           the collection object) into
\&           Bio::Restriction::Enzyme::MultiCut and clone it. The precut
\&           string is processed to replase the cut sites in the cloned
\&           object which is added into the collection. Both object
\&           refere to each other through others() method.
.Ve
.PP
.Vb 4
\& Returns : nothing, does in place editing
\& Args    : 1. a Bio::Restriction::EnzymeCollection
\&           2. a Bio::Restriction::Enzyme
\&           3. precut string, e.g. '12/7'
.Ve
.PP
The examples we have of multiply cutting enzymes cut only four
times. This protected method deals only with a string of two
integers separated with a slash, e.g. '12/7'. The numbers represent the postions
\&\s-1BEFORE\s0 the start of the recognition site, i.e. negative positions.
.Sh "_companies"
.IX Subsection "_companies"
.Vb 7
\& Title     : _companies
\& Purpose   : Defines the companies that we know about
\& Returns   : A hash
\& Argument  : Nothing
\& Comments  : An internal method to define the companies that we know about
\&             REBASE uses a code, and this converts the code to the real name
\&             (e.g. A = Amersham Pharmacia Biotech)
.Ve
