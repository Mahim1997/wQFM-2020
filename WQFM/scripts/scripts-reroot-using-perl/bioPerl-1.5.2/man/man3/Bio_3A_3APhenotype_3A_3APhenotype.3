.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phenotype::Phenotype 3"
.TH Bio::Phenotype::Phenotype 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Phenotype::Phenotype \- A class for modeling phenotypes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #get Bio::Phenotype::PhenotypeI somehow
.Ve
.PP
.Vb 2
\&  print $phenotype->name(), "\en";
\&  print $phenotype->description(), "\en";
.Ve
.PP
.Vb 6
\&  my @keywords = ( "achondroplasia", "dwarfism" );
\&  $phenotype->add_keywords( @keywords ); 
\&  foreach my $keyword ( $phenotype->each_keyword() ) {
\&       print $keyword, "\en";
\&  }
\&  $phenotype->remove_keywords();
.Ve
.PP
.Vb 3
\&  foreach my $gene_symbol ( $phenotype->each_gene_symbol() ) {
\&       print $gene_symbol, "\en";
\&  }
.Ve
.PP
.Vb 3
\&  foreach my $corr ( $phenotype->each_Correlate() ) {
\&       # Do something with $corr
\&  }
.Ve
.PP
.Vb 3
\&  foreach my $var ( $phenotype->each_Variant() ) {
\&       # Do something with $var (mutation)
\&  }
.Ve
.PP
.Vb 3
\&  foreach my $measure ( $phenotype->each_Measure() ) {
\&       # Do something with $measure
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This superclass implements common methods for classes modelling phenotypes.
Bio::Phenotype::OMIM::OMIMentry is an example of an instantiable phenotype
class (the design of this interface was partially guided by the need
to model \s-1OMIM\s0 entries).
Please note. This class provides methods to associate mutations
(methods \*(L"each_Variant\*(R", ...) and genotypes (methods \*(L"each_Genotype\*(R", ...) 
with phenotypes. Yet, these aspects might need some future enhancements,
especially since there is no \*(L"genotype\*(R" class yet.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek@gnf.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://www.genetics.wustl.edu/eddy/people/zmasek/
.PP
Address: 
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : $obj = Bio::Phenotype::Phenotype->new( -name         => "XY",
\&                                                  -description  => "This is ..." );
\& Function: Creates a new Phenotype object.
\& Returns : A new Phenotype object.
\& Args    : -name                           => the name
\&           -description                    => the description of this phenotype
\&           -species                        => ref to the the species
\&           -comment                        => a comment
.Ve
.Sh "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $obj->init();   
\& Function: Initializes this OMIMentry to all "" and empty lists.
\& Returns : 
\& Args    :
.Ve
.Sh "name"
.IX Subsection "name"
.Vb 7
\& Title   : name
\& Usage   : $obj->name( "r1" );
\&           or
\&           print $obj->name();
\& Function: Set/get for the name or id of this phenotype.
\& Returns : A name or id [scalar].
\& Args    : A name or id [scalar] (optional).
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 7
\& Title   : description
\& Usage   : $obj->description( "This is ..." );
\&           or
\&           print $obj->description();
\& Function: Set/get for the description of this phenotype.
\& Returns : A description [scalar].
\& Args    : A description [scalar] (optional).
.Ve
.Sh "species"
.IX Subsection "species"
.Vb 7
\& Title   : species
\& Usage   : $obj->species( $species );
\&           or
\&           $species = $obj->species();
\& Function: Set/get for the species of this phenotype.
\& Returns : A species [Bio::Species].
\& Args    : A species [Bio::Species] (optional).
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $obj->comment( "putative" );
\&           or
\&           print $obj->comment();
\& Function: Set/get for a comment about this phenotype.
\& Returns : A comment [scalar].
\& Args    : A comment [scalar] (optional).
.Ve
.Sh "each_gene_symbol"
.IX Subsection "each_gene_symbol"
.Vb 6
\& Title   : each_gene_symbol()
\& Usage   : @gs = $obj->each_gene_symbol();
\& Function: Returns a list of gene symbols [scalars, most likely Strings]
\&           associated with this phenotype.
\& Returns : A list of scalars.
\& Args    :
.Ve
.Sh "add_gene_symbols"
.IX Subsection "add_gene_symbols"
.Vb 8
\& Title   : add_gene_symbols
\& Usage   : $obj->add_gene_symbols( @gs );
\&           or
\&           $obj->add_gene_symbols( $gs );
\& Function: Pushes one or more gene symbols [scalars, most likely Strings]
\&           into the list of gene symbols.
\& Returns : 
\& Args    : scalar(s).
.Ve
.Sh "remove_gene_symbols"
.IX Subsection "remove_gene_symbols"
.Vb 5
\& Usage   : $obj->remove_gene_symbols();
\& Function: Deletes (and returns) the list of gene symbols [scalars,
\&           most likely Strings] associated with this phenotype.
\& Returns : A list of scalars.
\& Args    :
.Ve
.Sh "each_Variant"
.IX Subsection "each_Variant"
.Vb 10
\& Title   : each_Variant()
\& Usage   : @vs = $obj->each_Variant();
\& Function: Returns a list of Bio::Variation::VariantI implementing objects
\&           associated with this phenotype.
\&           This is for representing the actual mutation(s) causing this 
\&           phenotype.
\&           {* The "variants" data member and its methods will/might need to be
\&           changed/improved in one way or another, CZ 09/06/02 *}
\& Returns : A list of Bio::Variation::VariantI implementing objects.
\& Args    :
.Ve
.Sh "add_Variants"
.IX Subsection "add_Variants"
.Vb 7
\& Usage   : $obj->add_Variants( @vs );
\&           or
\&           $obj->add_Variants( $v );
\& Function: Pushes one or more Bio::Variation::VariantI implementing objects
\&           into the list of Variants.
\& Returns : 
\& Args    : Bio::Variation::VariantI implementing object(s).
.Ve
.Sh "remove_Variants"
.IX Subsection "remove_Variants"
.Vb 6
\& Title   : remove_Variants
\& Usage   : $obj->remove_Variants();
\& Function: Deletes (and returns) the list of Bio::Variation::VariantI implementing
\&           objects associated with this phenotype.
\& Returns : A list of Bio::Variation::VariantI implementing objects.
\& Args    :
.Ve
.Sh "each_Reference"
.IX Subsection "each_Reference"
.Vb 6
\& Title   : each_Reference()
\& Usage   : @refs = $obj->each_Reference();                 
\& Function: Returns a list of Bio::Annotation::Reference objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Annotation::Reference objects.
\& Args    :
.Ve
.Sh "add_References"
.IX Subsection "add_References"
.Vb 8
\& Title   : add_References
\& Usage   : $obj->add_References( @refs );
\&           or
\&           $obj->add_References( $ref );                  
\& Function: Pushes one or more Bio::Annotation::Reference objects
\&           into the list of References.
\& Returns : 
\& Args    : Bio::Annotation::Reference object(s).
.Ve
.Sh "remove_References"
.IX Subsection "remove_References"
.Vb 6
\& Title   : remove_References()
\& Usage   : $obj->remove_References();
\& Function: Deletes (and returns) the list of Bio::Annotation::Reference objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Annotation::Reference objects.
\& Args    :
.Ve
.Sh "each_CytoPosition"
.IX Subsection "each_CytoPosition"
.Vb 6
\& Title   : each_CytoPosition()
\& Usage   : @cps = $obj->each_CytoPosition();                 
\& Function: Returns a list of Bio::Map::CytoPosition objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Map::CytoPosition objects.
\& Args    :
.Ve
.Sh "add_CytoPositions"
.IX Subsection "add_CytoPositions"
.Vb 8
\& Title   : add_CytoPositions
\& Usage   : $obj->add_CytoPositions( @cps );
\&           or
\&           $obj->add_CytoPositions( $cp );                  
\& Function: Pushes one or more Bio::Map::CytoPosition objects
\&           into the list of CytoPositions.
\& Returns : 
\& Args    : Bio::Map::CytoPosition object(s).
.Ve
.Sh "remove_CytoPositions"
.IX Subsection "remove_CytoPositions"
.Vb 6
\& Title   : remove_CytoPositions
\& Usage   : $obj->remove_CytoPositions();
\& Function: Deletes (and returns) the list o fBio::Map::CytoPosition objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Map::CytoPosition objects.
\& Args    :
.Ve
.Sh "each_Correlate"
.IX Subsection "each_Correlate"
.Vb 9
\& Title   : each_Correlate()
\& Usage   : @corrs = $obj->each_Correlate();                 
\& Function: Returns a list of Bio::Phenotype::Correlate objects
\&           associated with this phenotype.
\&           (Correlates are correlating phenotypes in different species;
\&           inspired by mouse correlates of human phenotypes in the OMIM
\&           database.)
\& Returns : A list of Bio::Phenotype::Correlate objects.
\& Args    :
.Ve
.Sh "add_Correlates"
.IX Subsection "add_Correlates"
.Vb 8
\& Title   : add_Correlates
\& Usage   : $obj->add_Correlates( @corrs );
\&           or
\&           $obj->add_Correlates( $corr );                  
\& Function: Pushes one or more Bio::Phenotype::Correlate objects
\&           into the list of Correlates.
\& Returns : 
\& Args    : Bio::Phenotype::Correlate object(s).
.Ve
.Sh "remove_Correlates"
.IX Subsection "remove_Correlates"
.Vb 6
\& Title   : remove_Correlates
\& Usage   : $obj->remove_Correlates();
\& Function: Deletes (and returns) the list of Bio::Phenotype::Correlate objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Phenotype::Correlate objects.
\& Args    :
.Ve
.Sh "each_Measure"
.IX Subsection "each_Measure"
.Vb 8
\& Title   : each_Measure()
\& Usage   : @ms = $obj->each_Measure();                 
\& Function: Returns a list of Bio::Phenotype::Measure objects
\&           associated with this phenotype.
\&           (Measure is for biochemically defined phenotypes
\&           or any other types of measures.)
\& Returns : A list of Bio::Phenotype::Measure objects.
\& Args    :
.Ve
.Sh "add_Measures"
.IX Subsection "add_Measures"
.Vb 8
\& Title   : add_Measures
\& Usage   : $obj->add_Measures( @ms );
\&           or
\&           $obj->add_Measures( $m );                  
\& Function: Pushes one or more Bio::Phenotype::Measure objects
\&           into the list of Measures.
\& Returns : 
\& Args    : Bio::Phenotype::Measure object(s).
.Ve
.Sh "remove_Measures"
.IX Subsection "remove_Measures"
.Vb 6
\& Title   : remove_Measures
\& Usage   : $obj->remove_Measures();
\& Function: Deletes (and returns) the list of Bio::Phenotype::Measure objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Phenotype::Measure objects.
\& Args    :
.Ve
.Sh "each_keyword"
.IX Subsection "each_keyword"
.Vb 6
\& Title   : each_keyword()
\& Usage   : @kws = $obj->each_keyword();                 
\& Function: Returns a list of key words [scalars, most likely Strings]
\&           associated with this phenotype.
\& Returns : A list of scalars.
\& Args    :
.Ve
.Sh "add_keywords"
.IX Subsection "add_keywords"
.Vb 8
\& Title   : add_keywords
\& Usage   : $obj->add_keywords( @kws );
\&           or
\&           $obj->add_keywords( $kw );                  
\& Function: Pushes one or more keywords [scalars, most likely Strings]
\&           into the list of key words.
\& Returns : 
\& Args    : scalar(s).
.Ve
.Sh "remove_keywords"
.IX Subsection "remove_keywords"
.Vb 6
\& Title   : remove_keywords
\& Usage   : $obj->remove_keywords();
\& Function: Deletes (and returns) the list of key words [scalars,
\&           most likely Strings] associated with this phenotype.
\& Returns : A list of scalars.
\& Args    :
.Ve
.Sh "each_DBLink"
.IX Subsection "each_DBLink"
.Vb 6
\& Title   : each_DBLink()
\& Usage   : @dbls = $obj->each_DBLink();                 
\& Function: Returns a list of Bio::Annotation::DBLink objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Annotation::DBLink objects.
\& Args    :
.Ve
.Sh "add_DBLink"
.IX Subsection "add_DBLink"
.Vb 8
\& Title   : add_DBLink
\& Usage   : $obj->add_DBLinks( @dbls );
\&           or
\&           $obj->add_DBLinks( $dbl );                  
\& Function: Pushes one or more Bio::Annotation::DBLink objects
\&           into the list of DBLinks.
\& Returns : 
\& Args    : Bio::Annotation::DBLink object(s).
.Ve
.Sh "remove_DBLinks"
.IX Subsection "remove_DBLinks"
.Vb 6
\& Title   : remove_DBLinks
\& Usage   : $obj->remove_DBLinks();
\& Function: Deletes (and returns) the list of Bio::Annotation::DBLink objects
\&           associated with this phenotype.
\& Returns : A list of Bio::Annotation::DBLink objects.
\& Args    :
.Ve
.Sh "each_Genotype"
.IX Subsection "each_Genotype"
.Vb 9
\& Title   : each_Reference()
\& Usage   : @gts = $obj->each_Reference();                 
\& Function: Returns a list of "Genotype" objects
\&           associated with this phenotype.
\&           {* the "genotypes" data member and its methods certainly will/needs to be
\&           changed/improved in one way or another since there is
\&           no "Genotype" class yet, CZ 09/06/02 *}
\& Returns : A list of "Genotype" objects.
\& Args    :
.Ve
.Sh "add_Genotypes"
.IX Subsection "add_Genotypes"
.Vb 8
\& Title   : add_Genotypes
\& Usage   : $obj->add_Genotypes( @gts );
\&           or
\&           $obj->add_Genotypes( $gt );                  
\& Function: Pushes one or more "Genotypes"
\&           into the list of "Genotypes".
\& Returns : 
\& Args    : "Genotypes(s)".
.Ve
.Sh "remove_Genotypes"
.IX Subsection "remove_Genotypes"
.Vb 6
\& Title   : remove_Genotypes
\& Usage   : $obj->remove_Genotypes();
\& Function: Deletes (and returns) the list of "Genotype" objects
\&           associated with this phenotype.
\& Returns : A list of "Genotype" objects.
\& Args    :
.Ve
.Sh "_check_ref_type"
.IX Subsection "_check_ref_type"
.Vb 5
\& Title   : _check_ref_type
\& Usage   : $self->_check_ref_type( $value, "Bio::Annotation::DBLink" );
\& Function: Checks for the correct type.
\& Returns : 
\& Args    : The value to be checked, the expected class.
.Ve
