.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Gel 3"
.TH Bio::Tools::Gel 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Gel \- Calculates relative electrophoretic migration distances
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Bio::PrimarySeq;
\&    use Bio::Tools::RestrictionAnalysis;
\&    use Bio::Tools::Gel;
.Ve
.PP
.Vb 3
\&    # get a sequence
\&    my $d = 'AAAAAAAAAGAATTCTTTTTTTTTTTTTTGAATTCGGGGGGGGGGGGGGGGGGGG';
\&    my $seq1 = Bio::Seq->new(-id=>'groundhog day',-seq=>$d);
.Ve
.PP
.Vb 3
\&    # cut it with an enzyme
\&    my $ra=Bio::Restriction::Analysis->new(-seq=>$seq1);
\&    @cuts = $ra->fragments('EcoRI'), 3;
.Ve
.PP
.Vb 6
\&    # analyse the fragments in a gel
\&    my $gel = Bio::Tools::Gel->new(-seq=>\e@cuts,-dilate=>10);
\&    my %bands = $gel->bands;
\&    foreach my $band (sort {$b <=> $a} keys %bands){
\&      print $band,"\et", sprintf("%.1f", $bands{$band}),"\en";
\&    }
.Ve
.PP
.Vb 4
\&    #prints:
\&    #20   27.0
\&    #25   26.0
\&    #10   30.0
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This takes a set of sequences or Bio::Seq objects, and calculates their
respective migration distances using:
    distance = dilation * (4 \- log10(length(dna));
.PP
Source: Molecular Cloning, a Laboratory Manual. Sambrook, Fritsch, Maniatis. 
\&\s-1CSHL\s0 Press, 1989.
.PP
Bio::Tools::Gel currently calculates migration distances based solely on
the length of the nucleotide sequence.  Secondary or tertiary structure, 
curvature, and other biophysical attributes of a sequence are currently 
not considered.  Polypeptide migration is currently not supported.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Allen Day"
.IX Header "AUTHOR - Allen Day"
Email allenday@ucla.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $gel = new Bio::Tools::Gel(-seq => $sequence,-dilate => 3);
\& Function: Initializes a new Gel
\& Returns : Bio::Tools::Gel
\& Args    : -seq      => Bio::Seq(s), scalar(s) or list of either/both 
\&                        (default: none)
\&           -dilate   => Expand band migration distances (default: 1)
.Ve
.Sh "add_band"
.IX Subsection "add_band"
.Vb 5
\& Title   : add_band
\& Usage   : $gel->add_band($seq);
\& Function: Calls _add_band with a (possibly created) Bio::Seq object.
\& Returns : 
\& Args    : Bio::Seq, scalar sequence, or list of either/both.
.Ve
.Sh "_add_band"
.IX Subsection "_add_band"
.Vb 5
\& Title   : _add_band
\& Usage   : $gel->_add_band($seq);
\& Function: Adds a new band to the gel.
\& Returns : 
\& Args    : Bio::Seq object
.Ve
.Sh "dilate"
.IX Subsection "dilate"
.Vb 5
\& Title   : dilate
\& Usage   : $gel->dilate(1);
\& Function: Sets/retrieves the dilation factor.
\& Returns : dilation factor 
\& Args    : Float or none
.Ve
.Sh "bands"
.IX Subsection "bands"
.Vb 5
\& Title   : bands
\& Usage   : $gel->bands;
\& Function: Calculates migration distances of sequences.
\& Returns : hash of (seq_id => distance)
\& Args    :
.Ve
.Sh "log10"
.IX Subsection "log10"
.Vb 5
\& Title   : log10
\& Usage   : log10($n);
\& Function: returns base 10 log of $n.
\& Returns : float
\& Args    : float
.Ve
