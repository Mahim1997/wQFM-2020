.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::OntologyIO::Handlers::BaseSAXHandler 3"
.TH Bio::OntologyIO::Handlers::BaseSAXHandler 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::OntologyIO::Handlers::BaseSAXHandler
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an abstract module, serving as the base of any \s-1SAX\s0 Handler 
implementation. It tries to offer the framework that \s-1SAX\s0 handlers generally 
need, such as tag_stack, char_store, etc.
.PP
In the implementation handler, you can take advantage of this based module by
the following suggestions.
.PP
1) In start_element,
.PP
.Vb 5
\& sub start_element {
\&     my $self=shift;
\&     my $tag=$_[0]->{Name};
\&     my %args=%{$_[0]->{Attributes}};
\&     # Your code here.
.Ve
.PP
.Vb 4
\&     # Before you conclude the method, write these 2 line.
\&     $self->_visited_count_inc($tag);
\&     $self->_push_tag($tag);
\& }
.Ve
.PP
2) In end_element,
.PP
.Vb 4
\& sub end_element {
\&     my $self=shift;
\&     my $tag=shift->{Name};
\&     # Your code here.
.Ve
.PP
.Vb 4
\&     # Before you conclude the method, write these 2 lines.
\&     $self->_visited_count_dec($tag);
\&     $self->_pop_tag;
\& }
.Ve
.PP
3) In characters, or any other methods where you may use the tag
stack or count
.PP
.Vb 3
\& sub characters {
\&     my $self=shift;
\&     my $text=shift->{Data};
.Ve
.PP
.Vb 1
\&     $self->_chars_hash->{$self->_top_tag} .= $text;
.Ve
.PP
.Vb 3
\& }
\& $count = $self->_visited_count('myTag');
\& $tag = $self->_top_tag;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Juguang Xiao, juguang@tll.org.sg
.Sh "\s-1APPENDIX\s0"
.IX Subsection "APPENDIX"
The rest of the documentation details each of the object methods.
Interal methods are usually preceded with a _
.Sh "_tag_stack"
.IX Subsection "_tag_stack"
.Vb 5
\&  Title   : _tag_stack
\&  Usage   : @tags = $self->_tag_stack;
\&  Function: Get an array of tags that have been accessed but not enclosed.
\&  Return  : 
\&  Args    :
.Ve
.Sh "_push_tag"
.IX Subsection "_push_tag"
.Sh "_pop_tag"
.IX Subsection "_pop_tag"
.Sh "_top_tag"
.IX Subsection "_top_tag"
.Vb 5
\&  Title   : _top_tag
\&  Usage   : $top = $self->_top_tag;
\&  Function: get the top tag in the tag stack.
\&  Return  : a tag name
\&  Args    : [none]
.Ve
.Sh "_chars_hash"
.IX Subsection "_chars_hash"
.Vb 5
\&  Title   : _chars_hash
\&  Usage   : $hash= $self->_chars_hash;
\&  Function: return the character cache for the specific tag
\&  Return  : a hash reference, which is intent for character storage for tags
\&  Args    : [none]
.Ve
.Sh "_current_hash"
.IX Subsection "_current_hash"
.Sh "_visited_count_inc"
.IX Subsection "_visited_count_inc"
.Vb 5
\&  Title   : _vistied_count_inc
\&  Usage   : $self->vistied_count_inc($tag); # the counter for the tag increase
\&  Function: the counter for the tag increase
\&  Return  : the current count after this increment
\&  Args    : the tag name [scalar]
.Ve
.Sh "_visited_count_dec"
.IX Subsection "_visited_count_dec"
.Vb 5
\&  Title   : _visited_count_dec
\&  Usage   : $self->_visited_count_dec($tag);
\&  Function: the counter for the tag decreases by one
\&  Return  : the current count for the specific tag after the decrement
\&  Args    : the tag name [scalar]
.Ve
.Sh "_visited_count"
.IX Subsection "_visited_count"
.Vb 5
\&  Title   : _visited_count
\&  Usage   : $count = $self->_visited_count
\&  Function: return the counter for the tag
\&  Return  : the current counter for the specific tag
\&  Args    : the tag name [scalar]
.Ve
