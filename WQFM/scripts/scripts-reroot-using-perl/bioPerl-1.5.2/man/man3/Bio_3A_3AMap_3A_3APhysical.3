.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::Physical 3"
.TH Bio::Map::Physical 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Map::Physical \- A class for handling a Physical Map (such as FPC)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::MapIO;
.Ve
.PP
.Vb 3
\&    # accquire a Bio::Map::Physical using Bio::MapIO::fpc
\&    my $mapio = new Bio::MapIO(-format => "fpc",-file => "rice.fpc",
\&                               -readcor => 0);
.Ve
.PP
.Vb 1
\&    my $physical = $mapio->next_map();
.Ve
.PP
.Vb 3
\&    # get all the markers ids
\&    foreach my $marker ( $physical->each_markerid() ) {
\&      print "Marker $marker\en";
.Ve
.PP
.Vb 2
\&      # acquire the marker object using Bio::Map::FPCMarker
\&      my $markerobj = $physical->get_markerobj($marker);
.Ve
.PP
.Vb 5
\&      # get all the clones hit by this marker
\&      foreach my $clone ($markerobj->each_cloneid() ) {
\&          print " +++$clone\en";
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is basically a continer class for a collection of Contig maps and
other physical map information.
.PP
Bio::Map::Physical has been tailored to work for \s-1FPC\s0 physical maps, but
could probably be used for others as well (with the appropriate MapIO
module).
.PP
This class also has some methods with specific functionalities:
.PP
.Vb 2
\&  print_gffstyle()     : Generates GFF; either Contigwise[Default] or
\&                         Groupwise
.Ve
.PP
.Vb 3
\&  print_contiglist()   : Prints the list of Contigs, markers that hit the
\&                         contig, the global position and whether the marker
\&                         is a placement (<P>) or a Framework (<F>) marker.
.Ve
.PP
.Vb 2
\&  print_markerlist()   : Prints the markers list; contig and corresponding
\&                         number of clones.
.Ve
.PP
.Vb 2
\&  matching_bands()     : Given two clones [and tolerence], this method
\&                         calculates how many matching bands do they have.
.Ve
.PP
.Vb 2
\&  coincidence_score()  : Given two clones [,tolerence and gellen], this
\&                         method calculates the Sulston Coincidence score.
.Ve
.PP
For faster access and better optimization, the data is stored internally in
hashes. The corresponding objects are created on request.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Gaurav Gupta"
.IX Header "AUTHOR - Gaurav Gupta"
Email gaurav@genome.arizona.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala  bix@sendu.me.uk
.SH "PROJECT LEADERS"
.IX Header "PROJECT LEADERS"
Jamie Hatfield      jamie@genome.arizona.edu
Dr. Cari Soderlund  cari@genome.arizona.edu
.SH "PROJECT DESCRIPTION"
.IX Header "PROJECT DESCRIPTION"
The project was done in Arizona Genomics Computational Laboratory (AGCoL)
at University of Arizona.
.PP
This work was funded by USDA-IFAFS grant #11180 titled \*(L"Web Resources for 
the Computation and Display of Physical Mapping Data\*(R".
.PP
For more information on this project, please refer: 
  http://www.genome.arizona.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SH "Access Methods"
.IX Header "Access Methods"
These methods let you get and set the member variables
.Sh "version"
.IX Subsection "version"
.Vb 6
\& Title   : version
\& Usage   : my $version = $map->version();
\& Function: Get/set the version of the program used to
\&           generate this map
\& Returns : scalar representing the version
\& Args    : none to get, OR string to set
.Ve
.Sh "modification_user"
.IX Subsection "modification_user"
.Vb 5
\& Title   : modification_user
\& Usage   : my $modification_user = $map->modification_user();
\& Function: Get/set the name of the user who last modified this map
\& Returns : scalar representing the username
\& Args    : none to get, OR string to set
.Ve
.Sh "group_type"
.IX Subsection "group_type"
.Vb 6
\& Title   : group_type
\& Usage   : $map->group_type($grptype);
\&               my $grptype = $map->group_type();
\& Function: Get/set the group type of this map
\& Returns : scalar representing the group type
\& Args    : none to get, OR string to set
.Ve
.Sh "group_abbr"
.IX Subsection "group_abbr"
.Vb 6
\& Title   : group_abbr
\& Usage   : $map->group_abbr($grpabbr);
\&               my $grpabbr = $map->group_abbr();
\& Function: get/set the group abbrev of this map
\& Returns : string representing the group abbrev
\& Args    : none to get, OR string to set
.Ve
.Sh "core_exists"
.IX Subsection "core_exists"
.Vb 5
\& Title   : core_exists
\& Usage   : my $core_exists = $map->core_exists();
\& Function: Get/set if the FPC file is accompanied by COR file
\& Returns : boolean
\& Args    : none to get, OR 1|0 to set
.Ve
.Sh "each_cloneid"
.IX Subsection "each_cloneid"
.Vb 5
\& Title   : each_cloneid
\& Usage   : my @clones = $map->each_cloneid();
\& Function: returns an array of clone names
\& Returns : list of clone names
\& Args    : none
.Ve
.Sh "get_cloneobj"
.IX Subsection "get_cloneobj"
.Vb 5
\& Title   : get_cloneobj
\& Usage   : my $cloneobj = $map->get_cloneobj('CLONEA');
\& Function: returns an object of the clone given in the argument
\& Returns : object of the clone
\& Args    : scalar representing the clone name
.Ve
.Sh "each_markerid"
.IX Subsection "each_markerid"
.Vb 5
\& Title   : each_markerid
\& Usage   : my @markers = $map->each_markerid();
\& Function: returns list of marker names
\& Returns : list of marker names
\& Args    : none
.Ve
.Sh "get_markerobj"
.IX Subsection "get_markerobj"
.Vb 5
\& Title   : get_markerobj
\& Usage   : my $markerobj = $map->get_markerobj('MARKERA');
\& Function: returns an object of the marker given in the argument
\& Returns : object of the marker
\& Args    : scalar representing the marker name
.Ve
.Sh "each_contigid"
.IX Subsection "each_contigid"
.Vb 5
\& Title   : each_contigid
\& Usage   : my @contigs = $map->each_contigid();
\& Function: returns a list of contigs (numbers)
\& Returns : list of contigs
\& Args    : none
.Ve
.Sh "get_contigobj"
.IX Subsection "get_contigobj"
.Vb 5
\& Title   : get_contigobj
\& Usage   : my $contigobj = $map->get_contigobj('CONTIG1');
\& Function: returns an object of the contig given in the argument
\& Returns : object of the contig
\& Args    : scalar representing the contig number
.Ve
.Sh "matching_bands"
.IX Subsection "matching_bands"
.Vb 7
\& Title   : matching_bands
\& Usage   : $self->matching_bands('cloneA','cloneB',[$tol]);
\& Function: given two clones [and tolerence], this method calculates how many
\&           matching bands do they have.
\&           (this method is ported directly from FPC)
\& Returns : scalar representing the number of matching bands
\& Args    : names of the clones ('cloneA', 'cloneB') [Default tolerence=7]
.Ve
.Sh "coincidence_score"
.IX Subsection "coincidence_score"
.Vb 8
\& Title   : coincidence_score
\& Usage   : $self->coincidence_score('cloneA','cloneB'[,$tol,$gellen]);
\& Function: given two clones [,tolerence and gellen], this method calculates
\&           the Sulston Coincidence score.
\&           (this method is ported directly from FPC)
\& Returns : scalar representing the Sulston coincidence score.
\& Args    : names of the clones ('cloneA', 'cloneB')
\&           [Default tol=7 gellen=3300.0]
.Ve
.Sh "print_contiglist"
.IX Subsection "print_contiglist"
.Vb 7
\& Title   : print_contiglist
\& Usage   : $map->print_contiglist([showall]); #[Default 0]
\& Function: prints the list of contigs, markers that hit the contig, the
\&           global position and whether the marker is a placement (P) or
\&           a Framework (F) marker.
\& Returns : none
\& Args    : [showall] [Default 0], 1 includes all the discrepant markers
.Ve
.Sh "print_markerlist"
.IX Subsection "print_markerlist"
.Vb 6
\& Title    : print_markerlist
\& Usage    : $map->print_markerlist();
\& Function : prints the marker list; contig and corresponding number of
\&            clones for each marker.
\& Returns  : none
\& Args     : none
.Ve
.Sh "print_gffstyle"
.IX Subsection "print_gffstyle"
.Vb 6
\& Title    : print_gffstyle
\& Usage    : $map->print_gffstyle([style]);
\& Function : prints GFF; either Contigwise (default) or Groupwise
\& Returns  : none
\& Args     : [style] default = 0 contigwise, else
\&                              1 groupwise (chromosome-wise).
.Ve
.Sh "_calc_markerposition"
.IX Subsection "_calc_markerposition"
.Vb 5
\& Title   : _calc_markerposition
\& Usage   : $map->_calc_markerposition();
\& Function: Calculates the position of the marker in the contig
\& Returns : none
\& Args    : none
.Ve
.Sh "_calc_contigposition"
.IX Subsection "_calc_contigposition"
.Vb 5
\& Title   : _calc_contigposition
\& Usage   : $map->_calc_contigposition();
\& Function: calculates the position of the contig in the group
\& Returns : none
\& Args    : none
.Ve
.Sh "_calc_contiggroup"
.IX Subsection "_calc_contiggroup"
.Vb 5
\& Title   : _calc_contiggroup
\& Usage   : $map->_calc_contiggroup();
\& Function: calculates the group of the contig
\& Returns : none
\& Args    : none
.Ve
.Sh "_set\fI<Type>\fPRef"
.IX Subsection "_set<Type>Ref"
.Vb 10
\& Title   : _set<Type>Ref
\& Usage   : These are used for initializing the reference of the hash in
\&           Bio::MapIO (fpc.pm) to the corresponding hash in Bio::Map
\&           (physical.pm). Should be used only from Bio::MapIO System.
\&               $map->setCloneRef(\e%_clones);
\&               $map->setMarkerRef(\e%_markers);
\&               $map->setContigRef(\e%_contigs);
\& Function: sets the hash references to the corresponding hashes
\& Returns : none
\& Args    : reference of the hash.
.Ve
