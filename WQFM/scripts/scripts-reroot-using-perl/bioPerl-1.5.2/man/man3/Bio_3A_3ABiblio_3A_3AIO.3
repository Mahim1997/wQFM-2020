.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Biblio::IO 3"
.TH Bio::Biblio::IO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Biblio::IO \- Handling the bibliographic references
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Biblio::IO;
.Ve
.PP
.Vb 4
\&    # getting citations from a file
\&    $in = Bio::Biblio::IO->new ('-file' => 'myfile.xml' ,
\&                                '-format' => 'medlinexml');
\&  # --- OR ---
.Ve
.PP
.Vb 4
\&    # getting citations from a string
\&    $in = Bio::Biblio::IO->new ('-data' => '<MedlineCitation>...</MedlineCitation>' ,
\&                                '-format' => 'medlinexml');
\&  #--- OR ---
.Ve
.PP
.Vb 4
\&    # getting citations from a string if IO::String is installed
\&    use IO::String;
\&    $in = Bio::Biblio::IO->new ('-fh' => IO::String->new ($citation),
\&                                '-format' => 'medlinexml');
.Ve
.PP
.Vb 1
\&    $in = Bio::Biblio::IO->new(-fh => $io_handle , '-format' => 'medlinexml');
.Ve
.PP
.Vb 1
\&  #--- OR ---
.Ve
.PP
.Vb 3
\&    # getting citations from any IO handler
\&    $in = Bio::Biblio::IO->new('-fh' => $io_handle ,
\&                               '-format' => 'medlinexml');
.Ve
.PP
.Vb 4
\&    # now, having $in, we can read all citations
\&    while ( my $citation = $in->next_bibref() ) {
\&        &do_something_with_citation ($citation);
\&    }
.Ve
.PP
.Vb 1
\&  #--- OR ---
.Ve
.PP
.Vb 10
\&    # again reading all citation but now a callback defined in your
\&    # code is used (note that the reading starts already when new()
\&    # is called)
\&    $io = new Bio::Biblio::IO ('-format'   => 'medlinexml',
\&                               '-file'     => $testfile,
\&                               '-callback' => \e&callback);
\&    sub callback {
\&        my $citation = shift;
\&        print $citation->{'_identifier'} . "\en";
\&    }
.Ve
.PP
.Vb 2
\&  #Now, to actually get a citation in an XML format,
\&  #use I<Bio::Biblio> module which returns an XML string:
.Ve
.PP
.Vb 5
\&    use Bio::Biblio;
\&    use Bio::Biblio::IO;
\&    my $xml = new Bio::Biblio->get_by_id ('12368254');
\&    my $reader = Bio::Biblio::IO->new ('-data' => $xml,
\&                                       '-format' => 'medlinexml');
.Ve
.PP
.Vb 3
\&    while (my $citation = $reader->next_bibref()) {
\&       #... do something here with $citation
\&       }
.Ve
.PP
.Vb 2
\&  #And, finally, the resulting citation can be received in different
\&  #output formats:
.Ve
.PP
.Vb 3
\&    $io = new Bio::Biblio::IO ('-format' => 'medlinexml',
\&                               '-result' => 'raw');
\&  #--- OR ---
.Ve
.PP
.Vb 2
\&    $io = new Bio::Biblio::IO ('-format' => 'medlinexml',
\&                               '-result' => 'medline2ref');
.Ve
.PP
.Vb 1
\&  #--- OR ---
.Ve
.PP
.Vb 2
\&    $io = new Bio::Biblio::IO ('-format' => 'pubmedxml',
\&                               '-result' => 'pubmed2ref');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Biblio::IO is a handler module for accessing bibliographic
citations. The citations can be in different formats \- assuming that
there is a corresponding module knowing that format in Bio::Biblio::IO
directory (e.g. Bio::Biblio::IO::medlinexml). The format (and the
module name) is given by the argument \fI\-format\fR.
.PP
Once an instance of \f(CW\*(C`Bio::Biblio::IO\*(C'\fR class is available, the
citations can be read by calling repeatedly method \fInext_bibref\fR:
.PP
.Vb 3
\&    while (my $citation = $reader->next_bibref()) {
\&       ... do something here with $citation
\&       }
.Ve
.PP
However, this may imply that all citations were already read into the
memory. If you expect a huge amount of citations to be read, you may
choose a \fIcallback\fR option. Your subroutine is specified in the
\&\f(CW\*(C`new()\*(C'\fR method and is called everytime a new citation is available
(see an example above in \s-1SYNOPSIS\s0).
.PP
The citations returned by \fInext_bibref\fR or given to your callback
routine can be of different formats depending on the argument
\&\fI\-result\fR. One result type is \fIraw\fR and it is represented by a
simple, not blessed hash table:
.PP
.Vb 1
\&    $io = new Bio::Biblio::IO ('-result' => 'raw');
.Ve
.PP
What other result formats are available depends on the module who
reads the citations in the first place. At the moment, the following
ones are available:
.PP
.Vb 1
\&    $io = new Bio::Biblio::IO ('-result' => 'medline2ref');
.Ve
.PP
This is a default result format for reading citations by the
\&\fImedlinexml\fR module. The \f(CW\*(C`medlinexml\*(C'\fR module is again the default
one. Which means that you can almost omit arguments (you still need to
say where the citations come from):
.PP
.Vb 1
\&    $io = new Bio::Biblio::IO ('-file' => 'data/medline_data.xml');
.Ve
.PP
Another result format available is for \s-1PUBMED\s0 citations (which is a
super-set of the \s-1MEDLINE\s0 citations having few more tags):
.PP
.Vb 3
\&    $io = new Bio::Biblio::IO ('-format' => 'pubmedxml',
\&                               '-result' => 'pubmed2ref',
\&                               '-data'   => $citation);
.Ve
.PP
Or, because \f(CW\*(C`pubmed2ref\*(C'\fR is a default one for \s-1PUBMED\s0 citations, you can say just:
.PP
.Vb 2
\&    $io = new Bio::Biblio::IO ('-format' => 'pubmedxml',
\&                               '-data'   => $citation);
.Ve
.PP
Both \f(CW\*(C`medline2ref\*(C'\fR and \f(CW\*(C`pubmed2ref\*(C'\fR results are objects defined in
the directory \f(CW\*(C`Bio::Biblio\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
An example script \fIexamples/biblio.pl\fR. It has many options and its
own help.  The relevant options to this \s-1IO\s0 module are \fI\-f\fR
(specifying what file to read) and \fI\-O\fR (specifying what result
format to achieve).
.IP "\(bu" 4
OpenBQS home page: http://www.ebi.ac.uk/~senger/openbqs
.IP "\(bu" 4
Comments to the Perl client: http://www.ebi.ac.uk/~senger/openbqs/Client_perl.html
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Senger (senger@ebi.ac.uk)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002 European Bioinformatics Institute. All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are preceded with a _
.Sh "next_bibref"
.IX Subsection "next_bibref"
.Vb 6
\& Usage   : $citation = stream->next_bibref
\& Function: Reads the next citation object from the stream and returns it.
\& Returns : a Bio::Biblio::Ref citation object, or something else
\&           (depending on the '-result' argument given in the 'new()'
\&            method).
\& Args    : none
.Ve
.Sh "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 4
\& Usage   : $class->_load_format_module ($format)
\& Returns : 1 on success, undef on failure
\& Args    : 'format' should contain the last part of the
\&           name of a module who does the real implementation
.Ve
.PP
It does (in run\-time) a similar thing as
.PP
.Vb 1
\&   require Bio::Biblio::IO::$format
.Ve
.PP
It throws an exception if it fails to find and load the module
(for example, because of the compilation errors in the module).
.Sh "_guess_format"
.IX Subsection "_guess_format"
.Vb 3
\& Usage   : $class->_guess_format ($filename)
\& Returns : string with a guessed format of the input data (e.g. 'medlinexml')
\& Args    : a file name whose extension can help to guess its format
.Ve
.PP
It makes an expert guess what kind of data are in the given file
(but be prepare that \f(CW$filename\fR may be empty).
