.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SimpleAlign 3"
.TH Bio::SimpleAlign 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SimpleAlign \- Multiple alignments held as a set of sequences
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Use Bio::AlignIO to read in the alignment
\&  $str = Bio::AlignIO->new(-file => 't/data/testaln.pfam');
\&  $aln = $str->next_aln();
.Ve
.PP
.Vb 8
\&  # Describe
\&  print $aln->length;
\&  print $aln->no_residues;
\&  print $aln->is_flush;
\&  print $aln->no_sequences;
\&  print $aln->score;
\&  print $aln->percentage_identity;
\&  print $aln->consensus_string(50);
.Ve
.PP
.Vb 2
\&  # Find the position in the alignment for a sequence location
\&  $pos = $aln->column_from_residue_number('1433_LYCES', 14); # = 6;
.Ve
.PP
.Vb 8
\&  # Extract sequences and check values for the alignment column $pos
\&  foreach $seq ($aln->each_seq) {
\&      $res = $seq->subseq($pos, $pos);
\&      $count{$res}++;
\&  }
\&  foreach $res (keys %count) {
\&      printf "Res: %s  Count: %2d\en", $res, $count{$res};
\&  }
.Ve
.PP
.Vb 6
\&  # Manipulate
\&  $aln->remove_seq($seq);
\&  $mini_aln = $aln->slice(20,30);  # get a block of columns
\&  $mini_aln = $aln->select_noncont(1,3,5,7,11); # get single columns
\&  $new_aln = $aln->remove_columns([20,30]); # remove by position
\&  $new_aln = $aln->remove_columns(['mismatch']); # remove by property
.Ve
.PP
.Vb 5
\&  # Analyze
\&  $str = $aln->consensus_string($threshold_percent);
\&  $str = $aln->match_line();
\&  $str = $aln->cigar_line()
\&  $id = $aln->percentage_identity;
.Ve
.PP
See the module documentation for details and more methods.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SimpleAlign is an object that handles a multiple sequence alignment
(\s-1MSA\s0). It is very permissive of types (it does not insist on sequences
being all same length, for example). Think of it as a set of sequences
with a whole series of built-in manipulations and methods for reading and
writing alignments.
.PP
SimpleAlign uses Bio::LocatableSeq, a subclass of Bio::PrimarySeq,
to store its sequences. These are subsequences with a start and end
positions in the parent reference sequence. Each sequence in the
SimpleAlign object is a Bio::LocatableSeq.
.PP
SimpleAlign expects the combination of name, start, and end for a
given sequence to be unique in the alignment, and this is the key for the
internal hashes (name, start, end are abbreviated \f(CW\*(C`nse\*(C'\fR in the code).
However, in some cases people do not want the name/start\-end to be displayed:
either multiple names in an alignment or names specific to the alignment
(\s-1ROA1_HUMAN_1\s0, \s-1ROA1_HUMAN_2\s0 etc). These names are called
\&\f(CW\*(C`displayname\*(C'\fR, and generally is what is used to print out the
alignment. They default to name/start\-end.
.PP
The SimpleAlign Module is derived from the Align module by Ewan Birney.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ewan Birney, birney@ebi.ac.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Allen Day, allenday\-at\-ucla.edu,
Richard Adams, Richard.Adams\-at\-ed.ac.uk,
David J. Evans, David.Evans\-at\-vir.gla.ac.uk,
Heikki Lehvaslaiho, heikki\-at\-bioperl\-dot\-org,
Allen Smith, allens\-at\-cpan.org,
Jason Stajich, jason\-at\-bioperl.org,
Anthony Underwood, aunderwood\-at\-phls.org.uk,
Xintao Wei & Giri Narasimhan, giri\-at\-cs.fiu.edu
Brian Osborne, bosborne at alum.mit.edu
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::LocatableSeq
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title     : new
\& Usage     : my $aln = new Bio::SimpleAlign();
\& Function  : Creates a new simple align object
\& Returns   : Bio::SimpleAlign
\& Args      : -source => string representing the source program
\&                        where this alignment came from
.Ve
.SH "Modifier methods"
.IX Header "Modifier methods"
These methods modify the \s-1MSA\s0 by adding, removing or shuffling complete
sequences.
.Sh "add_seq"
.IX Subsection "add_seq"
.Vb 7
\& Title     : add_seq
\& Usage     : $myalign->add_seq($newseq);
\& Function  : Adds another sequence to the alignment. *Does not* align
\&             it - just adds it to the hashes.
\& Returns   : nothing
\& Args      : a Bio::LocatableSeq object
\&             order (optional)
.Ve
.PP
See Bio::LocatableSeq for more information
.Sh "remove_seq"
.IX Subsection "remove_seq"
.Vb 5
\& Title     : remove_seq
\& Usage     : $aln->remove_seq($seq);
\& Function  : Removes a single sequence from an alignment
\& Returns   :
\& Argument  : a Bio::LocatableSeq object
.Ve
.Sh "purge"
.IX Subsection "purge"
.Vb 7
\& Title   : purge
\& Usage   : $aln->purge(0.7);
\& Function: Removes sequences above given sequence similarity
\&           This function will grind on large alignments. Beware!
\& Example :
\& Returns : An array of the removed sequences
\& Args    : float, threshold for similarity
.Ve
.Sh "sort_alphabetically"
.IX Subsection "sort_alphabetically"
.Vb 6
\& Title     : sort_alphabetically
\& Usage     : $ali->sort_alphabetically
\& Function  : Changes the order of the alignemnt to alphabetical on name
\&             followed by numerical by number.
\& Returns   :
\& Argument  :
.Ve
.Sh "set_new_reference"
.IX Subsection "set_new_reference"
.Vb 9
\& Title     : set_new_reference
\& Usage     : $aln->set_new_reference(3 or 'B31'):  Select the 3rd sequence, or
\&             the sequence whoes name is "B31" (full, exact, and case-sensitive),
\&             as the reference (1st) sequence
\& Function  : Change/Set a new reference (i.e., the first) sequence
\& Returns   : a new Bio::SimpleAlign object.
\&             Throws an exception if designated sequence not found
\& Argument  : a positive integer of sequence order, or a sequence name
\&             in the original alignment
.Ve
.Sh "uniq_seq"
.IX Subsection "uniq_seq"
.Vb 9
\& Title     : uniq_seq
\& Usage     : $aln->uniq_seq():  Remove identical sequences in
\&             in the alignment.  Ambiguous base ("N", "n") and
\&             leading and ending gaps ("-") are NOT counted as
\&             differences.
\& Function  : Make a new alignment of unique sequence types (STs)
\& Returns   : 1. a new Bio::SimpleAlign object (all sequences renamed as "ST")
\&             2. ST of each sequence in STDERR
\& Argument  : None
.Ve
.SH "Sequence selection methods"
.IX Header "Sequence selection methods"
Methods returning one or more sequences objects.
.Sh "each_seq"
.IX Subsection "each_seq"
.Vb 5
\& Title     : each_seq
\& Usage     : foreach $seq ( $align->each_seq() )
\& Function  : Gets a Seq object from the alignment
\& Returns   : Seq object
\& Argument  :
.Ve
.Sh "each_alphabetically"
.IX Subsection "each_alphabetically"
.Vb 7
\& Title     : each_alphabetically
\& Usage     : foreach $seq ( $ali->each_alphabetically() )
\& Function  : Returns a sequence object, but the objects are returned
\&             in alphabetically sorted order.
\&             Does not change the order of the alignment.
\& Returns   : Seq object
\& Argument  :
.Ve
.Sh "each_seq_with_id"
.IX Subsection "each_seq_with_id"
.Vb 7
\& Title     : each_seq_with_id
\& Usage     : foreach $seq ( $align->each_seq_with_id() )
\& Function  : Gets a Seq objects from the alignment, the contents
\&             being those sequences with the given name (there may be
\&             more than one)
\& Returns   : Seq object
\& Argument  : a seq name
.Ve
.Sh "get_seq_by_pos"
.IX Subsection "get_seq_by_pos"
.Vb 7
\& Title     : get_seq_by_pos
\& Usage     : $seq = $aln->get_seq_by_pos(3) # third sequence from the alignment
\& Function  : Gets a sequence based on its position in the alignment.
\&             Numbering starts from 1.  Sequence positions larger than
\&             no_sequences() will thow an error.
\& Returns   : a Bio::LocatableSeq object
\& Args      : positive integer for the sequence osition
.Ve
.Sh "seq_with_features"
.IX Subsection "seq_with_features"
.Vb 5
\& Title   : seq_with_features
\& Usage   : $seq = $aln->seq_with_features(-pos => 1,
\&                                          -consensus => 60
\&                                          -mask =>
\&           sub { my $consensus = shift;
.Ve
.PP
.Vb 23
\&                 for my $i (1..5){
\&                    my $n = 'N' x $i;
\&                    my $q = '\e?' x $i;
\&                    while($consensus =~ /[^?]$q[^?]/){
\&                       $consensus =~ s/([^?])$q([^?])/$1$n$2/;
\&                    }
\&                  }
\&                 return $consensus;
\&               }
\&                                         );
\& Function: produces a Bio::Seq object by first splicing gaps from -pos
\&           (by means of a splice_by_seq_pos() call), then creating
\&           features using non-? chars (by means of a consensus_string()
\&           call with stringency -consensus).
\& Returns : a Bio::Seq object
\& Args    : -pos : required. sequence from which to build the Bio::Seq
\&             object
\&           -consensus : optional, defaults to consensus_string()'s
\&             default cutoff value
\&           -mask : optional, a coderef to apply to consensus_string()'s
\&             output before building features.  this may be useful for
\&             closing gaps of 1 bp by masking over them with N, for
\&             instance
.Ve
.SH "Create new alignments"
.IX Header "Create new alignments"
The result of these methods are horizontal or vertical subsets of the
current \s-1MSA\s0.
.Sh "select"
.IX Subsection "select"
.Vb 8
\& Title     : select
\& Usage     : $aln2 = $aln->select(1, 3) # three first sequences
\& Function  : Creates a new alignment from a continuous subset of
\&             sequences.  Numbering starts from 1.  Sequence positions
\&             larger than no_sequences() will thow an error.
\& Returns   : a Bio::SimpleAlign object
\& Args      : positive integer for the first sequence
\&             positive integer for the last sequence to include (optional)
.Ve
.Sh "select_noncont"
.IX Subsection "select_noncont"
.Vb 7
\& Title     : select_noncont
\& Usage     : $aln2 = $aln->select_noncont(1, 3) # 1st and 3rd sequences
\& Function  : Creates a new alignment from a subset of
\&             sequences.  Numbering starts from 1.  Sequence positions
\&             larger than no_sequences() will thow an error.
\& Returns   : a Bio::SimpleAlign object
\& Args      : array of integers for the sequences
.Ve
.Sh "slice"
.IX Subsection "slice"
.Vb 11
\& Title     : slice
\& Usage     : $aln2 = $aln->slice(20,30)
\& Function  : Creates a slice from the alignment inclusive of start and
\&             end columns, and the first column in the alignment is denoted 1.
\&             Sequences with no residues in the slice are excluded from the
\&             new alignment and a warning is printed. Slice beyond the length of
\&             the sequence does not do padding.
\& Returns   : A Bio::SimpleAlign object
\& Args      : Positive integer for start column, positive integer for end column,
\&             optional boolean which if true will keep gap-only columns in the newly
\&             created slice. Example:
.Ve
.PP
.Vb 1
\&             $aln2 = $aln->slice(20,30,1)
.Ve
.Sh "remove_columns"
.IX Subsection "remove_columns"
.Vb 10
\& Title     : remove_columns
\& Usage     : $aln2 = $aln->remove_columns(['mismatch','weak']) or
\&             $aln2 = $aln->remove_columns([0,0],[6,8])
\& Function  : Creates an aligment with columns removed corresponding to
\&             the specified type or by specifying the columns by number.
\& Returns   : Bio::SimpleAlign object
\& Args      : Array ref of types ('match'|'weak'|'strong'|'mismatch'|'gaps'|
\&             'all_gaps_columns') or array ref where the referenced array
\&             contains a pair of integers that specify a range.
\&             The first column is 0,
.Ve
.Sh "remove_gaps"
.IX Subsection "remove_gaps"
.Vb 8
\& Title     : remove_gaps
\& Usage     : $aln2 = $aln->remove_gaps
\& Function  : Creates an aligment with gaps removed
\& Returns   : a Bio::SimpleAlign object
\& Args      : a gap character(optional) if none specified taken
\&                from $self->gap_char,
\&             [optional] $all_gaps_columns flag (1 or 0, default is 0)
\&                        indicates that only all-gaps columns should be deleted
.Ve
.PP
Used from method remove_columns in most cases. Set gap character
using \fIgap_char()\fR.
.SH "Change sequences within the MSA"
.IX Header "Change sequences within the MSA"
These methods affect characters in all sequences without changing the
alignment.
.Sh "splice_by_seq_pos"
.IX Subsection "splice_by_seq_pos"
.Vb 7
\& Title   : splice_by_seq_pos
\& Usage   : $status = splice_by_seq_pos(1);
\& Function: splices all aligned sequences where the specified sequence
\&           has gaps.
\& Example :
\& Returns : 1 on success
\& Args    : position of sequence to splice by
.Ve
.Sh "map_chars"
.IX Subsection "map_chars"
.Vb 4
\& Title     : map_chars
\& Usage     : $ali->map_chars('\e.','-')
\& Function  : Does a s/$arg1/$arg2/ on the sequences. Useful for gap
\&             characters
.Ve
.PP
.Vb 6
\&             Notice that the from (arg1) is interpretted as a regex,
\&             so be careful about quoting meta characters (eg
\&             $ali->map_chars('.','-') wont do what you want)
\& Returns   :
\& Argument  : 'from' rexexp
\&             'to' string
.Ve
.Sh "uppercase"
.IX Subsection "uppercase"
.Vb 5
\& Title     : uppercase()
\& Usage     : $ali->uppercase()
\& Function  : Sets all the sequences to uppercase
\& Returns   :
\& Argument  :
.Ve
.Sh "cigar_line"
.IX Subsection "cigar_line"
.Vb 9
\& Title    : cigar_line()
\& Usage    : %cigars = $align->cigar_line()
\& Function : Generates a "cigar" (Compact Idiosyncratic Gapped Alignment
\&            Report) line for each sequence in the alignment. Examples are
\&            "1,60" or "5,10:12,58", where the numbers refer to conserved
\&            positions within the alignment. The keys of the hash are the
\&            NSEs (name/start/end) assigned to each sequence.
\& Args     : none
\& Returns  : Hash of strings (cigar lines)
.Ve
.Sh "match_line"
.IX Subsection "match_line"
.Vb 8
\& Title    : match_line()
\& Usage    : $line = $align->match_line()
\& Function : Generates a match line - much like consensus string
\&            except that a line indicating the '*' for a match.
\& Args     : (optional) Match line characters ('*' by default)
\&            (optional) Strong match char (':' by default)
\&            (optional) Weak match char ('.' by default)
\& Returns  : String
.Ve
.Sh "gap_line"
.IX Subsection "gap_line"
.Vb 6
\& Title    : gap_line()
\& Usage    : $line = $align->gap_line()
\& Function : Generates a gap line - much like consensus string
\&            except that a line where '-' represents gap
\& Args     : (optional) gap line characters ('-' by default)
\& Returns  : string
.Ve
.Sh "all_gap_line"
.IX Subsection "all_gap_line"
.Vb 6
\& Title    : all_gap_line()
\& Usage    : $line = $align->all_gap_line()
\& Function : Generates a gap line - much like consensus string
\&            except that a line where '-' represents all-gap column
\& Args     : (optional) gap line characters ('-' by default)
\& Returns  : string
.Ve
.Sh "gap_col_matrix"
.IX Subsection "gap_col_matrix"
.Vb 7
\& Title    : gap_col_matrix()
\& Usage    : my $cols = $align->gap_col_matrix()
\& Function : Generates an array of hashes where
\&            each entry in the array is a hash reference
\&            with keys of all the sequence names and
\&            and value of 1 or 0 if the sequence has a gap at that column
\& Args     : (optional) gap line characters ($aln->gap_char or '-' by default)
.Ve
.Sh "match"
.IX Subsection "match"
.Vb 5
\& Title     : match()
\& Usage     : $ali->match()
\& Function  : Goes through all columns and changes residues that are
\&             identical to residue in first sequence to match '.'
\&             character. Sets match_char.
.Ve
.PP
.Vb 6
\&             USE WITH CARE: Most MSA formats do not support match
\&             characters in sequences, so this is mostly for output
\&             only. NEXUS format (Bio::AlignIO::nexus) can handle
\&             it.
\& Returns   : 1
\& Argument  : a match character, optional, defaults to '.'
.Ve
.Sh "unmatch"
.IX Subsection "unmatch"
.Vb 5
\& Title     : unmatch()
\& Usage     : $ali->unmatch()
\& Function  : Undoes the effect of method match. Unsets match_char.
\& Returns   : 1
\& Argument  : a match character, optional, defaults to '.'
.Ve
.PP
See match and match_char
.SH "MSA attibutes"
.IX Header "MSA attibutes"
Methods for setting and reading the \s-1MSA\s0 attributes.
.PP
Note that the methods defining character semantics depend on the user
to set them sensibly.  They are needed only by certain input/output
methods. Unset them by setting to an empty string ('').
.Sh "id"
.IX Subsection "id"
.Vb 5
\& Title     : id
\& Usage     : $myalign->id("Ig")
\& Function  : Gets/sets the id field of the alignment
\& Returns   : An id string
\& Argument  : An id string (optional)
.Ve
.Sh "accession"
.IX Subsection "accession"
.Vb 5
\& Title     : accession
\& Usage     : $myalign->accession("PF00244")
\& Function  : Gets/sets the accession field of the alignment
\& Returns   : An acc string
\& Argument  : An acc string (optional)
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title     : description
\& Usage     : $myalign->description("14-3-3 proteins")
\& Function  : Gets/sets the description field of the alignment
\& Returns   : An description string
\& Argument  : An description string (optional)
.Ve
.Sh "missing_char"
.IX Subsection "missing_char"
.Vb 7
\& Title     : missing_char
\& Usage     : $myalign->missing_char("?")
\& Function  : Gets/sets the missing_char attribute of the alignment
\&             It is generally recommended to set it to 'n' or 'N'
\&             for nucleotides and to 'X' for protein.
\& Returns   : An missing_char string,
\& Argument  : An missing_char string (optional)
.Ve
.Sh "match_char"
.IX Subsection "match_char"
.Vb 5
\& Title     : match_char
\& Usage     : $myalign->match_char('.')
\& Function  : Gets/sets the match_char attribute of the alignment
\& Returns   : An match_char string,
\& Argument  : An match_char string (optional)
.Ve
.Sh "gap_char"
.IX Subsection "gap_char"
.Vb 5
\& Title     : gap_char
\& Usage     : $myalign->gap_char('-')
\& Function  : Gets/sets the gap_char attribute of the alignment
\& Returns   : An gap_char string, defaults to '-'
\& Argument  : An gap_char string (optional)
.Ve
.Sh "symbol_chars"
.IX Subsection "symbol_chars"
.Vb 5
\& Title   : symbol_chars
\& Usage   : my @symbolchars = $aln->symbol_chars;
\& Function: Returns all the seen symbols (other than gaps)
\& Returns : array of characters that are the seen symbols
\& Args    : boolean to include the gap/missing/match characters
.Ve
.SH "Alignment descriptors"
.IX Header "Alignment descriptors"
These read only methods describe the \s-1MSA\s0 in various ways.
.Sh "score"
.IX Subsection "score"
.Vb 5
\& Title     : score
\& Usage     : $str = $ali->score()
\& Function  : get/set a score of the alignment
\& Returns   : a score for the alignment
\& Argument  : an optional score to set
.Ve
.Sh "consensus_string"
.IX Subsection "consensus_string"
.Vb 9
\& Title     : consensus_string
\& Usage     : $str = $ali->consensus_string($threshold_percent)
\& Function  : Makes a strict consensus
\& Returns   : Consensus string
\& Argument  : Optional treshold ranging from 0 to 100.
\&             The consensus residue has to appear at least threshold %
\&             of the sequences at a given location, otherwise a '?'
\&             character will be placed at that location.
\&             (Default value = 0%)
.Ve
.Sh "consensus_iupac"
.IX Subsection "consensus_iupac"
.Vb 5
\& Title     : consensus_iupac
\& Usage     : $str = $ali->consensus_iupac()
\& Function  : Makes a consensus using IUPAC ambiguity codes from DNA
\&             and RNA. The output is in upper case except when gaps in
\&             a column force output to be in lower case.
.Ve
.PP
.Vb 7
\&             Note that if your alignment sequences contain a lot of
\&             IUPAC ambiquity codes you often have to manually set
\&             alphabet.  Bio::PrimarySeq::_guess_type thinks they
\&             indicate a protein sequence.
\& Returns   : consensus string
\& Argument  : none
\& Throws    : on protein sequences
.Ve
.Sh "consensus_meta"
.IX Subsection "consensus_meta"
.Vb 7
\& Title     : consensus_meta
\& Usage     : $seqmeta = $ali->consensus_meta()
\& Function  : Returns a Bio::Seq::Meta object containing the consensus
\&             strings derived from meta data analysis.
\& Returns   : Bio::Seq::Meta 
\& Argument  : Bio::Seq::Meta 
\& Throws    : non-MetaI object
.Ve
.Sh "is_flush"
.IX Subsection "is_flush"
.Vb 6
\& Title     : is_flush
\& Usage     : if ( $ali->is_flush() )
\& Function  : Tells you whether the alignment
\&           : is flush, i.e. all of the same length
\& Returns   : 1 or 0
\& Argument  :
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 6
\& Title     : length()
\& Usage     : $len = $ali->length()
\& Function  : Returns the maximum length of the alignment.
\&             To be sure the alignment is a block, use is_flush
\& Returns   : Integer
\& Argument  :
.Ve
.Sh "maxdisplayname_length"
.IX Subsection "maxdisplayname_length"
.Vb 6
\& Title     : maxdisplayname_length
\& Usage     : $ali->maxdisplayname_length()
\& Function  : Gets the maximum length of the displayname in the
\&             alignment. Used in writing out various MSA formats.
\& Returns   : integer
\& Argument  :
.Ve
.Sh "max_metaname_length"
.IX Subsection "max_metaname_length"
.Vb 7
\& Title     : max_metaname_length
\& Usage     : $ali->max_metaname_length()
\& Function  : Gets the maximum length of the meta name tags in the
\&             alignment for the sequences and for the alignment.
\&             Used in writing out various MSA formats.
\& Returns   : integer
\& Argument  : None
.Ve
.Sh "no_residues"
.IX Subsection "no_residues"
.Vb 5
\& Title     : no_residues
\& Usage     : $no = $ali->no_residues
\& Function  : number of residues in total in the alignment
\& Returns   : integer
\& Argument  :
.Ve
.Sh "no_sequences"
.IX Subsection "no_sequences"
.Vb 5
\& Title     : no_sequences
\& Usage     : $depth = $ali->no_sequences
\& Function  : number of sequence in the sequence alignment
\& Returns   : integer
\& Argument  :
.Ve
.Sh "average_percentage_identity"
.IX Subsection "average_percentage_identity"
.Vb 11
\& Title   : average_percentage_identity
\& Usage   : $id = $align->average_percentage_identity
\& Function: The function uses a fast method to calculate the average
\&           percentage identity of the alignment
\& Returns : The average percentage identity of the alignment
\& Args    : None
\& Notes   : This method implemented by Kevin Howe calculates a figure that is
\&           designed to be similar to the average pairwise identity of the
\&           alignment (identical in the absence of gaps), without having to
\&           explicitly calculate pairwise identities proposed by Richard Durbin.
\&           Validated by Ewan Birney ad Alex Bateman.
.Ve
.Sh "percentage_identity"
.IX Subsection "percentage_identity"
.Vb 6
\& Title   : percentage_identity
\& Usage   : $id = $align->percentage_identity
\& Function: The function calculates the average percentage identity
\&           (aliased to average_percentage_identity)
\& Returns : The average percentage identity
\& Args    : None
.Ve
.Sh "overall_percentage_identity"
.IX Subsection "overall_percentage_identity"
.Vb 6
\& Title   : percentage_identity
\& Usage   : $id = $align->percentage_identity
\& Function: The function calculates the percentage identity of
\&           the conserved columns
\& Returns : The percentage identity of the conserved columns
\& Args    : None
.Ve
.SH "Alignment positions"
.IX Header "Alignment positions"
Methods to map a sequence position into an alignment column and back.
\&\fIcolumn_from_residue_number()\fR does the former. The latter is really a
property of the sequence object and can done using
Bio::LocatableSeq::location_from_column:
.PP
.Vb 4
\&    # select somehow a sequence from the alignment, e.g.
\&    my $seq = $aln->get_seq_by_pos(1);
\&    #$loc is undef or Bio::LocationI object
\&    my $loc = $seq->location_from_column(5);
.Ve
.Sh "column_from_residue_number"
.IX Subsection "column_from_residue_number"
.Vb 6
\& Title   : column_from_residue_number
\& Usage   : $col = $ali->column_from_residue_number( $seqname, $resnumber)
\& Function: This function gives the position in the alignment
\&           (i.e. column number) of the given residue number in the
\&           sequence with the given name. For example, for the
\&           alignment
.Ve
.PP
.Vb 3
\&             Seq1/91-97 AC..DEF.GH.
\&             Seq2/24-30 ACGG.RTY...
\&                Seq3/43-51 AC.DDEF.GHI
.Ve
.PP
.Vb 3
\&           column_from_residue_number( "Seq1", 94 ) returns 6.
\&           column_from_residue_number( "Seq2", 25 ) returns 2.
\&           column_from_residue_number( "Seq3", 50 ) returns 10.
.Ve
.PP
.Vb 3
\&           An exception is thrown if the residue number would lie
\&           outside the length of the aligment
\&           (e.g. column_from_residue_number( "Seq2", 22 )
.Ve
.PP
.Vb 3
\&          Note: If the the parent sequence is represented by more than
\&                one alignment sequence and the residue number is present in
\&                them, this method finds only the first one.
.Ve
.PP
.Vb 5
\& Returns : A column number for the position in the alignment of the
\&           given residue in the given sequence (1 = first column)
\& Args    : A sequence id/name (not a name/start-end)
\&           A residue number in the whole sequence (not just that
\&           segment of it in the alignment)
.Ve
.SH "Sequence names"
.IX Header "Sequence names"
Methods to manipulate the display name. The default name based on the
sequence id and subsequence positions can be overridden in various
ways.
.Sh "displayname"
.IX Subsection "displayname"
.Vb 6
\& Title     : displayname
\& Usage     : $myalign->displayname("Ig", "IgA")
\& Function  : Gets/sets the display name of a sequence in the alignment
\& Returns   : A display name string
\& Argument  : name of the sequence
\&             displayname of the sequence (optional)
.Ve
.Sh "set_displayname_count"
.IX Subsection "set_displayname_count"
.Vb 6
\& Title     : set_displayname_count
\& Usage     : $ali->set_displayname_count
\& Function  : Sets the names to be name_# where # is the number of
\&             times this name has been used.
\& Returns   : 1, on success
\& Argument  :
.Ve
.Sh "set_displayname_flat"
.IX Subsection "set_displayname_flat"
.Vb 6
\& Title     : set_displayname_flat
\& Usage     : $ali->set_displayname_flat()
\& Function  : Makes all the sequences be displayed as just their name,
\&             not name/start-end
\& Returns   : 1
\& Argument  :
.Ve
.Sh "set_displayname_normal"
.IX Subsection "set_displayname_normal"
.Vb 5
\& Title     : set_displayname_normal
\& Usage     : $ali->set_displayname_normal()
\& Function  : Makes all the sequences be displayed as name/start-end
\& Returns   : 1, on success
\& Argument  :
.Ve
.Sh "source"
.IX Subsection "source"
.Vb 6
\& Title   : source
\& Usage   : $obj->source($newval)
\& Function: sets the Alignment source program
\& Example :
\& Returns : value of source
\& Args    : newvalue (optional)
.Ve
.Sh "annotation"
.IX Subsection "annotation"
.Vb 6
\& Title   : annotation
\& Usage   : $ann = $aln->annotation or 
\&           $aln->annotation($ann)
\& Function: Gets or sets the annotation
\& Returns : Bio::AnnotationCollectionI object
\& Args    : None or Bio::AnnotationCollectionI object
.Ve
.PP
See Bio::AnnotationCollectionI and Bio::Annotation::Collection
for more information
