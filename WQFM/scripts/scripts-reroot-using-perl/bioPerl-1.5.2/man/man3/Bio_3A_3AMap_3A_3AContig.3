.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::Contig 3"
.TH Bio::Map::Contig 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Map::Contig \- A MapI implementation handling the contigs of a
Physical Map (such as FPC)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # get the contig object of $contig from the Bio::Map::Physical
\&    my $ctgobj = $physical->get_contigobj($contig);
.Ve
.PP
.Vb 4
\&    # acquire all the markers that lie in this contig
\&    foreach my $marker ($ctgobj->each_markerid()) {
\&        print "   +++$marker\en";
\&    }
.Ve
.PP
.Vb 2
\&    # find the group of this contig
\&    print "Group: ",$ctgobj->group(),"\en";
.Ve
.PP
.Vb 3
\&    # find the range of this contig
\&    print "RANGE: start:",$ctgobj->range()->start(),"\etend: ",
\&           $ctgobj->range()->end(),"\en";
.Ve
.PP
.Vb 2
\&    # find the position of this contig in $group (chromosome)
\&    print "Position in Group $group"," = ",$ctgobj->position($group),"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of Bio::Map::MapI.  It handles the
essential storage of name, species, type, and units as well as in
memory representation of the elements of a map.
.PP
Bio::Map::Contig has been tailored to work for \s-1FPC\s0 physical maps, but
could probably be used for others as well (with the appropriate MapIO
module).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Gaurav Gupta"
.IX Header "AUTHOR - Gaurav Gupta"
Email gaurav@genome.arizona.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala  bix@sendu.me.uk
.SH "PROJECT LEADERS"
.IX Header "PROJECT LEADERS"
Jamie Hatfield      jamie@genome.arizona.edu
Dr. Cari Soderlund  cari@genome.arizona.edu
.SH "PROJECT DESCRIPTION"
.IX Header "PROJECT DESCRIPTION"
The project was done in Arizona Genomics Computational Laboratory (AGCoL)
at University of Arizona.
.PP
This work was funded by USDA-IFAFS grant #11180 titled \*(L"Web Resources for 
the Computation and Display of Physical Mapping Data\*(R".
.PP
For more information on this project, please refer: 
  http://www.genome.arizona.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 15
\& Title   : new
\& Usage   : my $clone = Bio::Map::Contig->new
\&                      (
\&                       -name    => $name,
\&                       -chr_remark   => $cremark,
\&                       -user_remark  => $uremark,
\&                       -trace_remark => $tremark,
\&                       -group   => $group,
\&                       -subgroup=> $subgroup,
\&                       -anchor  => $anchor,
\&                       -markers => \e%markers,
\&                       -clones  => \e%clones,
\&                       -position => $pos
\&                       -range    => Bio::Range->new(-start =>$s,-end=>$e),
\&                       );
.Ve
.PP
.Vb 15
\& Function: Initialize a new Bio::Map::Contig object
\&           Most people will not use this directly but get Markers
\&           through L<Bio::MapIO::fpc>
\& Returns : L<Bio::Map::Contig> object
\& Args    : ( -name    => name string,
\&             -chr_remark   => chr remark string,
\&             -user_remark  => userremark string,
\&             -trace_remark => tremark string,
\&             -group   => group string,
\&             -subgroup=> subgroup string,
\&             -anchor  => boolean if this is anchored or not,
\&             -markers => hashref of contained markers,
\&             -clones  => hashref of contained clones,
\&             -position => position
\&             -range    => L<Bio::Range>
.Ve
.Sh "Modifier methods"
.IX Subsection "Modifier methods"
All methods present in Bio::Map::SimpleMap are implemented by this class.
Most of the methods are inherited from SimpleMap.  The following methods
have been modified to reflect the needs of physical maps.
.Sh "chr_remark"
.IX Subsection "chr_remark"
.Vb 5
\& Title   : chr_remark
\& Usage   : my $chrremark = $contigobj->chr_remark();
\& Function: Get/set the group remark for this contig
\& Returns : scalar representing the current group_remark of this contig
\& Args    : none to get, OR string to set
.Ve
.Sh "user_remark"
.IX Subsection "user_remark"
.Vb 5
\& Title   : user_remark
\& Usage   : my $userremark = $contigobj->user_remark();
\& Function: Get/set the user remark for this contig
\& Returns : scalar representing the current user_remark of this contig
\& Args    : none to get, OR string to set
.Ve
.Sh "trace_remark"
.IX Subsection "trace_remark"
.Vb 5
\& Title   : trace_remark
\& Usage   : my $traceremark = $contigobj->trace_remark();
\& Function: Get/set the trace remark for this contig
\& Returns : scalar representing the current trace_remark of this contig
\& Args    : none to get, OR string to set
.Ve
.Sh "range"
.IX Subsection "range"
.Vb 8
\& Title   : range
\& Usage   : my $range = $contigobj->range();
\& Function: Get/set the range for this Contig
\& Returns : Bio::Range representing the current range of this contig,
\&           start and end of the contig can be thus found using:
\&           my $start = $contigobj->range()->start();
\&           my $end   = $contigobj->range()->end();
\& Args    : none to get, OR Bio::Range to set
.Ve
.Sh "position"
.IX Subsection "position"
.Vb 5
\& Title   : position
\& Usage   : $ctgpos = $contigobj->position();
\& Function: Get/set the position of the contig in the group
\& Returns : scalar representing the position of the contig in the group
\& Args    : none to get, OR string to set
.Ve
.Sh "anchor"
.IX Subsection "anchor"
.Vb 5
\& Title   : anchor
\& Usage   : $ctganchor = $contig->anchor();
\& Function: Get/set the anchor value for this Contig (True | False)
\& Returns : scalar representing the anchor (1 | 0) for this contig
\& Args    : none to get, OR string to set
.Ve
.Sh "group"
.IX Subsection "group"
.Vb 7
\& Title   : group
\& Usage   : $groupno = $contigobj->group();
\& Function: Get/set the group number for this contig.
\&           This is a generic term, used for Linkage-Groups as well as for
\&           Chromosomes. 
\& Returns : scalar representing the group number of this contig
\& Args    : none
.Ve
.Sh "subgroup"
.IX Subsection "subgroup"
.Vb 8
\& Title   : subgroup
\& Usage   : $subgroup = $contig->subgroup();     
\& Function: Get/set the subgroup for this contig. This is a generic term:
\&           subgroup here could represent subgroup of a Chromosome or of a
\&           Linkage Group. The user must take care of which subgroup he/she is
\&           querying for.        
\& Returns : A scalar representing the subgroup of this contig
\& Args    : none
.Ve
.Sh "each_cloneid"
.IX Subsection "each_cloneid"
.Vb 5
\& Title   : each_cloneid
\& Usage   : my @clones  = $map->each_cloneid();
\& Function: retrieves all the clone ids in a map unordered
\& Returns : list of strings (ids)
\& Args    : none
.Ve
.PP
.Vb 2
\& *** This only supplies the ids set with the set_clones method ***
\& *** It has nothing to do with actual Bio::Map::MappableI objects ***
.Ve
.Sh "each_markerid"
.IX Subsection "each_markerid"
.Vb 5
\& Title   : each_markerid
\& Usage   : my @markers = $map->each_markerid();
\& Function: retrieves all the marker ids in a map unordered
\& Returns : list of strings (ids)
\& Args    : none
.Ve
.PP
.Vb 2
\& *** This only supplies the ids set with the set_markers method ***
\& *** It has nothing to do with actual Bio::Map::MarkerI objects ***
.Ve
.Sh "set_clones"
.IX Subsection "set_clones"
.Vb 5
\& Title   : set_clones
\& Usage   : $marker->set_clones(\e%clones)
\& Function: Set the clones hashref
\& Returns : None
\& Args    : Hashref of clone ids
.Ve
.PP
.Vb 2
\& *** This only sets a hash of ids ***
\& *** It has nothing to do with actual Bio::Map::MappableI objects ***
.Ve
.Sh "set_markers"
.IX Subsection "set_markers"
.Vb 5
\& Title   : markers
\& Usage   : $obj->set_markers($newval)
\& Function: Set list of Markers (hashref)
\& Returns : None
\& Args    : Hashref of marker ids
.Ve
.PP
.Vb 2
\& *** This only sets a hash of ids ***
\& *** It has nothing to do with actual Bio::Map::MarkerI objects ***
.Ve
