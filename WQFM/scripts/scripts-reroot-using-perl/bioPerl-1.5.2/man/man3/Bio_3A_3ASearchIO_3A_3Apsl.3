.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SearchIO::psl 3"
.TH Bio::SearchIO::psl 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SearchIO::psl \- A parser for PSL output (UCSC)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Bio::SearchIO;
\&  my $parser = new Bio::SearchIO(-file   => 'file.psl',
\&                                 -format => 'psl');
\&  while( my $result = $parser->next_result ) {
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a SearchIO driver for \s-1PSL\s0 format.
\&\s-1PSL\s0 format is documented here:
http://genome.ucsc.edu/goldenPath/help/customTrack.html#PSL
.PP
By default it assumes \s-1PSL\s0 output came from \s-1BLAT\s0 you can override that
by specifying \-program_name => '\s-1BLASTZ\s0' when initializing the
SearchIO object.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::SearchIO::psl();
\& Function: Builds a new Bio::SearchIO::psl object 
\& Returns : an instance of Bio::SearchIO::psl
\& Args    :
.Ve
.Sh "next_result"
.IX Subsection "next_result"
.Vb 5
\& Title   : next_result
\& Usage   : my $result = $parser->next_result
\& Function: Parse the next result from the data stream
\& Returns : L<Bio::Search::Result::ResultI>
\& Args    : none
.Ve
.Sh "start_element"
.IX Subsection "start_element"
.Vb 5
\& Title   : start_element
\& Usage   : $eventgenerator->start_element
\& Function: Handles a start element event
\& Returns : none
\& Args    : hashref with at least 2 keys 'Data' and 'Name'
.Ve
.Sh "end_element"
.IX Subsection "end_element"
.Vb 5
\& Title   : start_element
\& Usage   : $eventgenerator->end_element
\& Function: Handles an end element event
\& Returns : none
\& Args    : hashref with at least 2 keys 'Data' and 'Name'
.Ve
.Sh "element"
.IX Subsection "element"
.Vb 5
\& Title   : element
\& Usage   : $eventhandler->element({'Name' => $name, 'Data' => $str});
\& Function: Convience method that calls start_element, characters, end_element
\& Returns : none
\& Args    : Hash ref with the keys 'Name' and 'Data'
.Ve
.Sh "characters"
.IX Subsection "characters"
.Vb 5
\& Title   : characters
\& Usage   : $eventgenerator->characters($str)
\& Function: Send a character events
\& Returns : none
\& Args    : string
.Ve
.Sh "_mode"
.IX Subsection "_mode"
.Vb 6
\& Title   : _mode
\& Usage   : $obj->_mode($newval)
\& Function: 
\& Example : 
\& Returns : value of _mode
\& Args    : newvalue (optional)
.Ve
.Sh "within_element"
.IX Subsection "within_element"
.Vb 7
\& Title   : within_element
\& Usage   : if( $eventgenerator->within_element($element) ) {}
\& Function: Test if we are within a particular element
\&           This is different than 'in' because within can be tested
\&           for a whole block.
\& Returns : boolean
\& Args    : string element name
.Ve
.Sh "in_element"
.IX Subsection "in_element"
.Vb 7
\& Title   : in_element
\& Usage   : if( $eventgenerator->in_element($element) ) {}
\& Function: Test if we are in a particular element
\&           This is different than 'in' because within can be tested
\&           for a whole block.
\& Returns : boolean
\& Args    : string element name
.Ve
.Sh "start_document"
.IX Subsection "start_document"
.Vb 5
\& Title   : start_document
\& Usage   : $eventgenerator->start_document
\& Function: Handles a start document event
\& Returns : none
\& Args    : none
.Ve
.Sh "end_document"
.IX Subsection "end_document"
.Vb 5
\& Title   : end_document
\& Usage   : $eventgenerator->end_document
\& Function: Handles an end document event
\& Returns : Bio::Search::Result::ResultI object
\& Args    : none
.Ve
.Sh "result_count"
.IX Subsection "result_count"
.Vb 5
\& Title   : result_count
\& Usage   : my $count = $searchio->result_count
\& Function: Returns the number of results we have processed
\& Returns : integer
\& Args    : none
.Ve
.Sh "program_name"
.IX Subsection "program_name"
.Vb 5
\& Title   : program_name
\& Usage   : $obj->program_name($newval)
\& Function: Get/Set the program name
\& Returns : value of program_name (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
