.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Flat 3"
.TH Bio::DB::Flat 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Flat \- Interface for indexed flat files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  $db = Bio::DB::Flat->new(-directory  => '/usr/share/embl',
\&                           -dbname     => 'mydb',
\&                           -format     => 'embl',
\&                           -index      => 'bdb',
\&                           -write_flag => 1);
\&  $db->build_index('/usr/share/embl/primate.embl',
\&                   '/usr/share/embl/protists.embl');
\&  $seq       = $db->get_Seq_by_id('BUM');
\&  @sequences = $db->get_Seq_by_acc('DIV' => 'primate');
\&  $raw       = $db->fetch_raw('BUM');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object provides the basic mechanism to associate positions in
files with primary and secondary name spaces. Unlike
Bio::Index::Abstract (see Bio::Index::Abstract), this is specialized
to work with the \*(L"flat index\*(R" and BerkeleyDB indexed flat file formats
worked out at the 2002 BioHackathon.
.PP
This object is a general front end to the underlying databases.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email \- lstein@cshl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal
methods are usually preceded with an \*(L"_\*(R" (underscore).
.Sh "new"
.IX Subsection "new"
.Vb 17
\& Title   : new
\& Usage   : my $db = Bio::DB::Flat->new(
\&                     -directory  => $root_directory,
\&                     -dbname     => 'mydb',
\&                     -write_flag => 1,
\&                     -index      => 'bdb',
\&                     -verbose    => 0,
\&                     -out        => 'outputfile',
\&                     -format     => 'genbank');
\& Function: create a new Bio::DB::Flat object
\& Returns : new Bio::DB::Flat object
\& Args    : -directory    Root directory containing "config.dat"
\&           -write_flag   If true, allows creation/updating.
\&           -verbose      Verbose messages
\&           -out          File to write to when write_seq invoked
\&           -index        'bdb' or 'binarysearch'
\& Status  : Public
.Ve
.PP
The required \-directory argument indicates where the flat file indexes
will be stored.  The \fIbuild_index()\fR and \fIwrite_seq()\fR methods will
automatically create subdirectories of this root directory.  Each
subdirectory will contain a human-readable configuration file named
\&\*(L"config.dat\*(R" that specifies where the individual indexes are stored.
.PP
The required \-dbname argument gives a name to the database index.  The
index files will actually be stored in a like-named subdirectory
underneath the root directory.
.PP
The \-write_flag enables writing new entries into the database as well
as the creation of the indexes.  By default the indexes will be opened
read only.
.PP
\&\-index is one of \*(L"bdb\*(R" or \*(L"binarysearch\*(R" and indicates the type of
index to generate.  \*(L"bdb\*(R" corresponds to Berkeley \s-1DB\s0.  You *must* be
using BerkeleyDB version 2 or higher, and have the Perl BerkeleyDB
extension installed (DB_File will *not* work). \*(L"binarysearch\*(R"
corresponds to the \s-1OBDA\s0 \*(L"flat\*(R" indexed file.
.PP
The \-out argument specifies the output file for writing objects created
with \fIwrite_seq()\fR.
.PP
The \-format argument specifies the format of the input file or files. If
the file suffix is one that Bioperl can already associate with a format
then this is optional.
.Sh "new_from_registry"
.IX Subsection "new_from_registry"
.Vb 7
\& Title   : new_from_registry
\& Usage   : $db = Bio::DB::Flat->new_from_registry(%config)
\& Function: creates a new Bio::DB::Flat object in a Bio::DB::Registry-
\&           compatible fashion
\& Returns : new Bio::DB::Flat
\& Args    : provided by the registry, see below
\& Status  : Public
.Ve
.PP
The following registry-configuration tags are recognized:
.PP
.Vb 2
\&  location     Root of the indexed flat file; corresponds to the new() method's
\&               -directory argument.
.Ve
.Sh "fetch"
.IX Subsection "fetch"
.Vb 6
\&  Title   : fetch
\&  Usage   : $index->fetch( $id )
\&  Function: Returns a Bio::Seq object from the index
\&  Example : $seq = $index->fetch( 'dJ67B12' )
\&  Returns : Bio::Seq object
\&  Args    : ID
.Ve
.PP
Deprecated.  Use get_Seq_by_id instead.
.Sh "To Be Implemented in Subclasses"
.IX Subsection "To Be Implemented in Subclasses"
The following methods \s-1MUST\s0 be implemented by subclasses.
.Sh "May Be Overridden in Subclasses"
.IX Subsection "May Be Overridden in Subclasses"
The following methods \s-1MAY\s0 be overridden by subclasses.
