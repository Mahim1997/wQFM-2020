.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::Hit::HMMERHit 3"
.TH Bio::Search::Hit::HMMERHit 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::Hit::HMMERHit \- A Hit module for HMMER hits
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Bio::Search::Hit::HMMERHit;
\&    my $hit = new Bio::Search::Hit::HMMERHit;
\&    # use it in the same way as Bio::Search::Hit::GenericHit
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a specialization of Bio::Search::Hit::GenericHit.  There
are a few news methods next_domain and domains.  Note that
bits and iteration make no sense for this object and will
return 0.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Search::Hit::HMMERHit();
\& Function: Builds a new Bio::Search::Hit::HMMERHit object 
\& Returns : Bio::Search::Hit::HMMERHit
\& Args    :
.Ve
.PP
.Vb 9
\& Plus the Bio::Search::Hit::GenericHit inherited params
\&           -name         => Name of Hit (required)
\&           -description  => Description (optional)
\&           -accession    => Accession number (optional)
\&           -length       => Length of the Hit (optional)
\&           -score        => Raw Score for the Hit (optional)
\&           -significance => Significance value for the Hit (optional)
\&           -algorithm    => Algorithm used (BLASTP, FASTX, etc...)
\&           -hsps         => Array ref of HSPs for this Hit.
.Ve
.Sh "next_domain"
.IX Subsection "next_domain"
.Vb 5
\& Title   : next_domain 
\& Usage   : my $domain = $hit->next_domain();
\& Function: An alias for L<next_hsp()>, this will return the next HSP
\& Returns : L<Bio::Search::HSP::HSPI> object
\& Args    : none
.Ve
.Sh "domains"
.IX Subsection "domains"
.Vb 5
\& Title   : domains
\& Usage   : my @domains = $hit->domains();
\& Function: An alias for L<hsps()>, this will return the full list of hsps
\& Returns : array of L<Bio::Search::HSP::HSPI> objects
\& Args    : none
.Ve
.Sh "inherited Bio::Search::Hit::GenericHit methods"
.IX Subsection "inherited Bio::Search::Hit::GenericHit methods"
.Sh "add_hsp"
.IX Subsection "add_hsp"
.Vb 5
\& Title   : add_hsp
\& Usage   : $hit->add_hsp($hsp)
\& Function: Add a HSP to the collection of HSPs for a Hit
\& Returns : number of HSPs in the Hit
\& Args    : Bio::Search::HSP::HSPI object
.Ve
.Sh "Bio::Search::Hit::HitI methods"
.IX Subsection "Bio::Search::Hit::HitI methods"
.Sh "name"
.IX Subsection "name"
.Vb 5
\& Title   : name
\& Usage   : $hit_name = $hit->name();
\& Function: returns the name of the Hit sequence
\& Returns : a scalar string
\& Args    : [optional] scalar string to set the name
.Ve
.Sh "accession"
.IX Subsection "accession"
.Vb 5
\& Title   : accession
\& Usage   : $acc = $hit->accession();
\& Function: Retrieve the accession (if available) for the hit
\& Returns : a scalar string (empty string if not set)
\& Args    : none
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title   : description
\& Usage   : $desc = $hit->description();
\& Function: Retrieve the description for the hit
\& Returns : a scalar string
\& Args    : [optional] scalar string to set the descrition
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 5
\& Title   : length
\& Usage   : my $len = $hit->length
\& Function: Returns the length of the hit 
\& Returns : integer
\& Args    : [optional] integer to set the length
.Ve
.Sh "algorithm"
.IX Subsection "algorithm"
.Vb 9
\& Title   : algorithm
\& Usage   : $alg = $hit->algorithm();
\& Function: Gets the algorithm specification that was used to obtain the hit
\&           For BLAST, the algorithm denotes what type of sequence was aligned 
\&           against what (BLASTN: dna-dna, BLASTP prt-prt, BLASTX translated 
\&           dna-prt, TBLASTN prt-translated dna, TBLASTX translated 
\&           dna-translated dna).
\& Returns : a scalar string 
\& Args    : [optional] scalar string to set the algorithm
.Ve
.Sh "raw_score"
.IX Subsection "raw_score"
.Vb 7
\& Title   : raw_score
\& Usage   : $score = $hit->raw_score();
\& Function: Gets the "raw score" generated by the algorithm.  What
\&           this score is exactly will vary from algorithm to algorithm,
\&           returning undef if unavailable.
\& Returns : a scalar value
\& Args    : [optional] scalar value to set the raw score
.Ve
.Sh "significance"
.IX Subsection "significance"
.Vb 8
\& Title   : significance
\& Usage   : $significance = $hit->significance();
\& Function: Used to obtain the E or P value of a hit, i.e. the probability that
\&           this particular hit was obtained purely by random chance.  If
\&           information is not available (nor calculatable from other
\&           information sources), return undef.
\& Returns : a scalar value or undef if unavailable
\& Args    : [optional] scalar value to set the significance
.Ve
.Sh "bits"
.IX Subsection "bits"
.Vb 5
\& Usage     : $hit_object->bits();
\& Purpose   : Gets the bit score of the best HSP for the current hit.
\& Example   : $bits = $hit_object->bits();
\& Returns   : Integer or undef if bit score is not set
\& Argument  : n/a
.Ve
.PP
See Also   : \fIscore()\fR
.Sh "next_hsp"
.IX Subsection "next_hsp"
.Vb 6
\& Title    : next_hsp
\& Usage    : while( $hsp = $obj->next_hsp()) { ... }
\& Function : Returns the next available High Scoring Pair
\& Example  : 
\& Returns  : Bio::Search::HSP::HSPI object or null if finished
\& Args     : none
.Ve
.Sh "hsps"
.IX Subsection "hsps"
.Vb 10
\& Usage     : $hit_object->hsps();
\& Purpose   : Get a list containing all HSP objects.
\&           : Get the numbers of HSPs for the current hit.
\& Example   : @hsps = $hit_object->hsps();
\&           : $num  = $hit_object->hsps();  # alternatively, use num_hsps()
\& Returns   : Array context : list of Bio::Search::HSP::BlastHSP.pm objects.
\&           : Scalar context: integer (number of HSPs).
\&           :                 (Equivalent to num_hsps()).
\& Argument  : n/a. Relies on wantarray
\& Throws    : Exception if the HSPs have not been collected.
.Ve
.PP
See Also   : \fIhsp()\fR, \fInum_hsps()\fR
.Sh "num_hsps"
.IX Subsection "num_hsps"
.Vb 6
\& Usage     : $hit_object->num_hsps();
\& Purpose   : Get the number of HSPs for the present Blast hit.
\& Example   : $nhsps = $hit_object->num_hsps();
\& Returns   : Integer
\& Argument  : n/a
\& Throws    : Exception if the HSPs have not been collected.
.Ve
.PP
See Also   : \fIhsps()\fR
.Sh "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $hit->rewind;
\& Function: Allow one to reset the HSP iteration to the beginning
\&           Since this is an in-memory implementation
\& Returns : none
\& Args    : none
.Ve
.Sh "iteration"
.IX Subsection "iteration"
.Vb 5
\& Title   : iteration
\& Usage   : $obj->iteration($newval)
\& Function: PSI-BLAST iteration
\& Returns : value of iteration
\& Args    : newvalue (optional)
.Ve
