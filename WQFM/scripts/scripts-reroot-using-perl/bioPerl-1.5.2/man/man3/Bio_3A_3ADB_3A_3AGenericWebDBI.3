.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::GenericWebDBI 3"
.TH Bio::DB::GenericWebDBI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::GenericWebDBI \- abstract interface for parameter\-based remote
database access
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  #
\&  # grab data from HTTP::Response object using concrete class
\&  #
.Ve
.PP
.Vb 1
\&  $data = $db->get_response->content;
.Ve
.PP
.Vb 3
\&  #
\&  # $data is the raw data output from the HTTP::Response object;
\&  # this data may be preparsed using the private method _parse_response
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1WARNING:\s0 Please do \fB\s-1NOT\s0\fR spam the web servers with multiple requests.
.PP
This class acts as a user agent interface for any generic web database, but
is specifically geared towards CGI-based databases which accept parameters.
.SH "TODO"
.IX Header "TODO"
File and filehandle support to be added
.PP
Any feedback is welcome.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@lists.open-bio.org               - General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at uiuc dot edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "url_base_address"
.IX Subsection "url_base_address"
.Vb 6
\& Title   : url_base_address
\& Usage   : my $address = $self->url_base_address or
\&           $self->url_base_address($address)
\& Function: Get/Set the base URL for the Web Database
\& Returns : Base URL for the Web Database
\& Args    : $address - URL for the WebDatabase
.Ve
.Sh "proxy"
.IX Subsection "proxy"
.Vb 9
\& Title   : proxy
\& Usage   : $httpproxy = $db->proxy('http')  or
\&           $db->proxy(['http','ftp'], 'http://myproxy' )
\& Function: Get/Set a proxy for use of proxy
\& Returns : a string indicating the proxy
\& Args    : $protocol : an array ref of the protocol(s) to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.Sh "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass
\& Args    : Array or user/pass
.Ve
.Sh "db"
.IX Subsection "db"
.Vb 5
\& Title   : db
\& Usage   : $db->db
\& Function: Get/Set database parameter
\& Returns : string
\& Args    : optional string
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 6
\& Title   : id
\& Usage   : $agent->id($id)
\&           $agent->id(\e@id)
\& Function: Get/Set id(s)
\& Returns : reference to id(s)
\& Args    : a single id or reference to array of id(s)
.Ve
.Sh "retmode"
.IX Subsection "retmode"
.Vb 5
\& Title   : retmode
\& Usage   : $agent->retmode($mode)
\& Function: Get/Set return mode for query (text, xml, html, asn.1, etc)
\& Returns : string for return mode
\& Args    : optional string
.Ve
.Sh "get_response"
.IX Subsection "get_response"
.Vb 6
\& Title   : get_response
\& Usage   : $agent->get_response;
\& Function: get the request based on set object parameters, retrieved using
\&           the private method _get_params
\& Returns : HTTP::Response object
\& Args    : none
.Ve
.PP
.Vb 1
\& This is implemented by the derived class
.Ve
.Sh "delay"
.IX Subsection "delay"
.Vb 5
\& Title   : delay
\& Usage   : $secs = $self->delay([$secs])
\& Function: get/set number of seconds to delay between fetches
\& Returns : number of seconds to delay
\& Args    : new value
.Ve
.PP
\&\s-1NOTE:\s0 the default is to use the value specified by \fIdelay_policy()\fR.
This can be overridden by calling this method, or by passing the
\&\-delay argument to \fInew()\fR.
.Sh "delay_policy"
.IX Subsection "delay_policy"
.Vb 5
\& Title   : delay_policy
\& Usage   : $secs = $self->delay_policy
\& Function: return number of seconds to delay between calls to remote db
\& Returns : number of seconds to delay
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 The default delay policy is 0s.  Override in subclasses to
implement delays.  The timer has only second resolution, so the delay
will actually be +/\- 1s.
.Sh "_submit_request"
.IX Subsection "_submit_request"
.Vb 5
\&  Title   : _submit_request
\&  Usage   : my $url = $self->get_request
\&  Function: builds request object based on set parameters
\&  Returns : HTTP::Request
\&  Args    : optional : Bio::DB::EUtilities cookie
.Ve
.Sh "_get_params"
.IX Subsection "_get_params"
.Vb 5
\&  Title   : _get_params
\&  Usage   : my $url = $self->_get_params
\&  Function: builds parameter list for web request
\&  Returns : hash of parameter-value paris
\&  Args    : optional : Bio::DB::EUtilities cookie
.Ve
.Sh "_sleep"
.IX Subsection "_sleep"
.Vb 5
\& Title   : _sleep
\& Usage   : $self->_sleep
\& Function: sleep for a number of seconds indicated by the delay policy
\& Returns : none
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 This method keeps track of the last time it was called and only
imposes a sleep if it was called more recently than the \fIdelay_policy()\fR
allows.
