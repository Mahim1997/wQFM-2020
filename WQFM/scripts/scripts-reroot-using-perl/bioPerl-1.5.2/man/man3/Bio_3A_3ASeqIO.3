.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO 3"
.TH Bio::SeqIO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO \- Handler for SeqIO Formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::SeqIO;
.Ve
.PP
.Vb 4
\&    $in  = Bio::SeqIO->new(-file => "inputfilename" ,
\&                           -format => 'Fasta');
\&    $out = Bio::SeqIO->new(-file => ">outputfilename" ,
\&                           -format => 'EMBL');
.Ve
.PP
.Vb 3
\&    while ( my $seq = $in->next_seq() ) {
\&            $out->write_seq($seq);
\&    }
.Ve
.PP
.Vb 2
\&  # Now, to actually get at the sequence object, use the standard Bio::Seq
\&  # methods (look at Bio::Seq if you don't know what they are)
.Ve
.PP
.Vb 1
\&    use Bio::SeqIO;
.Ve
.PP
.Vb 2
\&    $in  = Bio::SeqIO->new(-file => "inputfilename" ,
\&                           -format => 'genbank');
.Ve
.PP
.Vb 4
\&    while ( my $seq = $in->next_seq() ) {
\&       print "Sequence ",$seq->id, " first 10 bases ",
\&             $seq->subseq(1,10), "\en";
\&    }
.Ve
.PP
.Vb 3
\&  # The SeqIO system does have a filehandle binding. Most people find this
\&  # a little confusing, but it does mean you can write the world's
\&  # smallest reformatter
.Ve
.PP
.Vb 1
\&    use Bio::SeqIO;
.Ve
.PP
.Vb 3
\&    $in  = Bio::SeqIO->newFh(-file => "inputfilename" ,
\&                             -format => 'Fasta');
\&    $out = Bio::SeqIO->newFh(-format => 'EMBL');
.Ve
.PP
.Vb 2
\&    # World's shortest Fasta<->EMBL format converter:
\&    print $out $_ while <$in>;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::SeqIO is a handler module for the formats in the SeqIO set (eg,
Bio::SeqIO::fasta). It is the officially sanctioned way of getting at
the format objects, which most people should use.
.PP
The Bio::SeqIO system can be thought of like biological file handles.
They are attached to filehandles with smart formatting rules (eg,
genbank format, or \s-1EMBL\s0 format, or binary trace file format) and
can either read or write sequence objects (Bio::Seq objects, or
more correctly, Bio::SeqI implementing objects, of which Bio::Seq is
one such object). If you want to know what to do with a Bio::Seq
object, read Bio::Seq.
.PP
The idea is that you request a stream object for a particular format.
All the stream objects have a notion of an internal file that is read
from or written to. A particular SeqIO object instance is configured
for either input or output. A specific example of a stream object is
the Bio::SeqIO::fasta object.
.PP
Each stream object has functions
.PP
.Vb 1
\&   $stream->next_seq();
.Ve
.PP
and
.PP
.Vb 1
\&   $stream->write_seq($seq);
.Ve
.PP
As an added bonus, you can recover a filehandle that is tied to the
SeqIO object, allowing you to use the standard <> and print
operations to read and write sequence objects:
.PP
.Vb 1
\&    use Bio::SeqIO;
.Ve
.PP
.Vb 3
\&    $stream = Bio::SeqIO->newFh(-format => 'Fasta',
\&                                -fh     => \e*ARGV);
\&    # read from standard input or the input filenames
.Ve
.PP
.Vb 3
\&    while ( $seq = <$stream> ) {
\&          # do something with $seq
\&    }
.Ve
.PP
and
.PP
.Vb 1
\&    print $stream $seq; # when stream is in output mode
.Ve
.PP
This makes the simplest ever reformatter
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 3
\&    $format1 = shift;
\&    $format2 = shift || die
\&       "Usage: reformat format1 format2 < input > output";
.Ve
.PP
.Vb 1
\&    use Bio::SeqIO;
.Ve
.PP
.Vb 4
\&    $in  = Bio::SeqIO->newFh(-format => $format1, -fh => \e*ARGV );
\&    $out = Bio::SeqIO->newFh(-format => $format2 );
\&    # Note: you might want to quote -format to keep older
\&    # perl's from complaining.
.Ve
.PP
.Vb 1
\&    print $out $_ while <$in>;
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "Bio::SeqIO\->\fInew()\fP"
.IX Subsection "Bio::SeqIO->new()"
.Vb 3
\&   $seqIO = Bio::SeqIO->new(-file => 'filename',   -format=>$format);
\&   $seqIO = Bio::SeqIO->new(-fh   => \e*FILEHANDLE, -format=>$format);
\&   $seqIO = Bio::SeqIO->new(-format => $format);
.Ve
.PP
The \fInew()\fR class method constructs a new Bio::SeqIO object.  The
returned object can be used to retrieve or print Seq objects. \fInew()\fR
accepts the following parameters:
.IP "\-file" 5
.IX Item "-file"
A file path to be opened for reading or writing.  The usual Perl
conventions apply:
.Sp
.Vb 6
\&   'file'       # open file for reading
\&   '>file'      # open file for writing
\&   '>>file'     # open file for appending
\&   '+<file'     # open file read/write
\&   'command |'  # open a pipe from the command
\&   '| command'  # open a pipe to the command
.Ve
.IP "\-fh" 5
.IX Item "-fh"
You may provide \fInew()\fR with a previously-opened filehandle.  For
example, to read from \s-1STDIN:\s0
.Sp
.Vb 1
\&   $seqIO = Bio::SeqIO->new(-fh => \e*STDIN);
.Ve
.Sp
Note that you must pass filehandles as references to globs.
.Sp
If neither a filehandle nor a filename is specified, then the module
will read from the \f(CW@ARGV\fR array or \s-1STDIN\s0, using the familiar <>
semantics.
.Sp
A string filehandle is handy if you want to modify the output in the
memory, before printing it out. The following program reads in \s-1EMBL\s0
formatted entries from a file and prints them out in fasta format with
some \s-1HTML\s0 tags:
.Sp
.Vb 16
\&  use Bio::SeqIO;
\&  use IO::String;
\&  my $in  = Bio::SeqIO->new(-file => "emblfile",
\&                                           -format => 'EMBL');
\&  while ( my $seq = $in->next_seq() ) {
\&      # the output handle is reset for every file
\&      my $stringio = IO::String->new($string);
\&      my $out = Bio::SeqIO->new(-fh => $stringio,
\&                                               -format => 'fasta');
\&      # output goes into $string
\&      $out->write_seq($seq);
\&      # modify $string
\&      $string =~ s|(>)(\ew+)|$1<font color="Red">$2</font>|g;
\&      # print into STDOUT
\&      print $string;
\&  }
.Ve
.IP "\-format" 5
.IX Item "-format"
Specify the format of the file.  Supported formats include fasta,
genbank, embl, swiss (SwissProt), Entrez Gene and tracefile formats
such as abi (\s-1ABI\s0) and scf. There are many more, for a complete listing
see the SeqIO \s-1HOWTO\s0 (<http://bioperl.open\-bio.org/wiki/HOWTO:SeqIO>).
.Sp
If no format is specified and a filename is given then the module
will attempt to deduce the format from the filename suffix. If
there is no suffix that Bioperl understands then it will attempt
to guess the format based on file content. If this is unsuccessful
then Fasta format is assumed.
.Sp
The format name is case\-insensitive: '\s-1FASTA\s0', 'Fasta' and 'fasta' are
all valid.
.Sp
Currently, the tracefile formats (except for \s-1SCF\s0) require installation
of the external Staden \*(L"io_lib\*(R" package, as well as the
Bio::SeqIO::staden::read package available from the bioperl-ext
repository.
.IP "\-alphabet" 5
.IX Item "-alphabet"
Sets the alphabet ('dna', 'rna', or 'protein'). When the alphabet is
set then Bioperl will not attempt to guess what the alphabet is. This
may be important because Bioperl does not always guess correctly.
.IP "\-flush" 5
.IX Item "-flush"
By default, all files (or filehandles) opened for writing sequences
will be flushed after each \fIwrite_seq()\fR (making the file immediately
usable).  If you do not need this facility and would like to marginally
improve the efficiency of writing multiple sequences to the same file
(or filehandle), pass the \-flush option '0' or any other value that
evaluates as defined but false:
.Sp
.Vb 6
\&  my $gb = new Bio::SeqIO -file   => "<gball.gbk",
\&                          -format => "gb";
\&  my $fa = new Bio::SeqIO -file   => ">gball.fa",
\&                          -format => "fasta",
\&                          -flush  => 0; # go as fast as we can!
\&  while($seq = $gb->next_seq) { $fa->write_seq($seq) }
.Ve
.Sh "Bio::SeqIO\->\fInewFh()\fP"
.IX Subsection "Bio::SeqIO->newFh()"
.Vb 3
\&   $fh = Bio::SeqIO->newFh(-fh => \e*FILEHANDLE, -format=>$format);
\&   $fh = Bio::SeqIO->newFh(-format => $format);
\&   # etc.
.Ve
.PP
This constructor behaves like \fInew()\fR, but returns a tied filehandle
rather than a Bio::SeqIO object.  You can read sequences from this
object using the familiar <> operator, and write to it using
\&\fIprint()\fR.  The usual array and \f(CW$_\fR semantics work.  For example, you can
read all sequence objects into an array like this:
.PP
.Vb 1
\&  @sequences = <$fh>;
.Ve
.PP
Other operations, such as \fIread()\fR, \fIsysread()\fR, \fIwrite()\fR, \fIclose()\fR, and
\&\fIprintf()\fR are not supported.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
See below for more detailed summaries.  The main methods are:
.ie n .Sh "$sequence = $seqIO\fP\->\fInext_seq()"
.el .Sh "$sequence = \f(CW$seqIO\fP\->\fInext_seq()\fP"
.IX Subsection "$sequence = $seqIO->next_seq()"
Fetch the next sequence from the stream.
.Sh "$seqIO\->write_seq($sequence [,$another_sequence,...])"
.IX Subsection "$seqIO->write_seq($sequence [,$another_sequence,...])"
Write the specified sequence(s) to the stream.
.Sh "\s-1\fITIEHANDLE\s0()\fP, \s-1\fIREADLINE\s0()\fP, \s-1\fIPRINT\s0()\fP"
.IX Subsection "TIEHANDLE(), READLINE(), PRINT()"
These provide the tie interface.  See perltie for more details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
.PP
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Ewan Birney, Lincoln Stein"
.IX Header "AUTHOR - Ewan Birney, Lincoln Stein"
Email birney@ebi.ac.uk
      lstein@cshl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : $stream = Bio::SeqIO->new(-file => $filename,
\&                                     -format => 'Format')
\& Function: Returns a new sequence stream
\& Returns : A Bio::SeqIO stream initialised with the appropriate format
\& Args    : Named parameters:
\&             -file => $filename
\&             -fh => filehandle to attach to
\&             -format => format
.Ve
.PP
.Vb 6
\&           Additional arguments may be used to set factories and
\&           builders involved in the sequence object creation. None of
\&           these must be provided, they all have reasonable defaults.
\&             -seqfactory   the Bio::Factory::SequenceFactoryI object
\&             -locfactory   the Bio::Factory::LocationFactoryI object
\&             -objbuilder   the Bio::Factory::ObjectBuilderI object
.Ve
.PP
See Bio::SeqIO::Handler
.Sh "newFh"
.IX Subsection "newFh"
.Vb 8
\& Title   : newFh
\& Usage   : $fh = Bio::SeqIO->newFh(-file=>$filename,-format=>'Format')
\& Function: does a new() followed by an fh()
\& Example : $fh = Bio::SeqIO->newFh(-file=>$filename,-format=>'Format')
\&           $sequence = <$fh>;   # read a sequence object
\&           print $fh $sequence; # write a sequence object
\& Returns : filehandle tied to the Bio::SeqIO::Fh class
\& Args    :
.Ve
.PP
See Bio::SeqIO::Fh
.Sh "fh"
.IX Subsection "fh"
.Vb 8
\& Title   : fh
\& Usage   : $obj->fh
\& Function:
\& Example : $fh = $obj->fh;      # make a tied filehandle
\&           $sequence = <$fh>;   # read a sequence object
\&           print $fh $sequence; # write a sequence object
\& Returns : filehandle tied to Bio::SeqIO class
\& Args    : none
.Ve
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 3
\& Title   : next_seq
\& Usage   : $seq = stream->next_seq
\& Function: Reads the next sequence object from the stream and returns it.
.Ve
.PP
.Vb 11
\&           Certain driver modules may encounter entries in the stream
\&           that are either misformatted or that use syntax not yet
\&           understood by the driver. If such an incident is
\&           recoverable, e.g., by dismissing a feature of a feature
\&           table or some other non-mandatory part of an entry, the
\&           driver will issue a warning. In the case of a
\&           non-recoverable situation an exception will be thrown.  Do
\&           not assume that you can resume parsing the same stream
\&           after catching the exception. Note that you can always turn
\&           recoverable errors into exceptions by calling
\&           $stream->verbose(2).
.Ve
.PP
.Vb 2
\& Returns : a Bio::Seq sequence object
\& Args    : none
.Ve
.PP
See Bio::Root::RootI, Bio::Factory::SeqStreamI, Bio::Seq
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream->write_seq($seq)
\& Function: writes the $seq object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Seq object
.Ve
.Sh "alphabet"
.IX Subsection "alphabet"
.Vb 7
\& Title   : alphabet
\& Usage   : $self->alphabet($newval)
\& Function: Set/get the molecule type for the Seq objects to be created.
\& Example : $seqio->alphabet('protein')
\& Returns : value of alphabet: 'dna', 'rna', or 'protein'
\& Args    : newvalue (optional)
\& Throws  : Exception if the argument is not one of 'dna', 'rna', or 'protein'
.Ve
.Sh "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 6
\& Title   : _load_format_module
\& Usage   : *INTERNAL SeqIO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "_concatenate_lines"
.IX Subsection "_concatenate_lines"
.Vb 5
\& Title   : _concatenate_lines
\& Usage   : $s = _concatenate_lines($line, $continuation_line)
\& Function: Private. Concatenates two strings assuming that the second stems
\&           from a continuation line of the first. Adds a space between both
\&           unless the first ends with a dash.
.Ve
.PP
.Vb 4
\&           Takes care of either arg being empty.
\& Example :
\& Returns : A string.
\& Args    :
.Ve
.Sh "_filehandle"
.IX Subsection "_filehandle"
.Vb 6
\& Title   : _filehandle
\& Usage   : $obj->_filehandle($newval)
\& Function: This method is deprecated. Call _fh() instead.
\& Example :
\& Returns : value of _filehandle
\& Args    : newvalue (optional)
.Ve
.Sh "_guess_format"
.IX Subsection "_guess_format"
.Vb 9
\& Title   : _guess_format
\& Usage   : $obj->_guess_format($filename)
\& Function: guess format based on file suffix
\& Example :
\& Returns : guessed format of filename (lower case)
\& Args    :
\& Notes   : formats that _filehandle() will guess include fasta,
\&           genbank, scf, pir, embl, raw, gcg, ace, bsml, swissprot,
\&           fastq and phd/phred
.Ve
.Sh "sequence_factory"
.IX Subsection "sequence_factory"
.Vb 5
\& Title   : sequence_factory
\& Usage   : $seqio->sequence_factory($seqfactory)
\& Function: Get/Set the Bio::Factory::SequenceFactoryI
\& Returns : Bio::Factory::SequenceFactoryI
\& Args    : [optional] Bio::Factory::SequenceFactoryI
.Ve
.Sh "object_factory"
.IX Subsection "object_factory"
.Vb 6
\& Title   : object_factory
\& Usage   : $obj->object_factory($newval)
\& Function: This is an alias to sequence_factory with a more generic name.
\& Example :
\& Returns : value of object_factory (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "sequence_builder"
.IX Subsection "sequence_builder"
.Vb 4
\& Title   : sequence_builder
\& Usage   : $seqio->sequence_builder($seqfactory)
\& Function: Get/Set the Bio::Factory::ObjectBuilderI used to build sequence
\&           objects.
.Ve
.PP
.Vb 3
\&           If you do not set the sequence object builder yourself, it
\&           will in fact be an instance of L<Bio::Seq::SeqBuilder>, and
\&           you may use all methods documented there to configure it.
.Ve
.PP
.Vb 2
\& Returns : a Bio::Factory::ObjectBuilderI compliant object
\& Args    : [optional] a Bio::Factory::ObjectBuilderI compliant object
.Ve
.Sh "location_factory"
.IX Subsection "location_factory"
.Vb 7
\& Title   : location_factory
\& Usage   : $seqio->location_factory($locfactory)
\& Function: Get/Set the Bio::Factory::LocationFactoryI object to be used for
\&           location string parsing
\& Returns : a Bio::Factory::LocationFactoryI implementing object
\& Args    : [optional] on set, a Bio::Factory::LocationFactoryI implementing
\&           object.
.Ve
