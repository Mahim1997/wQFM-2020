.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Alignment::Trim 3"
.TH Bio::Tools::Alignment::Trim 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Alignment::Trim \- A kludge to do specialized trimming of
	sequence based on quality.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Bio::Tools::Alignment::Trim;
\&  $o_trim = new Bio::Tools::Alignment::Trim;
\&  $o_trim->set_reverse_designator("R");
\&  $o_trim->set_forward_designator("F");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a specialized module designed by Chad for Chad to trim sequences
based on a highly specialized list of requirements. In other words, write
something that will trim sequences 'just like the people in the lab would
do manually'.
.PP
I settled on a sliding-window-average style of search which is ugly and
slow but does _exactly_ what I want it to do.
.PP
Mental note: rewrite this.
.PP
It is very important to keep in mind the context in which this module was
written: strictly to support the projects for which Consed.pm was
designed.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 3
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists     - About the mailing
\&lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Chad Matsalla"
.IX Header "AUTHOR - Chad Matsalla"
Email bioinformatics\-at\-dieselwurks.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 9
\& Title   : new()
\& Usage   : $o_trim = Bio::Tools::Alignment::Trim->new();
\& Function: Construct the Bio::Tools::Alignment::Trim object. No parameters
\&           are required to create this object. It is strictly a bundle of
\&           functions, as far as I am concerned.
\& Returns : A reference to a Bio::Tools::Alignment::Trim object.
\& Args    : (optional)
\&           -windowsize (default 10)
\&           -phreds (default 20)
.Ve
.Sh "set_designators($forward_designator,$reverse_designator)"
.IX Subsection "set_designators($forward_designator,$reverse_designator)"
.Vb 7
\& Title   : set_designators(<forward>,<reverse>)
\& Usage   : $o_trim->set_designators("F","R")
\& Function: Set the string by which the system determines whether a given
\&        sequence represents a forward or a reverse read.
\& Returns : Nothing.
\& Args    : two scalars: one representing the forward designator and one
\&        representing the reverse designator
.Ve
.Sh "set_forward_designator($designator)"
.IX Subsection "set_forward_designator($designator)"
.Vb 6
\& Title   : set_forward_designator($designator)
\& Usage   : $o_trim->set_forward_designator("F")
\& Function: Set the string by which the system determines if a given
\&        sequence is a forward read.
\& Returns : Nothing.
\& Args    : A string representing the forward designator of this project.
.Ve
.Sh "set_reverse_designator($reverse_designator)"
.IX Subsection "set_reverse_designator($reverse_designator)"
.Vb 6
\& Title   : set_reverse_designator($reverse_designator)
\& Function: Set the string by which the system determines if a given
\&        sequence is a reverse read.
\& Usage   : $o_trim->set_reverse_designator("R")
\& Returns : Nothing.
\& Args    : A string representing the forward designator of this project.
.Ve
.Sh "\fIget_designators()\fP"
.IX Subsection "get_designators()"
.Vb 5
\& Title   : get_designators()
\& Usage   : $o_trim->get_designators()
\& Returns : A string describing the current designators.
\& Args    : None
\& Notes   : Really for informational purposes only. Duh.
.Ve
.Sh "\fItrim_leading_polys()\fP"
.IX Subsection "trim_leading_polys()"
.Vb 7
\& Title   : trim_leading_polys()
\& Usage   : $o_trim->trim_leading_polys()
\& Function: Not implemented. Does nothing.
\& Returns : Nothing.
\& Args    : None.
\& Notes   : This function is not implemented. Part of something I wanted to
\&        do but never got around to doing.
.Ve
.Sh "\fIdump_hash()\fP"
.IX Subsection "dump_hash()"
.Vb 6
\& Title   : dump_hash()
\& Usage   : $o_trim->dump_hash()
\& Function: Unimplemented.
\& Returns : Nothing.
\& Args    : None.
\& Notes   : Does nothing.
.Ve
.Sh "trim_singlet($sequence,$quality,$name,$class)"
.IX Subsection "trim_singlet($sequence,$quality,$name,$class)"
.Vb 20
\& Title   : trim_singlet($sequence,$quality,$name,$class)
\& Usage   : ($r_trim_points,$trimmed_sequence) =
\&        @{$o_trim->trim_singlet($sequence,$quality,$name,$class)};
\& Function: Trim a singlet based on its quality.
\& Returns : a reference to an array containing the forward and reverse
\&        trim points and the trimmed sequence.
\& Args    : $sequence : A sequence (SCALAR, please)
\&           $quality : A _scalar_ of space-delimited quality values.
\&           $name : the name of the sequence
\&           $class : The class of the sequence. One of qw(singlet
\&                singleton doublet pair multiplet)
\& Notes   : At the time this was written the bioperl objects SeqWithQuality
\&        and PrimaryQual did not exist. This is what is with the clumsy
\&        passing of references and so on. I will rewrite this next time I
\&        have to work with it. I also wasn't sure whether this function
\&        should return just the trim points or the points and the sequence.
\&        I decided that I always wanted both so that's how I implemented
\&        it.
\&     - Note that the size of the sliding windows is set during construction of
\&       the Bio::Tools::Alignment::Trim object.
.Ve
.Sh "trim_doublet($sequence,$quality,$name,$class)"
.IX Subsection "trim_doublet($sequence,$quality,$name,$class)"
.Vb 17
\& Title   : trim_doublet($sequence,$quality,$name,$class) 
\& Usage   : ($r_trim_points,$trimmed_sequence) =
\&            @{$o_trim->trim_singlet($sequence,$quality,$name,$class)};
\& Function: Trim a singlet based on its quality.
\& Returns : a reference to an array containing the forward and reverse
\& Args    : $sequence : A sequence
\&           $quality : A _scalar_ of space-delimited quality values.
\&           $name : the name of the sequence
\&           $class : The class of the sequence. One of qw(singlet
\&                singleton doublet pair multiplet)
\& Notes   : At the time this was written the bioperl objects SeqWithQuality
\&        and PrimaryQual did not exist. This is what is with the clumsy
\&        passing of references and so on. I will rewrite this next time I
\&        have to work with it. I also wasn't sure whether this function
\&        should return just the trim points or the points and the sequence.
\&        I decided that I always wanted both so that's how I implemented
\&        it.
.Ve
.Sh "chop_sequence($name,$class,$sequence,@points)"
.IX Subsection "chop_sequence($name,$class,$sequence,@points)"
.Vb 16
\& Title   : chop_sequence($name,$class,$sequence,@points)
\& Usage   : ($start_point,$end_point,$chopped_sequence) = 
\&        $o_trim->chop_sequence($name,$class,$sequence,@points);
\& Function: Chop a sequence based on its name, class, and sequence.
\& Returns : an array containing three scalars:
\&        1- the start trim point
\&        2- the end trim point
\&        3- the chopped sequence
\& Args    :
\&           $name : the name of the sequence
\&           $class : The class of the sequence. One of qw(singlet
\&                singleton doublet pair multiplet)
\&           $sequence : A sequence
\&           @points : An array containing two elements- the first contains
\&                the start trim point and the second conatines the end trim
\&                point.
.Ve
.Sh "_get_start($r_quals,$windowsize,$phreds,$offset)"
.IX Subsection "_get_start($r_quals,$windowsize,$phreds,$offset)"
.Vb 12
\& Title   : _get_start($r_quals,$windowsize,$phreds,$offset)
\& Usage   : $start_base = $self->_get_start($r_windows,5,20);
\& Function: Provide the start trim point for this sequence.
\& Returns : a scalar representing the start of the sequence
\& Args    : 
\&        $r_quals : A reference to an array containing quality values. In
\&                context, this array of values has been smoothed by then
\&                sliding window-look ahead algorithm.
\&        $windowsize : The size of the window used when the sliding window
\&                look-ahead average was calculated.
\&        $phreds : <fill in what this does here>
\&        $offset : <fill in what this does here>
.Ve
.Sh "_get_end($r_qual,$windowsize,$phreds,$count)"
.IX Subsection "_get_end($r_qual,$windowsize,$phreds,$count)"
.Vb 12
\& Title   : _get_end($r_qual,$windowsize,$phreds,$count)
\& Usage   : my $end_base = &_get_end($r_windows,20,20,$start_base);
\& Function: Get the end trim point for this sequence.
\& Returns : A scalar representing the end trim point for this sequence.
\& Args    : 
\&        $r_qual : A reference to an array containing quality values. In
\&                context, this array of values has been smoothed by then
\&                sliding window-look ahead algorithm.
\&        $windowsize : The size of the window used when the sliding window
\&                look-ahead average was calculated.
\&        $phreds : <fill in what this does here>
\&        $count : Start looking for the end of the sequence here.
.Ve
.Sh "count_doublet_trailing_zeros($r_qual)"
.IX Subsection "count_doublet_trailing_zeros($r_qual)"
.Vb 8
\& Title   : count_doublet_trailing_zeros($r_qual)
\& Usage   : my $start_of_trailing_zeros = &count_doublet_trailing_zeros(\e@qual);
\& Function: Find out when the trailing zero qualities start.
\& Returns : A scalar representing where the zeros start.
\& Args    : A reference to an array of quality values.
\& Notes   : Again, this should be rewritten to use PrimaryQual objects.
\&        A more detailed explanation of why phrap puts these zeros here should
\&        be written and placed here. Please email and hassle the author.
.Ve
.Sh "_sliding_window($r_quals,$windowsize)"
.IX Subsection "_sliding_window($r_quals,$windowsize)"
.Vb 9
\& Title   : _sliding_window($r_quals,$windowsize)
\& Usage   : my $r_windows = &_sliding_window(\e@qual,$windowsize);
\& Function: Create a sliding window, look-forward-average on an array
\&        of quality values. Used to smooth out differences in qualities.
\& Returns : A reference to an array containing the smoothed values.
\& Args    : $r_quals: A reference to an array containing quality values.
\&           $windowsize : The size of the sliding window.
\& Notes   : This was written before PrimaryQual objects existed. They
\&           should use that object but I haven't rewritten this yet.
.Ve
.Sh "_print_formatted_qualities"
.IX Subsection "_print_formatted_qualities"
.Vb 5
\& Title   : _print_formatted_qualities(\e@quals)
\& Usage   : &_print_formatted_qualities(\e@quals);
\& Returns : Nothing. Prints.
\& Args    : A reference to an array containing quality values.
\& Notes   : An internal procedure used in debugging. Prints out an array nicely.
.Ve
.Sh "_get_end_old($r_qual,$windowsize,$phreds,$count)"
.IX Subsection "_get_end_old($r_qual,$windowsize,$phreds,$count)"
.Vb 4
\& Title   : _get_end_old($r_qual,$windowsize,$phreds,$count)
\& Usage   : Deprecated. Don't use this!
\& Returns : Deprecated. Don't use this!
\& Args    : Deprecated. Don't use this!
.Ve
