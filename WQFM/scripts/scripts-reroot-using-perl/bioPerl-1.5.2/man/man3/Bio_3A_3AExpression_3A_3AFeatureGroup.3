.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Expression::FeatureGroup 3"
.TH Bio::Expression::FeatureGroup 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Expression::FeatureGroup \- a set of DNA/RNA features.  ISA
Bio::Expression::FeatureI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
#
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A set of \s-1DNA/RNA\s0 features.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Allen Day <allenday@ucla.edu>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $featuregroup = Bio::Expression::FeatureGroup->new(%args);
\& Function: create a new featuregroup object
\& Returns : a Bio::Expression::FeatureGroup object
\& Args    : an optional hash of parameters to be used in initialization:
\&           -id    --  the featuregroup ID
\&           -type  --  the featuregroup type
.Ve
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 5
\& Title   : _initialize
\& Usage   : $featuregroup->_initialize(@args);
\& Function: initialize the featuregroup object
\& Returns : nothing
\& Args    : @args
.Ve
.Sh "type"
.IX Subsection "type"
.Vb 7
\& Title   : type
\& Usage   : $featuregroup->type($optional_arg);
\& Function: get/set the type of the featuregroup
\& Comments: this is probably going to be a string like
\&           "quality control", "mismatch blah blah", etc.
\& Returns : the featuregroup type
\& Args    : a new value for the featuregroup type
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 5
\& Title   : id
\& Usage   : $featuregroup->id($optional_arg);
\& Function: get/set the id of the featuregroup
\& Returns : the featuregroup id
\& Args    : a new value for the featuregroup id
.Ve
.Sh "standard_deviation"
.IX Subsection "standard_deviation"
.Vb 6
\& Title   : standard_deviation
\& Usage   : $featuregroup->standard_deviation($optional_arg);
\& Function: get/set the standard deviation of the featuregroup value
\& Returns : the featuregroup standard deviation
\& Args    : a new value for the featuregroup standard deviation
\& Notes   : this method does no calculation, it merely holds a value
.Ve
.Sh "quantitation"
.IX Subsection "quantitation"
.Vb 6
\& Title   : quantitation
\& Usage   : $featuregroup->quantitation($optional_arg);
\& Function: get/set the quantitation of the featuregroup
\& Returns : the featuregroup's quantitated value
\& Args    : a new value for the featuregroup's quantitated value
\& Notes   : this method does no calculation, it merely holds a value
.Ve
.Sh "quantitation_units"
.IX Subsection "quantitation_units"
.Vb 5
\& Title   : quantitation_units
\& Usage   : $featuregroup->quantitation_units($optional_arg);
\& Function: get/set the quantitation units of the featuregroup
\& Returns : the featuregroup's quantitated value units
\& Args    : a new value for the featuregroup's quantitated value units
.Ve
.Sh "presence"
.IX Subsection "presence"
.Vb 5
\& Title   : presence
\& Usage   : $featuregroup->presence($optional_arg);
\& Function: get/set the presence call of the featuregroup
\& Returns : the featuregroup's presence call
\& Args    : a new value for the featuregroup's presence call
.Ve
.Sh "add_feature"
.IX Subsection "add_feature"
.Vb 5
\& Title   : add_feature
\& Usage   : $feature_copy = $featuregroup->add_feature($feature);
\& Function: add a feature to the featuregroup
\& Returns : see this_feature()
\& Args    : a Bio::Expression::FeatureI compliant object
.Ve
.Sh "this_feature"
.IX Subsection "this_feature"
.Vb 5
\& Title   : this_feature
\& Usage   : $feature = $featuregroup->this_feature
\& Function: access the last feature added to the featuregroup
\& Returns : the last feature added to the featuregroup
\& Args    : none
.Ve
.Sh "each_feature"
.IX Subsection "each_feature"
.Vb 6
\& Title   : each_feature
\& Usage   : @features = $featuregroup->each_feature
\& Function: returns a list of Bio::Expression::FeatureI compliant
\&           objects
\& Returns : a list of objects
\& Args    : none
.Ve
.Sh "each_feature_quantitation"
.IX Subsection "each_feature_quantitation"
.Vb 5
\& Title   : each_feature_quantitation
\& Usage   : @featurequantitions = $featuregroup->each_feature_quantitation;
\& Function: returns an list of quantitations of the features in the featuregroup
\& Returns : a list of numeric values
\& Args    : none
.Ve
.Sh "is_qc"
.IX Subsection "is_qc"
.Vb 5
\& Title   : is_qc
\& Usage   : $is_quality_control = $featuregroup->is_qc
\& Function: get/set whether or not the featuregroup is used for quality control purposes
\& Returns : a boolean (equivalent)
\& Args    : a new value
.Ve
