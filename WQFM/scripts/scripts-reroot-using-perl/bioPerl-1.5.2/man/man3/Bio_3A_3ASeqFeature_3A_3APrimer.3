.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Primer 3"
.TH Bio::SeqFeature::Primer 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeature::Primer \- Primer Generic SeqFeature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # set up a single primer that can be used in a PCR reaction
.Ve
.PP
.Vb 1
\& use Bio::SeqFeature::Primer;
.Ve
.PP
.Vb 2
\& # initiate a primer with raw sequence
\& my $primer=Bio::SeqFeature::Primer->new(-seq=>'CTTTTCATTCTGACTGCAACG');
.Ve
.PP
.Vb 2
\& # get the primery tag for the primer # should return Primer
\& my $tag=$primer->primary_tag;
.Ve
.PP
.Vb 3
\& # get or set the location that the primer binds to the target at
\& $primer->location(500);
\& my $location=$primer->location(500);
.Ve
.PP
.Vb 4
\& # get or set the 5' end of the primer homology, as the primer doesn't 
\& # have to be the same as the target sequence
\& $primer->start(2);
\& my $start=$primer->start;
.Ve
.PP
.Vb 3
\& # get or set the 3' end of the primer homology
\& $primer->end(19);
\& my $end = $primer->end;
.Ve
.PP
.Vb 3
\& # get or set the strand of the primer. Strand should be 1, 0, or -1
\& $primer->strand(-1);
\& my $strand=$primer->strand;
.Ve
.PP
.Vb 3
\& # get or set the id of the primer
\& $primer->display_id('test_id');
\& my $id=$primer->display_id;
.Ve
.PP
.Vb 3
\& # get the tm of the primer. This is calculated for you by the software.
\& # however, see the docs.
\& my $tm = $primer->Tm;
.Ve
.PP
.Vb 2
\& print "These are the details of the primer:\en\etTag:\et\et$tag\en\etLocation\et$location\en\etStart:\et\et$start\en";
\& print "\etEnd:\et\et$end\en\etStrand:\et\et$strand\en\etID:\et\et$id\en\etTm:\et\et$tm\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handle primer sequences. This will allow you to generate a primer
object required for a Bio::Seq::PrimedSeq object. This module is
designed to integrate with Bio::Tools::Primer3 and
Bio::Seq::PrimedSeq.
.PP
In addition, you can calculate the melting temperature of the primer.
.PP
This module is supposed to implement location and range, presumably
through generic.pm, but does not do so yet. However, it does allow you
to set primers, and use those objects as the basis for
Bio::Seq::PrimedSeq objects.
.PP
See also the \s-1POD\s0 for Bio::Seq::PrimedSeq and
Bio::Tools::Nucleotide::Analysis::Primer3
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Edwards, redwards@utmem.edu
.PP
The original concept and much of the code was written by
Chad Matsalla, bioinformatics1@dieselwurks.com
.SH "APPENDIX"
.IX Header "APPENDIX"
.Vb 2
\&        The rest of the documentation details each of the object
\&        methods. Internal methods are usually preceded with a _
.Ve
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 5
\& Title   : new()
\& Usage   : $primer = Bio::SeqFeature::Primer(-seq=>sequence_object);
\& Function: Instantiate a new object
\& Returns : A SeqPrimer object
\& Args    : You must pass either a sequence object (preferable) or a sequence.
.Ve
.Sh "\fIseq()\fP"
.IX Subsection "seq()"
.Vb 5
\& Title   : seq()
\& Usage   : $seq = $primer->seq();
\& Function: Return the sequence associated with this Primer. 
\& Returns : A Bio::Seq object
\& Args    : None.
.Ve
.Sh "\fIsource_tag()\fP"
.IX Subsection "source_tag()"
.Vb 6
\& Title   : source_tag()
\& Usage   : $tag = $feature->source_tag();
\& Function: Returns the source of this tag.
\& Returns : A string.
\& Args    : If an argument is provided, the source of this SeqFeature
\&           is set to that argument.
.Ve
.Sh "\fIlocation()\fP"
.IX Subsection "location()"
.Vb 12
\& Title   : location()
\& Usage   : $tag = $primer->location();
\& Function: Gets or sets the location of the primer on the sequence  
\& Returns : If the location is set, returns that, if not returns 0. 
\&           Note: At the moment I am using the primer3 notation of location
\&           (although you can set whatever you want). 
\&           In this form, both primers are given from their 5' ends and a length.
\&           In this case, the left primer is given from the leftmost end, but
\&           the right primer is given from the rightmost end.
\&           You can use start() and end() to get the leftmost and rightmost base
\&           of each sequence.
\& Args    : If supplied will set a location
.Ve
.Sh "\fIstart()\fP"
.IX Subsection "start()"
.Vb 6
\& Title   : start()
\& Usage   : $start_position = $primer->start($new_position);
\& Function: Return the start position of this Primer.
\&           This is the leftmost base, regardless of whether it is a left or right primer.
\& Returns : The start position of this primer or 0 if not set.
\& Args    : If supplied will set a start position.
.Ve
.Sh "\fIend()\fP"
.IX Subsection "end()"
.Vb 6
\& Title   : end()
\& Usage   : $end_position = $primer->end($new_position);
\& Function: Return the end position of this primer.
\&           This is the rightmost base, regardless of whether it is a left or right primer.
\& Returns : The end position of this primer.
\& Args    : If supplied will set an end position.
.Ve
.Sh "\fIstrand()\fP"
.IX Subsection "strand()"
.Vb 5
\& Title   : strand()
\& Usage   : $strand=$primer->strand()
\& Function: Get or set the strand.
\& Returns : The strand that the primer binds to.
\& Args    :  If an argument is supplied will set the strand, otherwise will return it. Should be 1, 0 (not set), or -1
.Ve
.Sh "\fIdisplay_id()\fP"
.IX Subsection "display_id()"
.Vb 5
\& Title   : display_id()
\& Usage   : $id = $primer->display_id($new_id)
\& Function: Returns the display ID for this Primer feature
\& Returns : A scalar.
\& Args    : If an argument is provided, the display_id of this primer is set to that value.
.Ve
.Sh "\fITm()\fP"
.IX Subsection "Tm()"
.Vb 10
\&  Title   : Tm()
\&  Usage   : $tm = $primer->Tm(-salt=>'0.05', -oligo=>'0.0000001')
\&  Function: Calculates and returns the Tm (melting temperature) of the primer
\&  Returns : A scalar containing the Tm.
\&  Args    : -salt set the Na+ concentration on which to base the calculation (default=0.05 molar).
\&          : -oligo set the oligo concentration on which to base the calculation (default=0.00000025 molar).
\&  Notes   : Calculation of Tm as per Allawi et. al Biochemistry 1997 36:10581-10594.  Also see
\&            documentation at http://biotools.idtdna.com/analyzer/ as they use this formula and
\&            have a couple nice help pages.  These Tm values will be about are about 0.5-3 degrees
\&            off from those of the idtdna web tool.  I don't know why.
.Ve
.PP
.Vb 2
\&            This was suggested by Barry Moore (thanks!). See the discussion on the bioperl-l
\&            with the subject "Bio::SeqFeature::Primer Calculating the PrimerTM"
.Ve
.Sh "Tm_estimate"
.IX Subsection "Tm_estimate"
.Vb 7
\& Title   : Tm_estimate
\& Usage   : $tm = $primer->Tm_estimate(-salt=>'0.05')
\& Function: Calculates and returns the Tm (melting temperature) of the primer
\& Returns : A scalar containing the Tm.
\& Args    : -salt set the Na+ concentration on which to base the calculation.
\& Notes   : This is an estimate of the Tm that is kept in for comparative reasons.
\&           You should probably use Tm instead!
.Ve
.PP
.Vb 4
\&           This Tm calculations are taken from the Primer3 docs: They are
\&           based on Bolton and McCarthy, PNAS 84:1390 (1962) 
\&           as presented in Sambrook, Fritsch and Maniatis,
\&           Molecular Cloning, p 11.46 (1989, CSHL Press).
.Ve
.PP
.Vb 1
\&           Tm = 81.5 + 16.6(log10([Na+])) + .41*(%GC) - 600/length
.Ve
.PP
.Vb 2
\&           where [Na+] is the molar sodium concentration, %GC is the
\&           %G+C of the sequence, and length is the length of the sequence.
.Ve
.PP
.Vb 4
\&           However.... I can never get this calculation to give me the same result
\&           as primer3 does. Don't ask why, I never figured it out. But I did 
\&           want to include a Tm calculation here becuase I use these modules for 
\&           other things besides reading primer3 output.
.Ve
.PP
.Vb 3
\&           The primer3 calculation is saved as 'PRIMER_LEFT_TM' or 'PRIMER_RIGHT_TM'
\&           and this calculation is saved as $primer->Tm so you can get both and
\&           average them!
.Ve
