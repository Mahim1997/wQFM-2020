.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::IUPAC 3"
.TH Bio::Tools::IUPAC 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::IUPAC \- Generates unique Seq objects from an ambiguous Seq object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Seq;
\& use Bio::Tools::IUPAC;
.Ve
.PP
.Vb 2
\& my $ambiseq = new Bio::Seq (-seq => 'ARTCGUTGR', -alphabet => 'dna');
\& my $stream  = new Bio::Tools::IUPAC(-seq => $ambiseq);
.Ve
.PP
.Vb 3
\& while ($uniqueseq = $stream->next_seq()) {
\&     # process the unique Seq object.
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1IUPAC\s0 is a tool that produces a stream of unique, \*(L"strict\*(R"\-satisfying Seq
objects from an ambiquous Seq object (containing non-standard characters given
the meaning shown below)
.PP
.Vb 22
\&        Extended DNA / RNA alphabet :
\&        (includes symbols for nucleotide ambiguity)
\&        ------------------------------------------
\&        Symbol       Meaning      Nucleic Acid
\&        ------------------------------------------
\&         A            A           Adenine
\&         C            C           Cytosine
\&         G            G           Guanine
\&         T            T           Thymine
\&         U            U           Uracil
\&         M          A or C
\&         R          A or G
\&         W          A or T
\&         S          C or G
\&         Y          C or T
\&         K          G or T
\&         V        A or C or G
\&         H        A or C or T
\&         D        A or G or T
\&         B        C or G or T
\&         X      G or A or T or C
\&         N      G or A or T or C
.Ve
.PP
.Vb 2
\&        IUPAC-IUB SYMBOLS FOR NUCLEOTIDE NOMENCLATURE:
\&          Cornish-Bowden (1985) Nucl. Acids Res. 13: 3021-3030.
.Ve
.PP
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.PP
.Vb 31
\&       Amino Acid alphabet:
\&        ------------------------------------------
\&        Symbol           Meaning
\&        ------------------------------------------
\&        A        Alanine
\&        B        Aspartic Acid, Asparagine
\&        C        Cystine
\&        D        Aspartic Acid
\&        E        Glutamic Acid
\&        F        Phenylalanine
\&        G        Glycine
\&        H        Histidine
\&        I        Isoleucine
\&        J        Isoleucine/Leucine
\&        K        Lysine
\&        L        Leucine
\&        M        Methionine
\&        N        Asparagine
\&        O        Pyrrolysine
\&        P        Proline
\&        Q        Glutamine
\&        R        Arginine
\&        S        Serine
\&        T        Threonine
\&        U        Selenocysteine
\&        V        Valine
\&        W        Tryptophan
\&        X        Unknown
\&        Y        Tyrosine
\&        Z        Glutamic Acid, Glutamine
\&        *        Terminator
.Ve
.PP
.Vb 3
\&        IUPAC-IUP AMINO ACID SYMBOLS:
\&          Biochem J. 1984 Apr 15; 219(2): 345-373
\&          Eur J Biochem. 1993 Apr 1; 213(1): 2
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Aaron Mackey"
.IX Header "AUTHOR - Aaron Mackey"
Email amackey\-at\-virginia.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : new Bio::Tools::IUPAC $seq;
\& Function: returns a new seq stream (akin to SeqIO)
\& Returns : a Bio::Tools::IUPAC stream object that will produce unique
\&           Seq objects on demand.
\& Args    : an ambiguously coded Seq.pm object that has a specified 'alphabet'
.Ve
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $iupac->next_seq()
\& Function: returns the next unique Seq object
\& Returns : a Seq.pm object
\& Args    : none.
.Ve
.Sh "iupac_iup"
.IX Subsection "iupac_iup"
.Vb 5
\& Title   : iupac_iup
\& Usage   : my %aasymbols = $iupac->iupac_iup
\& Function: Returns a hash of PROTEIN symbols -> symbol components
\& Returns : Hash
\& Args    : none
.Ve
.Sh "iupac_iub"
.IX Subsection "iupac_iub"
.Vb 5
\& Title   : iupac_iub
\& Usage   : my %dnasymbols = $iupac->iupac_iub
\& Function: Returns a hash of DNA symbols -> symbol components
\& Returns : Hash
\& Args    : none
.Ve
.Sh "iupac_rev_iub"
.IX Subsection "iupac_rev_iub"
.Vb 6
\& Title   : iupac_rev_iub
\& Usage   : my %dnasymbols = $iupac->iupac_rev_iub
\& Function: Returns a hash of nucleotide combinations -> IUPAC code
\&           (a reverse of the iupac_iub hash).
\& Returns : Hash
\& Args    : none
.Ve
.Sh "count"
.IX Subsection "count"
.Vb 6
\& Title   : count
\& Usage   : my $total = $iupac->count();
\& Function: Calculates the number of unique, unambiguous sequences that
\&           this ambiguous sequence could generate
\& Return  : int
\& Args    : none
.Ve
