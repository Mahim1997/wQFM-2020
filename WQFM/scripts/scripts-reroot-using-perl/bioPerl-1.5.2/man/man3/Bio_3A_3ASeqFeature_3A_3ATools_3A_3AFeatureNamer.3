.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Tools::FeatureNamer 3"
.TH Bio::SeqFeature::Tools::FeatureNamer 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeature::Tools::FeatureNamer \- generates unique persistent names for features
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::SeqIO;
\&  use Bio::SeqFeature::Tools::FeatureNamer;
.Ve
.PP
.Vb 5
\&  # first fetch a genbank SeqI object
\&  $seqio =
\&    Bio::SeqIO->new(-file=>'AE003644.gbk',
\&                    -format=>'GenBank');
\&  $seq = $seqio->next_seq();
.Ve
.PP
.Vb 5
\&  $namer = Bio::SeqFeature::Tools::FeatureNamer->new;
\&  my @features = $seq->get_SeqFeatures;
\&  foreach my $feature (@features) {
\&    $namer->name_feature($feature) unless $feature->display_name;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a helper class for providing names for SeqFeatures
.PP
The Bio::SeqFeatureI class provides a display_name
method. Typically the display_name is not set when parsing formats
such as genbank \- instead properties such as \fBlabel\fR, \fBproduct\fR or
\&\fBgene\fR are set in a somewhat inconsistent manner.
.PP
In addition, when generating subfeatures (for example, exons that are
subfeatures of a transcript feature), it is often desirable to name
these subfeatures before either exporting to another format or
reporting to the user.
.PP
This module is intended to help given uniform display_names to
features and their subfeatures.
.SH "TODO"
.IX Header "TODO"
Currently the naming policy is hardcoded. It may be desirable to allow
plugging in variations on naming policies; this could be done either
by subclassing, anonymous subroutines (closures) or
parameterization. Contact the author if you feel you have need for a
different naming policy
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Chris Mungall"
.IX Header "AUTHOR - Chris Mungall"
Email:  cjm \s-1AT\s0 fruitfly \s-1DOT\s0 org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $unflattener = Bio::SeqFeature::Tools::FeatureNamer->new();
\& Function: constructor
\& Example : 
\& Returns : a new Bio::SeqFeature::Tools::FeatureNamer
\& Args    : see below
.Ve
.Sh "name_feature"
.IX Subsection "name_feature"
.Vb 6
\& Title   : name_feature
\& Usage   : $namer->name_feature($sf);
\& Function: sets display_name
\& Example :
\& Returns : 
\& Args    : L<Bio::SeqFeatureI>
.Ve
.PP
This method calls \fIgenerate_feature_name()\fR and uses the returned value
to set the display_name of the feature
.Sh "name_contained_features"
.IX Subsection "name_contained_features"
.Vb 6
\& Title   : name_contained_features
\& Usage   : $namer->name_contained_features($sf);
\& Function: sets display_name for all features contained by sf
\& Example :
\& Returns : 
\& Args    : L<Bio::SeqFeatureI>
.Ve
.PP
iterates through all subfeatures of a certain feature (using
get_all_SeqFeatures) and names each subfeatures, based on the
generated name for the holder feature
.PP
A subfeature is named by concatenating the generated name of the
container feature with the type and a number.
.PP
For example, if the containing feature is a gene with display name
\&\fBdpp\fR, subfeatures will be named dpp\-mRNA\-1 dpp\-mRNA2 dpp\-exon1
dpp\-exon2 etc
.Sh "generate_feature_name"
.IX Subsection "generate_feature_name"
.Vb 6
\& Title   : generate_feature_name
\& Usage   : $name = $namer->generate_feature_name($sf);
\& Function: derives a sensible human readable name for a $sf
\& Example :
\& Returns : str
\& Args    : L<Bio::SeqFeatureI>
.Ve
.PP
returns a generated name (but does not actually set display_name).
.PP
If display_name is already set, the method will return this
.PP
Otherwise, the name will depend on the property:
.IP "label" 4
.IX Item "label"
.PD 0
.IP "product" 4
.IX Item "product"
.IP "gene" 4
.IX Item "gene"
.IP "locus_tag" 4
.IX Item "locus_tag"
.PD
.PP
(in order of priority)
