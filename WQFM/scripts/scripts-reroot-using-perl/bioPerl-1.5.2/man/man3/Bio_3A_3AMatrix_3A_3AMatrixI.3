.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::MatrixI 3"
.TH Bio::Matrix::MatrixI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Matrix::MatrixI \- An interface for describing a Matrix 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Get a Matrix object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an interface describing how one should be able to interact
with a matrix.  One can have a lot of information I suppose and this
outline won't really work for \s-1PWM\s0 or PSSMs.  We will have to derive a
particular interface for those.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "matrix_id"
.IX Subsection "matrix_id"
.Vb 5
\& Title   : matrix_id
\& Usage   : my $id = $matrix->matrix_id
\& Function: Get the matrix ID
\& Returns : string value
\& Args    :
.Ve
.Sh "matrix_name"
.IX Subsection "matrix_name"
.Vb 5
\& Title   : matrix_name
\& Usage   : my $name = $matrix->matrix_name();
\& Function: Get the matrix name
\& Returns : string value
\& Args    :
.Ve
.Sh "get_entry"
.IX Subsection "get_entry"
.Vb 6
\& Title   : get_entry
\& Usage   : my $entry = $matrix->get_entry($rowname,$columname)
\& Function: Get the entry for a given row,column pair
\& Returns : scalar
\& Args    : $row name
\&           $column name
.Ve
.Sh "get_column"
.IX Subsection "get_column"
.Vb 6
\& Title   : get_column
\& Usage   : my @row = $matrix->get_column('ALPHA');
\& Function: Get a particular column
\& Returns : Array (in array context) or arrayref (in scalar context)
\&           of values
\& Args    : name of the column
.Ve
.Sh "get_row"
.IX Subsection "get_row"
.Vb 6
\& Title   : get_row
\& Usage   : my @row = $matrix->get_row('ALPHA');
\& Function: Get a particular row
\& Returns : Array (in array context) or arrayref (in scalar context)
\&           of values
\& Args    : name of the row
.Ve
.Sh "get_diagonal"
.IX Subsection "get_diagonal"
.Vb 5
\& Title   : get_diagonal
\& Usage   : my @diagonal = $matrix->get_diagonal; 
\& Function: Get the diagonal of the matrix
\& Returns : Array (in array context) or arrayref (in scalar context)
\& Args    : none
.Ve
.Sh "column_num_for_name"
.IX Subsection "column_num_for_name"
.Vb 5
\& Title   : column_num_for_name
\& Usage   : my $num = $matrix->column_num_for_name($name)
\& Function: Gets the column number for a particular column name
\& Returns : integer
\& Args    : string
.Ve
.Sh "row_num_for_name"
.IX Subsection "row_num_for_name"
.Vb 5
\& Title   : row_num_for_name
\& Usage   : my $num = $matrix->row_num_for_name($name)
\& Function: Gets the row number for a particular row name
\& Returns : integer
\& Args    : string
.Ve
.Sh "num_rows"
.IX Subsection "num_rows"
.Vb 5
\& Title   : num_rows
\& Usage   : my $rowcount = $matrix->num_rows;
\& Function: Get the number of rows
\& Returns : integer
\& Args    : none
.Ve
.Sh "num_columns"
.IX Subsection "num_columns"
.Vb 5
\& Title   : num_columns
\& Usage   : my $colcount = $matrix->num_columns
\& Function: Get the number of columns
\& Returns : integer
\& Args    : none
.Ve
.Sh "row_names"
.IX Subsection "row_names"
.Vb 5
\& Title   : row_names
\& Usage   : my @rows = $matrix->row_names
\& Function: The names of all the rows
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
.Sh "column_names"
.IX Subsection "column_names"
.Vb 5
\& Title   : column_names
\& Usage   : my @columns = $matrix->column_names
\& Function: The names of all the columns
\& Returns : array in array context, arrayref in scalar context
\& Args    : none
.Ve
