.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics 3"
.TH Bio::Graphics 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graphics \- Generate GD images of Bio::Seq objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # This script generates a PNG picture of a 10K region containing a
\& # set of red features and a set of blue features. Call it like this:
\& #         red_and_blue.pl > redblue.png
\& # you can now view the picture with your favorite image application
.Ve
.PP
.Vb 3
\& # This script parses a GenBank or EMBL file named on the command
\& # line and produces a PNG rendering of it.  Call it like this:
\& # render.pl my_file.embl | display -
.Ve
.PP
.Vb 3
\& use strict;
\& use Bio::Graphics;
\& use Bio::SeqIO;
.Ve
.PP
.Vb 3
\& my $file = shift                       or die "provide a sequence file as the argument";
\& my $io = Bio::SeqIO->new(-file=>$file) or die "could not create Bio::SeqIO";
\& my $seq = $io->next_seq                or die "could not find a sequence in the file";
.Ve
.PP
.Vb 1
\& my @features = $seq->all_SeqFeatures;
.Ve
.PP
.Vb 6
\& # sort features by their primary tags
\& my %sorted_features;
\& for my $f (@features) {
\&   my $tag = $f->primary_tag;
\&   push @{$sorted_features{$tag}},$f;
\& }
.Ve
.PP
.Vb 1
\& my $wholeseq = Bio::SeqFeature::Generic->new(-start=>1,-end=>$seq->length);
.Ve
.PP
.Vb 12
\& my $panel = Bio::Graphics::Panel->new(
\&                                      -length    => $seq->length,
\&                                      -key_style => 'between',
\&                                      -width     => 800,
\&                                      -pad_left  => 10,
\&                                      -pad_right => 10,
\&                                      );
\& $panel->add_track($wholeseq,
\&                  -glyph => 'arrow',
\&                  -bump => 0,
\&                  -double=>1,
\&                  -tick => 2);
.Ve
.PP
.Vb 5
\& $panel->add_track($wholeseq,
\&                  -glyph  => 'generic',
\&                  -bgcolor => 'blue',
\&                  -label  => 1,
\&                 );
.Ve
.PP
.Vb 17
\& # general case
\& my @colors = qw(cyan orange blue purple green chartreuse magenta yellow aqua);
\& my $idx    = 0;
\& for my $tag (sort keys %sorted_features) {
\&   my $features = $sorted_features{$tag};
\&   $panel->add_track($features,
\&                    -glyph    =>  'generic',
\&                    -bgcolor  =>  $colors[$idx++ % @colors],
\&                    -fgcolor  => 'black',
\&                    -font2color => 'red',
\&                    -key      => "${tag}s",
\&                    -bump     => +1,
\&                    -height   => 8,
\&                    -label    => 1,
\&                    -description => 1,
\&                   );
\& }
.Ve
.PP
.Vb 2
\& print $panel->png;
\& exit 0;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Please see Bio::Graphics::Panel for the full interface.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel,
Bio::Graphics::Glyph,
Bio::SeqI,
Bio::SeqFeatureI,
Bio::Das,
Bio::DB::GFF::Feature,
Ace::Sequence,
\&\s-1GD\s0
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
