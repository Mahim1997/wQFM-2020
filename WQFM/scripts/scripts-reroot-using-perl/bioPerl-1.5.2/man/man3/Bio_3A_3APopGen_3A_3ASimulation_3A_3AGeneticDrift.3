.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PopGen::Simulation::GeneticDrift 3"
.TH Bio::PopGen::Simulation::GeneticDrift 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::PopGen::Simulation::GeneticDrift \- A simple genetic drift simulation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use Bio::PopGen::Simulation::GeneticDrift;
\&  my $sim = new Bio::PopGen::Simulation::GeneticDrift(-popsize => 40,
\&                                                      -alleles => {A => 0.2,
\&                                                                   B => 0.8});
\&  for(my $i =0 ;$i < 10; $i++ ) {
\&    my %f = $sim->next_generation; # get the freqs for each generation
\&  }
.Ve
.PP
.Vb 4
\&  for(my $i =0 ;$i < 10; $i++ ) {
\&    # get the allele freqs as part of a Bio::PopGen::Population object
\&    my $pop = $sim->next_generation('population'); 
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A very simple 1 locus multi-allele random drift module, start with an
initial set of allele frequency and simulate what happens over time.
.PP
This isn't really useful for anything in particular yet but will be
built upon.
.PP
See Gillespie \s-1JH\s0. (1998) \*(L"Population Genetics: a Concise guide.\*(R" The Johns
              Hopkins University Press, Baltimore, \s-1USA\s0.  pp.19\-47.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $obj = new Bio::PopGen::Simulation::GeneticDrift();
\& Function: Builds a new Bio::PopGen::Simulation::GeneticDrift object 
\& Returns : an instance of Bio::PopGen::Simulation::GeneticDrift
\& Args    : -popsize => starting N
\&           -haploid => boolean if we should simulate haploids 
\&           -alleles => arrayref of the allele names
\&           OR
\&           -population => L<Bio::PopGen::PopulationI> object to initialize 
\&                          from some previously defined Population object
\&                          (or result from a previous simulation)
.Ve
.Sh "next_generation"
.IX Subsection "next_generation"
.Vb 7
\& Title   : next_generation
\& Usage   : my %generation = $sim->next_generation
\& Function: Get the next generation of allele frequencies based on the current
\&           generation
\& Returns : Hash of allele frequencies
\& Args    : 'allelefreqs' or 'population' to get back a hash of allele 
\&                 frequencies (default) OR a L<Bio::PopGen::Population> object
.Ve
.Sh "population_size"
.IX Subsection "population_size"
.Vb 6
\& Title   : population_size
\& Usage   : $obj->population_size($newval)
\& Function: 
\& Example : 
\& Returns : value of population_size (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "set_Frequencies_Equivalent"
.IX Subsection "set_Frequencies_Equivalent"
.Vb 5
\& Title   : set_Frequencies_Equivalent
\& Usage   : $sim->set_Frequencies_Equivalent
\& Function: Reset the allele frequencies so they are all even
\& Returns : none
\& Args    : none
.Ve
.Sh "get_Allele_Frequencies"
.IX Subsection "get_Allele_Frequencies"
.Vb 8
\& Title   : get_Allele_Frequencies
\& Usage   : my %allele_freqs = $marker->get_Allele_Frequencies;
\& Function: Get the alleles and their frequency (set relative to
\&           a given population - you may want to create different
\&           markers with the same name for different populations
\&           with this current implementation
\& Returns : Associative array where keys are the names of the alleles
\& Args    : none
.Ve
.Sh "add_Allele_Frequency"
.IX Subsection "add_Allele_Frequency"
.Vb 6
\& Title   : add_Allele_Frequency
\& Usage   : $marker->add_Allele_Frequency($allele,$freq)
\& Function: Adds an allele frequency
\& Returns : None
\& Args    : $allele - allele name
\&           $freq   - frequency value
.Ve
.Sh "reset_alleles"
.IX Subsection "reset_alleles"
.Vb 5
\& Title   : reset_alleles
\& Usage   : $marker->reset_alleles();
\& Function: Reset the alleles for a marker
\& Returns : None
\& Args    : None
.Ve
.Sh "validate_Frequencies"
.IX Subsection "validate_Frequencies"
.Vb 5
\& Title   : validate_Frequencies
\& Usage   : if( $sim->validate_Frequencies) {}
\& Function: Sanity checker that allele frequencies sum to 1 or less
\& Returns : boolean
\& Args    : -strict => 1 boolean if you want to insure that sum of freqs is 1
.Ve
