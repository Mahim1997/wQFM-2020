.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::SimpleGOEngine::GraphAdaptor 3"
.TH Bio::Ontology::SimpleGOEngine::GraphAdaptor 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Ontology::SimpleGOEngine::GraphAdaptor \- Graph adaptor for
Bio::Ontology::SimpleGOEngine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Ontology::SimpleGOEngine::GraphAdaptor;
.Ve
.PP
.Vb 1
\&  my $graph = Bio::Ontology::SimpleGOEngine::GraphAdaptor;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a think adaptor to simplify use of the old and new versions of
the standard \s-1CPAN\s0 Graph module (old is versions 0.2x; new is 0.5x and
beyond) within Bio::Ontology::SimpleGOEngine.
.PP
This module implements only those Graph methods used by
SimpleGOEngine.  It is far from a complete compatibility layer!  It
also implements workarounds for cerain performance problems in the
current versions of Graph v0.5x.
.PP
This class provides a 'new' method that determines which version of
Graph is available.  The object returned by 'new' is blessed into this
class if the new version of Graph is available, else into the subclass
.PP
.Vb 1
\&  Bio::Ontology::SimpleGOEngine::GraphAdaptor02
.Ve
.PP
This class provides implementations for the required graph methods
using the new version of Graph.  In most cases, these are simple
pass\-throughs.  Methods that differ in v0.2x are implemented in the
subclass.
.PP
The methods implemented here or in the subclasses are listed below.
In all cases, we implemented the Graph v0.5x interface.  Consult the
Graph v0.5x man page for details.
.PP
.Vb 15
\&  add_vertex
\&  has_vertex
\&  add_edge
\&  has_edge
\&  vertices
\&  edges
\&  edges_at
\&  predecessors
\&  successors
\&  set_vertex_attribute
\&  get_vertex_attribute
\&  set_edge_attribute
\&  get_edge_attribute
\&  source_vertices
\&  sink_vertices
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Nat Goodman
.PP
Email: natg at shore.net
.PP
Address:
.PP
.Vb 3
\&  Institute for Systems Biology
\&  1441 N 34th St
\&  Seattle, WA 98103-8904
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $graph = Bio::Ontology::SimpleGOEngine::GraphAdaptor->new()
\& Function: Creates a new graph
\& Returns : Bio::Ontology::SimpleGOEngine::GraphAdaptor02 or 
\&           Bio::Ontology::SimpleGOEngine::GraphAdaptor05 object, 
\&           depending on which Graph version is available
\& Args    : none
.Ve
.Sh "_graph"
.IX Subsection "_graph"
.Vb 5
\& Title   : _graph
\& Usage   : $self->_graph();
\& Function: Internal method to access 'real' graph
\& Returns : Graph::Directed object 
\& Args    : none
.Ve
.Sh "_vertex_attributes"
.IX Subsection "_vertex_attributes"
.Vb 5
\& Title   : _vertex_attributes
\& Usage   : $self->vertex_attributes();
\& Function: Internal method to access HASH used to store vertex attributes
\& Returns : Graph::Directed object 
\& Args    : none
.Ve
.Sh "_edge_attributes"
.IX Subsection "_edge_attributes"
.Vb 5
\& Title   : _edge_attributes
\& Usage   : $self->edge_attributes();
\& Function: Internal method to access HASH used to store edge attributes
\& Returns : Graph::Directed object 
\& Args    : none
.Ve
.Sh "_vertex2attributes"
.IX Subsection "_vertex2attributes"
.Vb 6
\& Title   : _vertex2attributes
\& Usage   : $value=$graph->_vertex2attributes($v_->{ATTRIBUTE};
\&           $graph->_vertex2attributes($v)->{ATTRIBUTE}=$value;
\& Function: Internal method to access attributes for a specific vertex
\& Returns : HASH
\& Args    : none
.Ve
.Sh "_edge2attributes"
.IX Subsection "_edge2attributes"
.Vb 6
\& Title   : _edge2attributes
\& Usage   : $value=$graph->_edge2attributes($u,$v)->{ATTRIBUTE};
\&           $graph->_edge2attributes($u,$v)->{ATTRIBUTE}=$value;
\& Function: Internal method to access HASH used to store edge attributes
\& Returns : HASH
\& Args    : none
.Ve
