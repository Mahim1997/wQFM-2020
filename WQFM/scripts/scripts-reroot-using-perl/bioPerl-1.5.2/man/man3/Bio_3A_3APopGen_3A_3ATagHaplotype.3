.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PopGen::TagHaplotype 3"
.TH Bio::PopGen::TagHaplotype 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::PopGen::TagHaplotype.pm \- Haplotype tag object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::PopGen::TagHaplotype;
.Ve
.PP
.Vb 1
\&    my $obj = Bio::PopGen::TagHaplotype -> new($hap);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module take as input a haplotype and try toe get the minimal set
of \s-1SNP\s0 that define the haplotype. This module can be use alone.  But
due to the tagging haplotype process is exponential one. My suggestion
is that before to use this module you pass your data under Select.mp
module also on this folder.  In any case if, you provide an haplotype
the module will try to find the answer to your question.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Vb 1
\&    my $obj = Bio::PopGen::TagHaplotype -> new($hap);
.Ve
.PP
.Vb 1
\&    were $hap is the reference to an array of array with the haplotype.
.Ve
.PP
.Vb 4
\&    $hap= [[0, 0, 0],
\&           [1, 0, 0],
\&           [0, 1, 1]
\&          ];
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Pedro M. Gomez-Fabre"
.IX Header "AUTHOR - Pedro M. Gomez-Fabre"
Email pgf18872\-at\-gsk\-dot\-com
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Function: constructor of the class.
\& Returns : self hash
\& Args    : input haplotype (array of array)
\& Status  : public
.Ve
.Sh "haplotype_block"
.IX Subsection "haplotype_block"
.Vb 5
\& Title   : haplotype_block
\& Usage   : my $haplotype_block = $TagHaplotype->haplotype_block();
\& Function: Get the haplotype block for a haplotype tagging selection
\& Returns : reference of array
\& Args    : reference of array with haplotype pattern
.Ve
.Sh "input_block"
.IX Subsection "input_block"
.Vb 8
\& Title   : input_block 
\& Usage   : $obj->input_block()
\& Function: returns haplotype block. By now will produce the same ouput than
\&           $self->haplotype_block. but for compatiblity, this method is kept. 
\&           This method is deprecated.
\& Returns : reference to array of array with the haplotype input value 
\& Args    : none 
\& Status  : public
.Ve
.Sh "tag_list"
.IX Subsection "tag_list"
.Vb 7
\& Title   : tag_list 
\& Usage   : $obj->tag_list()
\& Function: returns the list of SNPs combination that identify the
\&           haplotype. All combinations are displayed as arrays
\& Returns : reference to array of array. 
\& Args    : none
\& Status  : public
.Ve
.Sh "tag_length"
.IX Subsection "tag_length"
.Vb 6
\& Title   : tag_length 
\& Usage   : $obj->tag_length()
\& Function: returns the length of the tag.
\& Returns : scalar 
\& Args    : none
\& Status  : public
.Ve
.Sh "_scan_snp"
.IX Subsection "_scan_snp"
.Vb 7
\& Title   : _scan_snp 
\& Usage   : internal
\& Function: scan sets increasing the length until find a non degenerated
\&           pattern. 
\& Returns : scalar
\& Args    : none
\& Status  : private
.Ve
.Sh "_gen_comb"
.IX Subsection "_gen_comb"
.Vb 8
\& Title   : _gen_comb 
\& Usage   : internal
\& Function: we supply the length of the haplotype and the length of the
\&           word we need to find and the functions returns the possible
\&           list of combinations.
\& Returns : scalar
\& Args    : none
\& Status  : private
.Ve
.Sh "_generateCombinations"
.IX Subsection "_generateCombinations"
.Vb 3
\& Title   : _generateCombinations 
\& Usage   : internal
\& Function: Recursive function that produce all combinations for a set
.Ve
.PP
.Vb 1
\&           i.e.:
.Ve
.PP
.Vb 1
\&           1, 2, 3, 4
.Ve
.PP
.Vb 1
\&           and word of B<3> will produce:
.Ve
.PP
.Vb 4
\&           1, 2, 3
\&           1, 2, 4
\&           1, 3, 4
\&           2, 3, 4
.Ve
.PP
.Vb 3
\& Returns :
\& Args    : none
\& Status  : private
.Ve
.Sh "_scan_combinations"
.IX Subsection "_scan_combinations"
.Vb 8
\& Title   : _scan_combinations 
\& Usage   : internal
\& Function: take the haplotype and a list of possible combination
\&           for that length. Generate a subset and scan it to find if
\&           the information is enought to define the haplotype set.
\& Returns :
\& Args    : none
\& Status  : private
.Ve
