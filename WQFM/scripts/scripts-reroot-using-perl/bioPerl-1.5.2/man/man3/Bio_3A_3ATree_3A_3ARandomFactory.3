.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::RandomFactory 3"
.TH Bio::Tree::RandomFactory 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::RandomFactory \- TreeFactory for generating Random Trees
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Bio::Tree::RandomFactory
\&  my @taxonnames;
\&  my $factory = new Bio::Tree::RandomFactory( -taxa => \e@taxonnames,
\&                                              -maxcount => 10);
.Ve
.PP
.Vb 1
\&  # or for anonymous samples
.Ve
.PP
.Vb 2
\&  my $factory = new Bio::Tree::RandomFactory( -num_taxa => 6,
\&                                              -maxcount => 50);
.Ve
.PP
.Vb 1
\&  my $tree = $factory->next_tree;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Builds a random tree every time next_tree is called or up to \-maxcount times.
.PP
This module was originally written for Coalescent simulations see
Bio::PopGen::Simulation::Coalescent.  I've left the next_tree
method intact although it is not generating random trees in the
phylogenetic sense.  I would be happy for someone to provide
alternative implementations which can be used here.  As written it
will generate random topologies but the branch lengths are built from
assumptions in the coalescent and are not appropriate for phylogenetic
analyses.
.PP
This algorithm is based on the make_tree algorithm from Richard Hudson 1990.
.PP
Hudson, R. R. 1990. Gene genealogies and the coalescent
       process. Pp. 1\-44 in D. Futuyma and J.  Antonovics, eds. Oxford
       surveys in evolutionary biology. Vol. 7. Oxford University
       Press, New York
.PP
Sanderson, M ... 
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-AT\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Matthew Hahn, <matthew.hahn@duke.edu>
Mike Sanderson 
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 12
\& Title   : new
\& Usage   : my $factory = new Bio::Tree::RandomFactory(-samples => \e@samples,
\&                                                      -maxcount=> $N);
\& Function: Initializes a Bio::Tree::RandomFactory object
\& Returns : Bio::Tree::RandomFactory
\& Args    : -nodetype => Type of Nodes to create [default Bio::Tree::Node]
\&           -maxcount => [optional] Maximum num trees to create
\&           -randtype => Type of random trees so far support
\&               - yule/backward_yule/BY [default]
\&               - forward_yule/FY
\&               - birthdeath_forward/BDF
\&               - birthdeath_backwards/BDB
.Ve
.PP
.Vb 3
\&          ONE of the following must be specified
\&           -taxa     => $arrayref of taxa names
\&           -num_taxa => integer indicating number of taxa in the tree
.Ve
.Sh "next_tree"
.IX Subsection "next_tree"
.Vb 6
\& Title   : next_tree
\& Usage   : my $tree = $factory->next_tree
\& Function: Returns a random tree based on the initialized number of nodes
\&           NOTE: if maxcount is not specified on initialization or
\&                 set to a valid integer, subsequent calls to next_tree will 
\&                 continue to return random trees and never return undef
.Ve
.PP
.Vb 2
\& Returns : Bio::Tree::TreeI object
\& Args    : none
.Ve
.Sh "maxcount"
.IX Subsection "maxcount"
.Vb 5
\& Title   : maxcount
\& Usage   : $obj->maxcount($newval)
\& Function: 
\& Returns : Maxcount value
\& Args    : newvalue (optional)
.Ve
.Sh "reset_tree_count"
.IX Subsection "reset_tree_count"
.Vb 5
\& Title   : reset_tree_count
\& Usage   : $factory->reset_tree_count;
\& Function: Reset the tree counter
\& Returns : none
\& Args    : none
.Ve
.Sh "taxa"
.IX Subsection "taxa"
.Vb 5
\& Title   : taxa
\& Usage   : $obj->taxa($newval)
\& Function: Set the leaf node names
\& Returns : value of taxa
\& Args    : Arrayref of Taxon names
.Ve
.Sh "num_taxa"
.IX Subsection "num_taxa"
.Vb 5
\& Title   : num_taxa
\& Usage   : $obj->num_taxa($newval)
\& Function: Get the number of Taxa
\& Returns : value of num_taxa
\& Args    : none
.Ve
.Sh "random"
.IX Subsection "random"
.Vb 7
\& Title   : random
\& Usage   : my $rfloat = $node->random($size)
\& Function: Generates a random number between 0 and $size
\&           This is abstracted so that someone can override and provide their
\&           own special RNG.  This is expected to be a uniform RNG.
\& Returns : Floating point random
\& Args    : $maximum size for random number (defaults to 1)
.Ve
.Sh "random_tree_method"
.IX Subsection "random_tree_method"
.Vb 6
\& Title   : random_tree_method
\& Usage   : $obj->random_tree_method($newval)
\& Function: 
\& Example : 
\& Returns : value of random_tree_method (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "nodetype"
.IX Subsection "nodetype"
.Vb 6
\& Title   : nodetype
\& Usage   : $obj->nodetype($newval)
\& Function: 
\& Example : 
\& Returns : value of nodetype (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
