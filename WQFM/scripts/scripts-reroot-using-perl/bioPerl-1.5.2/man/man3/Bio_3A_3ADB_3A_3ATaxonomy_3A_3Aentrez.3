.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy::entrez 3"
.TH Bio::DB::Taxonomy::entrez 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Taxonomy::entrez \- Taxonomy Entrez driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
# Do not use this object directly, rather through the Bio::DB::Taxonomy
# interface
.PP
.Vb 1
\&  use Bio::DB::Taxonomy;
.Ve
.PP
.Vb 1
\&  my $db = new Bio::DB::Taxonomy(-source => 'entrez');
.Ve
.PP
.Vb 2
\&  my $taxonid = $db->get_taxonid('Homo sapiens');
\&  my $node   = $db->get_Taxonomy_Node(-taxonid => $taxonid);
.Ve
.PP
.Vb 5
\&  my $gi = 71836523;
\&  my $node = $db->get_Taxonomy_Node(-gi => $gi, -db => 'protein');
\&  print $node->binomial, "\en";
\&  my ($species,$genus,$family) =  $node->classification;
\&  print "family is $family\en";
.Ve
.PP
.Vb 6
\&  # Can also go up 4 levels
\&  my $p = $node;  
\&  for ( 1..4 ) { 
\&    $p = $db->get_Taxonomy_Node(-taxonid => $p->parent_id);
\&  }
\&  print $p->rank, " ", ($p->classification)[0], "\en";
.Ve
.PP
.Vb 2
\&  # could then classify a set of BLAST hits based on their GI numbers
\&  # into taxonomic categories.
.Ve
.PP
It is not currently possibly to query a node for its children so we
cannot completely replace the advantage of the flatfile
Bio::DB::Taxonomy::flatfile module.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A driver for querying \s-1NCBI\s0 Entrez Taxonomy database.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala: bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $obj = new Bio::DB::Taxonomy::entrez();
\& Function: Builds a new Bio::DB::Taxonomy::entrez object
\& Returns : an instance of Bio::DB::Taxonomy::entrez
\& Args    : -location => URL to Entrez (if you want to override the default)
\&           -params   => Hashref of URL params if you want to override the
\&                        default
.Ve
.Sh "get_taxon"
.IX Subsection "get_taxon"
.Vb 18
\& Title   : get_taxon
\& Usage   : my $taxon = $db->get_taxon(-taxonid => $taxonid)
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : just a single value which is the database id, OR named args:
\&           -taxonid => taxonomy id (to query by taxonid)
\&            OR
\&           -name    => string (to query by a taxonomy name: common name, 
\&                               scientific name, etc)
\&            OR
\&           To retrieve a taxonomy node for a GI number provide the -gi option
\&           with the gi number and -db with either 'nucleotide' or 'protein' to
\&           define the db.
\&            AND optionally,
\&           -full    => 1 (to force retrieval of full information - sometimes
\&                          minimal information about your taxon may have been
\&                          cached, which is normally used to save database
\&                          accesses)
.Ve
.Sh "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my $taxonid = $db->get_taxonids('Homo sapiens');
\& Function: Searches for a taxonid (typically ncbi_taxon_id) based on a query
\&           string. Note that multiple taxonids can match to the same supplied
\&           name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing taxon's name
.Ve
.Sh "ancestor"
.IX Subsection "ancestor"
.Vb 3
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db->ancestor($taxon)
\& Function: Retrieve the ancestor taxon of a supplied Taxon from the database.
.Ve
.PP
.Vb 3
\&           Note that unless the ancestor has previously been directly
\&           requested with get_taxon(), the returned Taxon object will only have
\&           a minimal amount of information.
.Ve
.PP
.Vb 2
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.Sh "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 4
\& Title   : each_Descendent
\& Usage   : my @taxa = $db->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
.Ve
.PP
.Vb 3
\&           Note that this implementation is unable to return a taxon that
\&           hasn't previously been directly fetched with get_taxon(), or wasn't
\&           an ancestor of such a fetch.
.Ve
.PP
.Vb 2
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.Sh "Some Get/Setter methods"
.IX Subsection "Some Get/Setter methods"
.Sh "entrez_url"
.IX Subsection "entrez_url"
.Vb 5
\& Title   : entrez_url
\& Usage   : $obj->entrez_url($newval)
\& Function: Get/set entrez URL
\& Returns : value of entrez url (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "entrez_params"
.IX Subsection "entrez_params"
.Vb 5
\& Title   : entrez_params
\& Usage   : $obj->entrez_params($newval)
\& Function: Get/set entrez params
\& Returns : value of entrez_params (a hashref)
\& Args    : on set, new value Hashref
.Ve
.Sh "Bio::DB::WebBase methods"
.IX Subsection "Bio::DB::WebBase methods"
.Sh "proxy_string"
.IX Subsection "proxy_string"
.Vb 5
\& Title   : proxy_string
\& Usage   : my $proxy_string = $self->proxy_string($protocol)
\& Function: Get the proxy string (plus user/pass )
\& Returns : string
\& Args    : protocol ('http' or 'ftp'), default 'http'
.Ve
.Sh "proxy"
.IX Subsection "proxy"
.Vb 9
\& Title   : proxy
\& Usage   : $httpproxy = $db->proxy('http')  or
\&           $db->proxy(['http','ftp'], 'http://myproxy' )
\& Function: Get/Set a proxy for use of proxy
\& Returns : a string indicating the proxy
\& Args    : $protocol : an array ref of the protocol(s) to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.Sh "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass
\& Args    : Array or user/pass
.Ve
