.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Species 3"
.TH Bio::Species 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Species \- Generic species object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    $species = Bio::Species->new(-classification => [@classification]);
\&                                    # Can also pass classification
\&                                    # array to new as below
.Ve
.PP
.Vb 4
\&    $species->classification(qw( sapiens Homo Hominidae
\&                                 Catarrhini Primates Eutheria
\&                                 Mammalia Vertebrata Chordata
\&                                 Metazoa Eukaryota ));
.Ve
.PP
.Vb 1
\&    $genus = $species->genus();
.Ve
.PP
.Vb 1
\&    $bi = $species->binomial();     # $bi is now "Homo sapiens"
.Ve
.PP
.Vb 2
\&    # For storing common name
\&    $species->common_name("human");
.Ve
.PP
.Vb 2
\&    # For storing subspecies
\&    $species->sub_species("accountant");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides a very simple object for storing phylogenetic
information.  The classification is stored in an array,
which is a list of nodes in a phylogenetic tree.  Access to
getting and setting species and genus is provided, but not
to any of the other node types (eg: \*(L"phylum\*(R", \*(L"class\*(R",
\&\*(L"order\*(R", \*(L"family\*(R").  There's plenty of scope for making the
model more sophisticated, if this is ever needed.
.PP
A methods are also provided for storing common
names, and subspecies.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
James Gilbert email \fBjgrg@sanger.ac.uk\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : my $obj = Bio::Species->new(-classification => \e@class)
\& Function: Build a new Species object
\& Returns : Bio::Species object
\& Args    : -ncbi_taxid     => NCBI taxonomic ID (optional)
\&           -classification => arrayref of classification
.Ve
.Sh "classification"
.IX Subsection "classification"
.Vb 15
\& Title   : classification
\& Usage   : $self->classification(@class_array);
\&           @classification = $self->classification();
\& Function: Get/set the lineage of this species. The array provided must be in
\&           the order ... ---> SPECIES, GENUS ---> KINGDOM ---> etc.
\& Example : $obj->classification(qw( 'Homo sapiens' Homo Hominidae
\&           Catarrhini Primates Eutheria Mammalia Vertebrata
\&           Chordata Metazoa Eukaryota));
\& Returns : Classification array
\& Args    : Classification array 
\&                 OR
\&           A reference to the classification array. In the latter case
\&           if there is a second argument and it evaluates to true,
\&           names will not be validated. NB: in any case, names are never
\&           validated anyway.
.Ve
.Sh "ncbi_taxid"
.IX Subsection "ncbi_taxid"
.Vb 5
\& Title   : ncbi_taxid
\& Usage   : $obj->ncbi_taxid($newval)
\& Function: Get/set the NCBI Taxon ID
\& Returns : the NCBI Taxon ID as a string
\& Args    : newvalue to set or undef to unset (optional)
.Ve
.Sh "common_name"
.IX Subsection "common_name"
.Vb 7
\& Title   : common_name
\& Usage   : $self->common_name( $common_name );
\&           $common_name = $self->common_name();
\& Function: Get or set the common name of the species
\& Example : $self->common_name('human')
\& Returns : The common name in a string
\& Args    : String, which is the common name (optional)
.Ve
.Sh "division"
.IX Subsection "division"
.Vb 5
\& Title   : division
\& Usage   : $obj->division($newval)
\& Function: Genbank Division for a species
\& Returns : value of division (a scalar)
\& Args    : value of division (a scalar)
.Ve
.Sh "species"
.IX Subsection "species"
.Vb 7
\& Title   : species
\& Usage   : $self->species( $species );
\&           $species = $self->species();
\& Function: Get or set the scientific species name.
\& Example : $self->species('Homo sapiens');
\& Returns : Scientific species name as string
\& Args    : Scientific species name as string
.Ve
.Sh "genus"
.IX Subsection "genus"
.Vb 7
\& Title   : genus
\& Usage   : $self->genus( $genus );
\&           $genus = $self->genus();
\& Function: Get or set the scientific genus name.
\& Example : $self->genus('Homo');
\& Returns : Scientific genus name as string
\& Args    : Scientific genus name as string
.Ve
.Sh "sub_species"
.IX Subsection "sub_species"
.Vb 5
\& Title   : sub_species
\& Usage   : $obj->sub_species($newval)
\& Function: Get or set the scientific subspecies name.
\& Returns : value of sub_species
\& Args    : newvalue (optional)
.Ve
.Sh "variant"
.IX Subsection "variant"
.Vb 7
\& Title   : variant
\& Usage   : $obj->variant($newval)
\& Function: Get/set variant information for this species object (strain,
\&           isolate, etc).
\& Example : 
\& Returns : value of variant (a scalar)
\& Args    : new value (a scalar or undef, optional)
.Ve
.Sh "binomial"
.IX Subsection "binomial"
.Vb 7
\& Title   : binomial
\& Usage   : $binomial = $self->binomial();
\&           $binomial = $self->binomial('FULL');
\& Function: Returns a string "Genus species", or "Genus species subspecies",
\&           if the first argument is 'FULL' (and the species has a subspecies).
\& Args    : Optionally the string 'FULL' to get the full name including
\&           the subspecies.
.Ve
.Sh "validate_species_name"
.IX Subsection "validate_species_name"
.Vb 13
\& Title   : validate_species_name
\& Usage   : $result = $self->validate_species_name($string);
\& Function: Validate the species portion of the binomial
\& Args    : string
\& Notes   : The string following the "genus name" in the NCBI binomial
\&           is so variable that it's not clear that this is a useful
\&           function. Consider the binomials 
\&           "Simian 11 rotavirus (serotype 3 / strain SA11-Patton)",
\&           or "St. Thomas 3 rotavirus", straight from GenBank.
\&           This is particularly problematic in microbes and viruses.
\&           As such, this isn't actually used automatically by any Bio::Species
\&           method.
\&=cut
.Ve
.PP
sub validate_species_name {
    my( \f(CW$self\fR, \f(CW$string\fR ) = \f(CW@_\fR;
.PP
.Vb 5
\&    return 1 if $string eq "sp.";
\&        return 1 if $string =~ /strain/;
\&    return 1 if $string =~ /^[a-z][\ew\es-]+$/i;
\&    $self->throw("Invalid species name '$string'");
\&}
.Ve
.PP
sub validate_name {
    return 1;
}
.Sh "organelle"
.IX Subsection "organelle"
.Vb 7
\& Title   : organelle
\& Usage   : $self->organelle( $organelle );
\&           $organelle = $self->organelle();
\& Function: Get or set the organelle name
\& Example : $self->organelle('Chloroplast')
\& Returns : The organelle name in a string
\& Args    : String, which is the organelle name
.Ve
