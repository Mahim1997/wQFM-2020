.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::Clone 3"
.TH Bio::Map::Clone 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Map::Clone \- An central map object representing a clone
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   # get the clone object of $clone from the Bio::Map::Clone
\&   my $cloneobj = $physical->get_cloneobj($clone);
.Ve
.PP
.Vb 4
\&   # acquire all the markers that hit this clone
\&   foreach my $marker ($cloneobj->each_markerid()) {
\&       print "   +++$marker\en";
\&   }
.Ve
.PP
See Bio::Map::Position and Bio::Map::PositionI for more information.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object handles the notion of a clone. This clone will
have a name and a position in a map.
.PP
This object is intended to be used by a map parser like fpc.pm.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Gaurav Gupta"
.IX Header "AUTHOR - Gaurav Gupta"
Email gaurav@genome.arizona.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala  bix@sendu.me.uk
.SH "PROJECT LEADERS"
.IX Header "PROJECT LEADERS"
Jamie Hatfield      jamie@genome.arizona.edu
Dr. Cari Soderlund  cari@genome.arizona.edu
.SH "PROJECT DESCRIPTION"
.IX Header "PROJECT DESCRIPTION"
The project was done in Arizona Genomics Computational Laboratory (AGCoL)
at University of Arizona.
.PP
This work was funded by USDA-IFAFS grant #11180 titled \*(L"Web Resources for 
the Computation and Display of Physical Mapping Data\*(R".
.PP
For more information on this project, please refer: 
  http://www.genome.arizona.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 41
\& Title   : new
\& Usage   : my $clone = Bio::Map::Clone->new
\&                      (
\&                       -name    => $clone,
\&                       -markers => \e@markers,
\&                       -contig  => $contig,
\&                       -type    => $type,
\&                       -bands   => $bands,
\&                       -gel     => $gel,
\&                       -group   => $group,
\&                       -remark  => $remark,
\&                       -fpnumber=> $fp_number,
\&                       -sequencetype  => $seq_type,
\&                       -sequencestatus=> $seq_status,
\&                       -fpcremark => $fpc_remark,
\&                       -matche    => \e@ematch,
\&                       -matcha    => \e@amatch,
\&                       -matchp    => \e@pmatch,
\&                       -range     => Bio::Range->new(-start => $startrange,
\&                                                     -end   => $endrange)
\&                       );
\& Function: Initialize a new Bio::Map::Clone object
\&           Most people will not use this directly but get Clones 
\&           through L<Bio::MapIO::fpc>
\& Returns : L<Bio::Map::Clone> object
\& Args    :   -name => marker name string,
\&             -markers => array ref of markers,
\&             -contig  => contig name string,
\&             -type    => type string,
\&             -bands   => band string,
\&             -gel     => gel string,
\&             -group   => group name string,
\&             -remark  => remark string,
\&             -fpnumber=> FP number string,
\&             -sequencetype  => seq type string,
\&             -sequencestatus=> seq status string,
\&             -fpcremark => FPC remark,
\&             -matche    => array ref,
\&             -matcha    => array ref,
\&             -matchp    => array ref,
\&             -range     => L<Bio::Range> object,
.Ve
.SH "Access Methods"
.IX Header "Access Methods"
These methods let you get and set the member variables
.Sh "name"
.IX Subsection "name"
.Vb 5
\& Title   : name
\& Usage   : my $name = $cloneobj->name();
\& Function: Get/set the name for this Clone
\& Returns : scalar representing the current name of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "type"
.IX Subsection "type"
.Vb 5
\& Title   : type
\& Usage   : my $type = $cloneobj->type();
\& Function: Get/set the type for this clone
\& Returns : scalar representing the current type of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "range"
.IX Subsection "range"
.Vb 8
\& Title   : range
\& Usage   : my $range = $cloneobj->range();
\& Function: Get/set the range of the contig that this clone covers
\& Returns : Bio::Range representing the current range of this contig,
\&           start and end of the contig can be thus found using:
\&           my $start = $contigobj->range()->start();
\&           my $end   = $contigobj->range()->end();
\& Args    : none to get, OR Bio::Range to set
.Ve
.Sh "match"
.IX Subsection "match"
.Vb 8
\& Title   : match
\& Usage   : @eclone = $cloneobj->match('exact');
\&           @aclone = $cloneobj->match('approximate');
\&           @pclone = $cloneobj->match('pseudo');
\& Function: get all matching clones
\& Returns : list 
\& Args    : scalar representing the type of clone to be 
\&           queried.
.Ve
.Sh "each_match"
.IX Subsection "each_match"
.Vb 2
\& Title   : each_match
\& Function: Synonym of the match() method.
.Ve
.Sh "set_match"
.IX Subsection "set_match"
.Vb 6
\& Title   : set_match
\& Usage   : $clone->set_match($type,$values);
\& Function: Set the Matches per type
\& Returns : None
\& Args    : type (one of 'exact' 'approx' 'pseudo')
\&           array ref of match values
.Ve
.Sh "gel"
.IX Subsection "gel"
.Vb 5
\& Title   : gel
\& Usage   : $clonegel = $cloneobj->gel();
\& Function: Get/set the gel number for this clone
\& Returns : scalar representing the gel number of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "remark"
.IX Subsection "remark"
.Vb 5
\& Title   : remark
\& Usage   : $cloneremark = $cloneobj->remark();
\& Function: Get/set the remark for this clone
\& Returns : scalar representing the current remark of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "fp_number"
.IX Subsection "fp_number"
.Vb 5
\& Title   : fp_number
\& Usage   : $clonefpnumber = $cloneobj->fp_number();
\& Function: Get/set the fp number for this clone
\& Returns : scalar representing the fp number of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "sequence_type"
.IX Subsection "sequence_type"
.Vb 5
\& Title   : sequence_type
\& Usage   : $cloneseqtype = $cloneobj->sequence_type();
\& Function: Get/set the sequence type for this clone
\& Returns : scalar representing the sequence type of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "sequence_status"
.IX Subsection "sequence_status"
.Vb 5
\& Title   : sequence_status
\& Usage   : $cloneseqstatus = $cloneobj->sequence_status();
\& Function: Get/set the sequence status for this clone
\& Returns : scalar representing the sequence status of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "fpc_remark"
.IX Subsection "fpc_remark"
.Vb 5
\& Title   : fpc_remark
\& Usage   : $clonefpcremark = $cloneobj->fpc_remark();
\& Function: Get/set the fpc remark for this clone
\& Returns : scalar representing the fpc remark of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "band"
.IX Subsection "band"
.Vb 7
\& Title   : band
\& Usage   : @clonebands = $cloneobj->bands();
\& Function: Get/set the bands for this clone
\& Returns : liat representing the band of this clone, if 
\&           readcor = 1 while creating the MapIO object and the
\&           .cor exists
\& Args    : none to get, OR string to set
.Ve
.Sh "group"
.IX Subsection "group"
.Vb 7
\& Title   : group
\& Usage   : $cloneobj->group($chrno);
\& Function: Get/set the group number for this clone.
\&           This is a generic term, used for Linkage-Groups as well as for
\&           Chromosomes.
\& Returns : scalar representing the group number of this clone
\& Args    : none to get, OR string to set
.Ve
.Sh "contigid"
.IX Subsection "contigid"
.Vb 5
\& Title   : contigid
\& Usage   : my $ctg = $cloneobj->contigid();
\& Function: Get/set the contig this clone belongs to
\& Returns : scalar representing the contig
\& Args    : none to get, OR string to set
.Ve
.Sh "each_markerid"
.IX Subsection "each_markerid"
.Vb 5
\& Title   : each_markerid
\& Usage   : @markers = $cloneobj->each_markerid();
\& Function: retrieves all the elements in a map unordered
\& Returns : list of strings (ids)
\& Args    : none
.Ve
.PP
.Vb 2
\& *** This only supplies the ids set with the set_markers method ***
\& *** It has nothing to do with actual Bio::Map::MarkerI objects ***
.Ve
.Sh "set_markers"
.IX Subsection "set_markers"
.Vb 5
\& Title   : markers
\& Usage   : $obj->set_markers($newval)
\& Function: Set list of Marker ids (arrayref)
\& Returns : None
\& Args    : arrayref of strings (ids)
.Ve
.PP
.Vb 2
\& *** This only sets a list of ids ***
\& *** It has nothing to do with actual Bio::Map::MarkerI objects ***
.Ve
