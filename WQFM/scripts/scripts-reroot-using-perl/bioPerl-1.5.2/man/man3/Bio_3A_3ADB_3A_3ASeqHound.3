.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqHound 3"
.TH Bio::DB::SeqHound 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::SeqHound \- Database object interface to SeqHound
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::DB::SeqHound;
\&    $sh = new Bio::DB::SeqHound();
.Ve
.PP
.Vb 1
\&    $seq = $sh->get_Seq_by_acc("CAA28783"); # Accession Number
.Ve
.PP
.Vb 1
\&    # or ...
.Ve
.PP
.Vb 1
\&    $seq = $sh->get_Seq_by_gi(4557225); # GI Number
.Ve
.SH "VERSION"
.IX Header "VERSION"
1.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SeqHound is a database of biological sequences and structures.  This
script allows the retrieval of sequence objects (Bio::Seq) from the
SeqHound database at the Blueprint Initiative.
.PP
Bioperl extension permitting use of the SeqHound Database System
developed by researchers at
.PP
.Vb 4
\& The Blueprint Initiative
\& Samuel Lunenfeld Research Institute
\& Mount Sinai Hospital
\& Toronto, Canada
.Ve
.SH "FEEDBACK/BUGS"
.IX Header "FEEDBACK/BUGS"
known bugs: fail to get sequences for some RefSeq record with \s-1CONTIG\s0,
example \s-1GI\s0 = 34871762
.PP
<seqhound@blueprint.org>
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
User feedback is an integral part of the evolution of this Bioperl module. Send
your comments and suggestions preferably to seqhound.usergroup mailing lists.
Your participation is much appreciated.
.PP
<seqhound.usergroup@lists.blueprint.org>
.SH "WEBSITE"
.IX Header "WEBSITE"
For more information on SeqHound http://www.blueprint.org/seqhound/
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided 'as is' without warranty of any kind.
.SH "AUTHOR"
.IX Header "AUTHOR"
Rong Yao, Hao Lieu, Ian Donaldson
.PP
<seqhound@blueprint.org>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : $sh = Bio::DB::SeqHound->new(@options);
\& Function: Creates a new seqhound handle
\& Returns : New seqhound handle
\& Args    :
.Ve
.SH "Routines Bio::DB::WebDBSeqI from Bio::DB::RandomAccessI"
.IX Header "Routines Bio::DB::WebDBSeqI from Bio::DB::RandomAccessI"
.Sh "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 29
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db->get_Seq_by_id('ROA1_HUMAN'); 
\& Function: Gets a Bio::Seq object by its name
\& Returns : a Bio::Seq object
\& Args    : the id (as a string) of a sequence
\& Throws  : "id does not exist" exception
\& Example : Each of these calls retrieves the same sequence record
\&           $seq = $db->get_Seq_by_id(56);        #retrieval by GI
\&           $seq = $db->get_Seq_by_id("X02597");  #retrieval by NCBI accession
\&           $seq = $db->get_Seq_by_id("BTACHRE"); #retrieval by sequence "name"
\&           a sequence "name" is a secondary identifier (usually assigned by the
\&           submitting database external to the NCBI) that may not be visible in
\&           the GenBank flat file version of the record but is always present in
\&           the ASN.1 format.
\& Note    : Since in GenBank.pm, this function accepts a gi, an accession number
\&           or a sequence name, SeqHound also satisfies these inputs.
\&           If the input uid is a number, it is treated as a gi, if the uid is a
\&           string, it is treated as an accession number first. If the search still
\&           fails, it is treated as a sequence name.
\&           Since SeqHound stores biological data from different source sequence
\&           databases like: GenBank, GenPept, SwissProt, EMBL, RefSeq,
\&           you can pass ids from the above databases to this function. 
\&           The Bio::Seq object returned by this function is identical to the
\&           Bio::Seq generated by the GenBank.pm and GenPept.pm.
\&           The Bio::Seq object returned by this function sometimes has minor
\&           difference in the SeqFeature from the Bio::Seq object generated 
\&           in RefSeq.pm. 
\&           The Bio::Seq objects created from this function will have the NCBI
\&           versions of the SwissProt and EMBL sequence data information.
.Ve
.Sh "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 20
\&  Title   : get_Seq_by_acc
\&  Usage   : $seq = $db->get_Seq_by_acc('M34830');
\&  Function: Gets a Seq object by accession numbers
\&  Returns : a Bio::Seq object
\&  Args    : the accession number as a string
\&  Throws  : "id does not exist" exception
\&  Note    : Since in GenBank.pm, this function accepts an accession number
\&            or a sequence name, SeqHound also satisfies these inputs.
\&            If the input uid is a string, it is treated as an accession number first.
\&            If the search fails, it is treated as a sequence name.
\&            Since SeqHound stores biological data from different source sequence
\&            databases like: GenBank, GenPept, SwissProt, EMBL, RefSeq,
\&            you can pass ids from the above databases to this function. 
\&            The Bio::Seq object returned by this function is identical to the
\&            Bio::Seq generated by the GenBank.pm and GenPept.pm.
\&            The Bio::Seq object returned by this function sometimes has minor
\&            difference in the SeqFeature from the Bio::Seq object generated 
\&            in RefSeq.pm. 
\&            The Bio::Seq objects created from this function will have the NCBI
\&            versions of the SwissProt and EMBL sequence data information.
.Ve
.Sh "get_Seq_by_gi"
.IX Subsection "get_Seq_by_gi"
.Vb 7
\& Title   : get_Seq_by_gi
\& Usage   : $seq = $sh->get_Seq_by_gi('405830');
\& Function: Gets a Bio::Seq object by gi number
\& Returns : A Bio::Seq object
\& Args    : gi number (as a string)
\& Throws  : "gi does not exist" exception
\& Note    : call the same code get_Seq_by_id
.Ve
.Sh "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 10
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db->get_Seq_by_version('X77802');
\& Function: Gets a Bio::Seq object by sequence version
\& Returns : A Bio::Seq object
\& Args    : accession.version (as a string)
\& Throws  : "acc.version does not exist" exception
\& Note    : SeqHound only keeps the most up-to-date version of a sequence. So
\&           for the above example, use 
\&           $seq = $db->get_Seq_by_acc('X77802'); 
\&           instead of X77802.1
.Ve
.Sh "get_Stream_by_query"
.IX Subsection "get_Stream_by_query"
.Vb 17
\&  Title   : get_Stream_by_query
\&  Usage   : $seq = $db->get_Stream_by_query($query);
\&  Function: Retrieves Seq objects from Entrez 'en masse', rather than one
\&            at a time.  For large numbers of sequences, this is far superior
\&            than get_Stream_by_[id/acc]().
\&  Example : $query_string = 'Candida maltosa 26S ribosomal RNA gene'; 
\&            $query = Bio::DB::Query::GenBank->new(-db=>'nucleotide',
\&                                        -query=>$query_string);
\&            $stream = $sh->get_Stream_by_query($query);
\&            or
\&            $query = Bio::DB::Query::GenBank->new (-db=> 'nucleotide',
\&                                        -ids=>['X02597', 'X63732', 11002, 4557284]);
\&            $stream = $sh->get_Stream_by_query($query);
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $query :   A Bio::DB::Query::GenBank object. It is suggested that
\&            you create a Bio::DB::Query::GenBank object and get the entry
\&            count before you fetch a potentially large stream.
.Ve
.Sh "get_Stream_by_id"
.IX Subsection "get_Stream_by_id"
.Vb 23
\&  Title   : get_Stream_by_id
\&  Usage   : $stream = $db->get_Stream_by_id(['J05128', 'S43442', 34996479]);
\&  Function: Gets a series of Seq objects by unique identifiers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of unique identifiers for
\&                   the desired sequence entries, according to genbank.pm
\&                   this function accepts gi, accession number
\&                   and sequence name
\&  Note    : Since in GenBank.pm, this function accepts a gi, an accession number
\&            or a sequence name, SeqHound also satisfies these inputs.
\&            If the input uid is a number, it is treated as a gi, if the uid is a
\&            string, it is treated as an accession number first. If the search still
\&            fails, it is treated as a sequence name.
\&            Since SeqHound stores biological data from different source sequence
\&            databases like: GenBank, GenPept, SwissProt, EMBL, RefSeq,
\&            you can pass ids from the above databases to this function. 
\&            The Bio::Seq object returned by this function is identical to the
\&            Bio::Seq generated by the GenBank.pm and GenPept.pm.
\&            The Bio::Seq object returned by this function sometimes has minor
\&            difference in the SeqFeature from the Bio::Seq object generated 
\&            in RefSeq.pm. 
\&            The Bio::Seq objects created from this function will have the NCBI
\&            versions of the SwissProt and EMBL sequence data information.
.Ve
.Sh "get_Stream_by_acc"
.IX Subsection "get_Stream_by_acc"
.Vb 7
\&  Title   : get_Stream_by_acc
\&  Usage   : $seq = $db->get_Stream_by_acc(['M98777', 'M34830']);
\&  Function: Gets a series of Seq objects by accession numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of accession numbers for
\&                   the desired sequence entries
\&  Note    : For SeqHound, this just calls the same code for get_Stream_by_id()
.Ve
.Sh "get_Stream_by_gi"
.IX Subsection "get_Stream_by_gi"
.Vb 7
\&  Title   : get_Stream_by_gi
\&  Usage   : $seq = $db->get_Seq_by_gi([161966, 255064]);
\&  Function: Gets a series of Seq objects by gi numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of gi numbers for
\&                   the desired sequence entries
\&  Note    : For SeqHound, this just calls the same code for get_Stream_by_id()
.Ve
.Sh "get_request"
.IX Subsection "get_request"
.Vb 10
\& Title   : get_request
\& Usage   : my $lcontent = $self->get_request;
\& Function: get the output from SeqHound API http call
\& Returns : the result of the remote call from SeqHound
\& Args    : %qualifiers = a hash of qualifiers 
\&           (SeqHound function name, id, query etc)
\& Example : $lcontent = $self->get_request(-funcname=>'SeqHoundGetGenBankff',
\&                                        -query=>'gi',
\&                                        -uid=>555);
\& Note    : this function overrides the implementation in Bio::DB::WebDBSeqI.
.Ve
.Sh "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 19
\& Title   : postprocess_data
\& Usage   : $self->postprocess_data (-funcname => $funcname,
\&                                    -lcontent => $lcontent,
\&                                    -outtype  => $outtype);
\& Function: process return String from http seqrem call 
\&           output type can be a string or a Bio::SeqIO object.
\& Returns : void
\& Args    : $funcname is the API function name of SeqHound 
\&           $lcontent is a string output from SeqHound server http call
\&           $outtype is a string or a Bio::SeqIO object 
\& Example : $seqio = $self->postprocess_data ( -lcontent => $lcontent,
\&                                        -funcname => 'SeqHoundGetGenBankffList',
\&                                        -outtype => 'Bio::SeqIO');
\&           or
\&           $gi = $self->postprocess_data( -lcontent => $lcontent,
\&                                        -funcname => 'SeqHoundFindAcc',
\&                                        -outtype => 'string');
\& Note    : this method overrides the method works for genbank/genpept,
\&           this is for SeqHound
.Ve
.Sh "_get_gi_from_name"
.IX Subsection "_get_gi_from_name"
.Vb 6
\& Title   : _get_gi_from_name
\& Usage   : $self->_get_gi_from_name('J05128');
\& Function: get the gene identifier from a sequence name
\&           in SeqHound database
\& Return  : gene identifier or undef
\& Args    : a string represented sequence name
.Ve
.Sh "_get_gi_from_acc"
.IX Subsection "_get_gi_from_acc"
.Vb 6
\& Title   : _get_gi_from_acc
\& Usage   : $self->_get_gi_from_acc('M34830')
\& Function: get the gene identifier from an accession number
\&          in SeqHound database
\& Return  : gene identifier or undef
\& Args    : a string represented accession number
.Ve
.Sh "_get_Seq_from_gbff"
.IX Subsection "_get_Seq_from_gbff"
.Vb 10
\& Title   : _get_Seq_from_gbff
\& Usage   : $self->_get_Seq_from_gbff($str)
\& Function: get the Bio::SeqIO stream object from gi or a list of gi
\&           in SeqHound database
\& Return  : Bio::SeqIO or undef
\& Args    : a string represented gene identifier or
\&           a list of gene identifiers
\& Example : $seq = $self->_get_Seq_from_gbff(141740);
\&           or
\&           $seq = $self->_get_Seq_from_gbff([141740, 255064, 45185482]);
.Ve
.Sh "_init_SeqHound"
.IX Subsection "_init_SeqHound"
.Vb 5
\& Title   : _init_SeqHound
\& Usage   : $self->_init_SeqHound();
\& Function: call SeqHoundInit at blueprint server 
\& Return  : $result (TRUE or FALSE)
\& Args    :
.Ve
.Sh "_MaxSizeArray"
.IX Subsection "_MaxSizeArray"
.Vb 5
\& Title   : _MaxSizeArray
\& Usage   : $self->_MaxSizeArray(\e@arr)
\& Function: get an array with the limit size
\& Return  : an array with the limit size
\& Args    : a reference to an array
.Ve
