.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Variation::IO 3"
.TH Bio::Variation::IO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Variation::IO \- Handler for sequence variation IO Formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Variation::IO;
.Ve
.PP
.Vb 4
\&    $in  = Bio::Variation::IO->new(-file => "inputfilename" , 
\&                                   -format => 'flat');
\&    $out = Bio::Variation::IO->new(-file => ">outputfilename" ,
\&                                   -format => 'xml');
.Ve
.PP
.Vb 3
\&    while ( my $seq = $in->next() ) {
\&           $out->write($seq);
\&    }
.Ve
.PP
.Vb 1
\&  # or
.Ve
.PP
.Vb 1
\&    use Bio::Variation::IO;
.Ve
.PP
.Vb 3
\&    #input file format can be read from the file extension (dat|xml)
\&    $in  = Bio::Variation::IO->newFh(-file => "inputfilename");
\&    $out = Bio::Variation::IO->newFh(-format => 'xml');
.Ve
.PP
.Vb 2
\&    # World's shortest flat<->xml format converter:
\&    print $out $_ while <$in>;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Variation::IO is a handler module for the formats in the 
Variation \s-1IO\s0 set (eg, Bio::Variation::IO::flat). It is the officially 
sanctioned way of getting at the format objects, which most people 
should use.
.PP
The structure, conventions and most of the code is inherited from
Bio::SeqIO module. The main difference is that instead of using
methods next_seq and write_seq, you drop '_seq' from the method names.
.PP
The idea is that you request a stream object for a particular format.
All the stream objects have a notion of an internal file that is read
from or written to. A particular SeqIO object instance is configured
for either input or output. A specific example of a stream object is
the Bio::Variation::IO::flat object.
.PP
Each stream object has functions
.PP
.Vb 1
\&   $stream->next();
.Ve
.PP
and
.PP
.Vb 1
\&   $stream->write($seqDiff);
.Ve
.PP
also
.PP
.Vb 1
\&   $stream->type() # returns 'INPUT' or 'OUTPUT'
.Ve
.PP
As an added bonus, you can recover a filehandle that is tied to the
SeqIO object, allowing you to use the standard <> and print 
operations to read and write sequence objects:
.PP
.Vb 1
\&    use Bio::Variation::IO;
.Ve
.PP
.Vb 2
\&    $stream = Bio::Variation::IO->newFh(-format => 'flat'); 
\&    # read from standard input
.Ve
.PP
.Vb 3
\&    while ( $seq = <$stream> ) {
\&           # do something with $seq
\&    }
.Ve
.PP
and
.PP
.Vb 1
\&    print $stream $seq; # when stream is in output mode
.Ve
.PP
This makes the simplest ever reformatter
.PP
.Vb 1
\&    #!/usr/local/bin/perl
.Ve
.PP
.Vb 2
\&    $format1 = shift;
\&    $format2 = shift;
.Ve
.PP
.Vb 1
\&    use Bio::Variation::IO;
.Ve
.PP
.Vb 2
\&    $in  = Bio::Variation::IO->newFh(-format => $format1 );
\&    $out = Bio::Variation::IO->newFh(-format => $format2 );
.Ve
.PP
.Vb 1
\&    print $out $_ while <$in>;
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "Bio::Variation::IO\->\fInew()\fP"
.IX Subsection "Bio::Variation::IO->new()"
.Vb 3
\&   $seqIO = Bio::Variation::IO->new(-file => 'filename',   -format=>$format);
\&   $seqIO = Bio::Variation::IO->new(-fh   => \e*FILEHANDLE, -format=>$format);
\&   $seqIO = Bio::Variation::IO->new(-format => $format);
.Ve
.PP
The \fInew()\fR class method constructs a new Bio::Variation::IO object.  The
returned object can be used to retrieve or print BioSeq objects. \fInew()\fR
accepts the following parameters:
.IP "\-file" 4
.IX Item "-file"
A file path to be opened for reading or writing.  The usual Perl
conventions apply:
.Sp
.Vb 6
\&   'file'       # open file for reading
\&   '>file'      # open file for writing
\&   '>>file'     # open file for appending
\&   '+<file'     # open file read/write
\&   'command |'  # open a pipe from the command
\&   '| command'  # open a pipe to the command
.Ve
.IP "\-fh" 4
.IX Item "-fh"
You may provide \fInew()\fR with a previously-opened filehandle.  For
example, to read from \s-1STDIN:\s0
.Sp
.Vb 1
\&   $seqIO = Bio::Variation::IO->new(-fh => \e*STDIN);
.Ve
.Sp
Note that you must pass filehandles as references to globs.
.Sp
If neither a filehandle nor a filename is specified, then the module
will read from the \f(CW@ARGV\fR array or \s-1STDIN\s0, using the familiar <>
semantics.
.IP "\-format" 4
.IX Item "-format"
Specify the format of the file.  Supported formats include:
.Sp
.Vb 2
\&   flat        pseudo EMBL format
\&   xml         seqvar xml format
.Ve
.Sp
If no format is specified and a filename is given, then the module
will attempt to deduce it from the filename.  If this is unsuccessful,
Fasta format is assumed.
.Sp
The format name is case insensitive.  '\s-1FLAT\s0', 'Flat' and 'flat' are
all supported.
.Sh "Bio::Variation::IO\->\fInewFh()\fP"
.IX Subsection "Bio::Variation::IO->newFh()"
.Vb 3
\&   $fh = Bio::Variation::IO->newFh(-fh   => \e*FILEHANDLE, -format=>$format);
\&   $fh = Bio::Variation::IO->newFh(-format => $format);
\&   # etc.
.Ve
.PP
.Vb 3
\&   #e.g.
\&   $out = Bio::Variation::IO->newFh( '-FORMAT' => 'flat');
\&   print $out $seqDiff;
.Ve
.PP
This constructor behaves like \fInew()\fR, but returns a tied filehandle
rather than a Bio::Variation::IO object.  You can read sequences from this
object using the familiar <> operator, and write to it using \fIprint()\fR.
The usual array and \f(CW$_\fR semantics work.  For example, you can read all
sequence objects into an array like this:
.PP
.Vb 1
\&  @mutations = <$fh>;
.Ve
.PP
Other operations, such as \fIread()\fR, \fIsysread()\fR, \fIwrite()\fR, \fIclose()\fR, and \fIprintf()\fR 
are not supported.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
See below for more detailed summaries.  The main methods are:
.ie n .Sh "$sequence = $seqIO\fP\->\fInext()"
.el .Sh "$sequence = \f(CW$seqIO\fP\->\fInext()\fP"
.IX Subsection "$sequence = $seqIO->next()"
Fetch the next sequence from the stream.
.Sh "$seqIO\->write($sequence [,$another_sequence,...])"
.IX Subsection "$seqIO->write($sequence [,$another_sequence,...])"
Write the specified sequence(s) to the stream.
.Sh "\s-1\fITIEHANDLE\s0()\fP, \s-1\fIREADLINE\s0()\fP, \s-1\fIPRINT\s0()\fP"
.IX Subsection "TIEHANDLE(), READLINE(), PRINT()"
These provide the tie interface.  See perltie for more details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $stream = Bio::Variation::IO->new(-file => $filename, -format => 'Format')
\& Function: Returns a new seqstream
\& Returns : A Bio::Variation::IO::Handler initialised with the appropriate format
\& Args    : -file => $filename
\&           -format => format
\&           -fh => filehandle to attach to
.Ve
.Sh "next"
.IX Subsection "next"
.Vb 5
\& Title   : next
\& Usage   : $seqDiff = $stream->next
\& Function: reads the next $seqDiff object from the stream
\& Returns : a Bio::Variation::SeqDiff object
\& Args    :
.Ve
.Sh "write"
.IX Subsection "write"
.Vb 5
\& Title   : write
\& Usage   : $stream->write($seq)
\& Function: writes the $seq object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Variation::SeqDiff object
.Ve
.Sh "_guess_format"
.IX Subsection "_guess_format"
.Vb 6
\& Title   : _guess_format
\& Usage   : $obj->_guess_format($filename)
\& Function:
\& Example :
\& Returns : guessed format of filename (lower case)
\& Args    :
.Ve
