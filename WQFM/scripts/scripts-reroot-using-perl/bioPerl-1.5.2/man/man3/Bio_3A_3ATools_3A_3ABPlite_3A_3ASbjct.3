.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::BPlite::Sbjct 3"
.TH Bio::Tools::BPlite::Sbjct 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::BPlite::Sbjct \- A Blast Subject (database search Hit)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  use Bio::Tools::BPlite;
\&  my $report = new Bio::Tools::BPlite(-fh=>\e*STDIN);
\&  while(my $sbjct = $report->nextSbjct) {
\&      $sbjct->name;    # access to the hit name
\&      "$sbjct";        # overloaded to return name
\&      $sbjct->nextHSP; # gets the next HSP from the sbjct
\&      while (my $hsp = $sbjct->nextHSP) {
\&         # canonical form is again a while loop
\&      }
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See Bio::Tools::BPlite for a more detailed information about the
BPlite \s-1BLAST\s0 parsing objects.
.PP
The original BPlite.pm module has been written by Ian Korf!
See http://sapiens.wustl.edu/~ikorf
.PP
The Sbjct object encapsulates a Hit in a Blast database
search.  The Subjects are the \*(L"Hits\*(R" for a particular query.  A
Subject may be made up of multiple High Scoring Pairs (\s-1HSP\s0) which are
accessed through the nextHSP method.
.PP
If you are searching for the P\-value or percent identity that is
specific to each \s-1HSP\s0 and you will need to use the nextHSP method to
get access to that data.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Peter Schattner"
.IX Header "AUTHOR - Peter Schattner"
Email: schattner@alum.mit.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "name"
.IX Subsection "name"
.Vb 6
\& Title    : name
\& Usage    : $name = $obj->name();
\& Function : returns the name of the Sbjct 
\& Example  : 
\& Returns  : name of the Sbjct 
\& Args     :
.Ve
.Sh "report_type"
.IX Subsection "report_type"
.Vb 10
\& Title    : report_type
\& Usage    : $type = $sbjct->report_type()
\& Function : Returns the type of report from which this hit was obtained.
\&            This usually pertains only to BLAST and friends reports, for which
\&            the report type denotes what type of sequence was aligned against
\&            what (BLASTN: dna-dna, BLASTP prt-prt, BLASTX translated dna-prt, 
\&            TBLASTN prt-translated dna, TBLASTX translated dna-translated dna).
\& Example  : 
\& Returns  : A string (BLASTN, BLASTP, BLASTX, TBLASTN, TBLASTX, UNKNOWN)
\& Args     : a string on set (you should know what you are doing)
.Ve
.Sh "nextFeaturePair"
.IX Subsection "nextFeaturePair"
.Vb 6
\& Title    : nextFeaturePair
\& Usage    : $name = $obj->nextFeaturePair();
\& Function : same as the nextHSP function 
\& Example  : 
\& Returns  : next FeaturePair 
\& Args     :
.Ve
.Sh "nextHSP"
.IX Subsection "nextHSP"
.Vb 6
\& Title    : nextHSP
\& Usage    : $hsp = $obj->nextHSP();
\& Function : returns the next available High Scoring Pair
\& Example  : 
\& Returns  : Bio::Tools::HSP  or null if finished
\& Args     :
.Ve
.Sh "_readline"
.IX Subsection "_readline"
.Vb 3
\& Title   : _readline
\& Usage   : $obj->_readline
\& Function: Reads a line of input.
.Ve
.PP
.Vb 2
\&           Note that this method implicitely uses the value of $/ that is
\&           in effect when called.
.Ve
.PP
.Vb 5
\&           Note also that the current implementation does not handle pushed
\&           back input correctly unless the pushed back input ends with the
\&           value of $/.
\& Example :
\& Returns :
.Ve
.Sh "_pushback"
.IX Subsection "_pushback"
.Vb 6
\& Title   : _pushback
\& Usage   : $obj->_pushback($newvalue)
\& Function: puts a line previously read with _readline back into a buffer
\& Example :
\& Returns :
\& Args    : newvalue
.Ve
