.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Root::HTTPget 3"
.TH Bio::Root::HTTPget 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Root::HTTPget \- module for fallback HTTP get operations when 
LWP:: is unavailable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Bio::Root::HTTPget;
\& my $web = new Bio::Root::HTTPget;
.Ve
.PP
.Vb 2
\& my $response = $web->get('http://localhost');
\& $response    = $web->get('http://localhost/images');
.Ve
.PP
.Vb 2
\& $response    = eval { $web->get('http://fred:secret@localhost/ladies_only/')
\&                     } or warn $@;
.Ve
.PP
.Vb 2
\& $response    = eval { $web->get('http://jeff:secret@localhost/ladies_only/')
\&                     } or warn $@;
.Ve
.PP
.Vb 3
\& $response    = $web->get('http://localhost/images/navauthors.gif');
\& $response    = $web->get(-url=>'http://www.google.com',
\&                                    -proxy=>'http://www.modperl.com');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is basically an last-chance module for doing network \s-1HTTP\s0 get
requests in situations where more advanced external \s-1CPAN\s0 modules such
as \s-1LWP::\s0 are not installed.
.PP
The particular reason this module was developed was so that the Open
Bio Database Access code can fallback to fetching the default registry
files from http://open\-bio.org/registry/ without having to depend on
external dependencies like Bundle::LWP for network \s-1HTTP\s0 access.
.PP
The core of this module was written by Lincoln Stein. It can handle proxies
and HTTP-based proxy authentication.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.PP
.Vb 1
\& =head2 Reporting Bugs
.Ve
.PP
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
.Vb 1
\& Cared for by Chris Dagdigian <dag@sonsorol.org>
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "get"
.IX Subsection "get"
.Vb 9
\& Title   : get
\& Usage   : my $resp = get(-url => $url);
\& Function: 
\& Returns : string
\& Args    : -url     => URL to HTTPGet
\&           -proxy   => proxy to use
\&           -user    => username for proxy or authentication
\&           -pass    => password for proxy or authentication
\&           -timeout => timeout
.Ve
.Sh "getFH"
.IX Subsection "getFH"
.Vb 6
\& Title   : getFH
\& Usage   : 
\& Function:
\& Example :
\& Returns : string
\& Args    :
.Ve
.Sh "_http_parse_url"
.IX Subsection "_http_parse_url"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "_http_connect"
.IX Subsection "_http_connect"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "_encode_base64"
.IX Subsection "_encode_base64"
.Vb 6
\& Title   :
\& Usage   : 
\& Function:
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "proxy"
.IX Subsection "proxy"
.Vb 10
\& Title   : proxy
\& Usage   : $httpproxy = $db->proxy('http')  or 
\&           $db->proxy(['http','ftp'], 'http://myproxy' )
\& Function: Get/Set a proxy for use of proxy. Defaults to environment variable
\&           http_proxy if present.
\& Returns : a string indicating the proxy
\& Args    : $protocol : an array ref of the protocol(s) to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.Sh "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass 
\& Args    : Array or user/pass
.Ve
