.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Matrix::PSM::IO::meme 3"
.TH Bio::Matrix::PSM::IO::meme 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Matrix::PSM::IO::meme \- PSM meme parser implementation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See Bio::Matrix::PSM::IO for detailed documentation on how to use \s-1PSM\s0 parsers
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Parser for meme.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Stefan Kirov"
.IX Header "AUTHOR - Stefan Kirov"
Email skirov@utk.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
.Sh "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $psmIO =  new Bio::Matrix::PSM::IO(-format=>'meme', 
\&                                                 -file=>$file);
\& Function: Associates a file with the appropriate parser
\& Throws  : Throws if the file passed is in HTML format or 
\&           if the MEME header cannot be found.
\& Example :
\& Args    : hash
\& Returns : "Bio::Matrix::PSM::$format"->new(@args);
.Ve
.Sh "_parse_coordinates"
.IX Subsection "_parse_coordinates"
.Vb 7
\& Title   : _parse_coordinates
\& Usage   :
\& Function:
\& Throws  :
\& Example : Internal stuff
\& Returns :
\& Args    :
.Ve
.Sh "header"
.IX Subsection "header"
.Vb 20
\& Title   : header
\& Usage   :  my %header=$psmIO->header;
\& Function:  Returns the header for the MEME file
\& Throws  :
\& Example : Fetching all the sequences included in the MEME analysis, 
\&           being parsed
\&           my %header=$psmIO->header;
\&            foreach my $seqid (@{$header{instances}}) {
\&               my $seq=$db->get_Seq_by_acc($id);
\&               #Do something with the sequence
\&            }
\&            where $db might be Bio::DB:GenBank object, see
\& Returns : Hash with three keys: instances, weights and lengths, which
\&           should be self-explenatory. Each value is an array
\&           reference. Each array element corresponds to the same
\&           element in the other two arrays. So $header{instances}->[$i]
\&           will refer to the same sequence in the motif file as
\&           $header{weights}->[$i] and $header{lengths}->[$i]
\& Args    :  none
\& Notes   :  OBSOLETE!
.Ve
.Sh "next_psm"
.IX Subsection "next_psm"
.Vb 8
\& Title   : next_psm
\& Usage   : my $psm=$psmIO->next_psm();
\& Function: Reads the next PSM from the input file, associated with this object
\& Throws  : Throws if the format is inconsistent with the rules for MEME 3.0.4:
\&            no SUMMARY Section present or some keywords are missing/altered.
\& Example :
\& Returns : Bio::Matrix::PSM::Psm object
\& Args    : none
.Ve
.Sh "_parseMatrix"
.IX Subsection "_parseMatrix"
.Vb 7
\& Title   : _parseMatrix
\& Usage   :
\& Function: Parses the next site matrix information in the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  hash as for constructing a SiteMatrix object (see SiteMatrixI)
\& Args    :  string
.Ve
.Sh "_parse_logs"
.IX Subsection "_parse_logs"
.Vb 7
\& Title   : _parse_logs
\& Usage   :
\& Function: Parses the next site matrix log values in the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  array of array refs
\& Args    :  string
.Ve
.Sh "_parseInstance"
.IX Subsection "_parseInstance"
.Vb 7
\& Title   : _parseInstance
\& Usage   :
\& Function:  Parses the next sites instances from the meme file
\& Throws  :
\& Example :  Internal stuff
\& Returns :  Bio::Matrix::PSM::InstanceSite object
\& Args    :  none
.Ve
