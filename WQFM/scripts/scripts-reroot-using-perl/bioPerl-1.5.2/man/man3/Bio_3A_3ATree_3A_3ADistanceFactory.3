.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::DistanceFactory 3"
.TH Bio::Tree::DistanceFactory 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::DistanceFactory \- Construct a tree using distance based methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Bio::Tree::DistanceFactory;
\&  use Bio::AlignIO;
\&  use Bio::Align::DNAStatistics;
\&  my $tfactory = Bio::Tree::DistanceFactory->new(-method => "NJ");
\&  my $stats    = Bio::Align::DNAStatistics->new();
.Ve
.PP
.Vb 9
\&  my $alnin    = Bio::AlignIO->new(-format => 'clustalw',
\&                                   -file   => 'file.aln');
\&  my $aln = $alnin->next_aln;
\&  # Of course matrix can come from a different place
\&  # like PHYLIP if you prefer, Bio::Matrix::IO should be able
\&  # to parse many things
\&  my $jcmatrix = $stats->distance(-align => $aln, 
\&                                  -method => 'Jukes-Cantor');
\&  my $tree = $tfactory->make_tree($jcmatrix);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a factory which will construct a phylogenetic tree based on
the pairwise sequence distances for a set of sequences.  Currently
\&\s-1UPGMA\s0 (Sokal and Michener 1958) and \s-1NJ\s0 (Saitou and Nei 1987) tree
construction methods are implemented.
.SH "REFERENCES"
.IX Header "REFERENCES"
Eddy \s-1SR\s0, Durbin R, Krogh A, Mitchison G, (1998) \*(L"Biological Sequence Analysis\*(R",
Cambridge Univ Press, Cambridge, \s-1UK\s0.
.PP
Howe K, Bateman A, Durbin R, (2002) \*(L"QuickTree: building huge
Neighbour-Joining trees of protein sequences.\*(R" Bioinformatics
18(11):1546\-1547.
.PP
Saitou N and Nei M, (1987) \*(L"The neighbor-joining method: a new method
for reconstructing phylogenetic trees.\*(R" Mol Biol Evol 4(4):406\-25.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tree::DistanceFactory();
\& Function: Builds a new Bio::Tree::DistanceFactory object 
\& Returns : an instance of Bio::Tree::DistanceFactory
\& Args    : -method => 'NJ' or 'UPGMA'
.Ve
.Sh "make_tree"
.IX Subsection "make_tree"
.Vb 5
\& Title   : make_tree
\& Usage   : my $tree = $disttreefact->make_tree($matrix);
\& Function: Build a Tree based on a distance matrix
\& Returns : L<Bio::Tree::TreeI>
\& Args    : L<Bio::Matrix::MatrixI> object
.Ve
.Sh "_nj"
.IX Subsection "_nj"
.Vb 9
\& Title   : _nj
\& Usage   : my $tree = $disttreefact->_nj($matrix);
\& Function: Construct a tree based on distance matrix using the 
\&           Neighbor Joining algorithm (Saitou and Nei, 1987)
\&           Implementation based on Kevin Howe's Quicktree implementation
\&           and uses his tricks (some based on Bill Bruno's work) to eliminate
\&           negative branch lengths
\& Returns : L<Bio::Tree::TreeI>
\& Args    : L<Bio::Matrix::MatrixI> object
.Ve
.Sh "_upgma"
.IX Subsection "_upgma"
.Vb 5
\& Title   : _upgma
\& Usage   : my $tree = $disttreefact->_upgma($matrix);
\& Function: Construct a tree based on alignment using UPGMA
\& Returns : L<Bio::Tree::TreeI>
\& Args    : L<Bio::Matrix::MatrixI> object
.Ve
.Sh "method"
.IX Subsection "method"
.Vb 6
\& Title   : method
\& Usage   : $obj->method($newval)
\& Function: 
\& Example : 
\& Returns : value of method (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "check_additivity"
.IX Subsection "check_additivity"
.Vb 12
\& Title     : check_additivity
\& Usage     : if( $distance->check_additivity($matrix) ) {
\&             }
\& Function  : See if matrix obeys additivity principal
\& Returns   : boolean
\& Args      : Bio::Matrix::MatrixI 
\& References: Based on a Java implementation by
\&             Peter Sestoft, sestoft@dina.kvl.dk 1999-12-07 version 0.3
\&             http://www.dina.kvl.dk/~sestoft/bsa.html
\&             which in turn is based on algorithms described in 
\&             R. Durbin, S. Eddy, A. Krogh, G. Mitchison. 
\&             Biological Sequence Analysis CUP 1998, Chapter 7.
.Ve
