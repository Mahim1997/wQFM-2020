.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Variation::RNAChange 3"
.TH Bio::Variation::RNAChange 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Variation::RNAChange \- Sequence change class for RNA level
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 18
\&   $rnachange = Bio::Variation::RNAChange->new
\&       ('-start'         => $start,
\&        '-end'           => $end,
\&        '-length'        => $len,
\&        '-codon_pos'     => $cp,
\&        '-upStreamSeq'   => $upflank,
\&        '-dnStreamSeq'   => $dnflank,
\&        '-proof'         => $proof,
\&        '-isMutation'    => 1,
\&        '-mut_number'    => $mut_number
\&       );
\&   $a1 = Bio::Variation::Allele->new;
\&   $a1->seq('a');
\&   $rnachange->allele_ori($a1);
\&   my $a2 = Bio::Variation::Allele->new;
\&   $a2->seq('t');
\&   $rnachange->add_Allele($a2);
\&   $rnachange->allele_mut($a2);
.Ve
.PP
.Vb 2
\&   print "The codon change is ", $rnachange->codon_ori, 
\&       ">", $rnachange->codon_mut, "\en";
.Ve
.PP
.Vb 2
\&   # add it to a SeqDiff container object
\&   $seqdiff->add_Variant($rnachange);
.Ve
.PP
.Vb 3
\&   # and create links to and from DNA level mutation objects
\&   $rnachange->DNAMutation($dnamut);
\&   $dnamut->RNAChange($rnachange);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The instantiable class Bio::Variation::DNAMutation describes basic
sequence changes at \s-1RNA\s0 molecule level. It uses methods defined in
superclass Bio::Variation::VariantI. See Bio::Variation::VariantI
for details.
.PP
You are normally expected to create a corresponding
Bio::Variation::DNAMutation object even if mutation is defined at
\&\s-1RNA\s0 level. The numbering follows then cDNA numbering.  Link the
DNAMutation object to the RNAChange object using the method
\&\fIDNAMutation()\fR. If the variation described by a RNAChange object is
translated, link the corresponding Bio::Variation::AAChange object
to it using method \fIAAChange()\fR. See Bio::Variation::DNAMutation and
Bio::Variation::AAChange for more information.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "codon_ori"
.IX Subsection "codon_ori"
.Vb 3
\& Title   : codon_ori
\& Usage   : $obj->codon_ori();
\& Function:
.Ve
.PP
.Vb 4
\&            Sets and returns codon_ori triplet.  If value is not set,
\&            creates the codon triplet from the codon position and
\&            flanking sequences.  The string has to be three characters
\&            long. The character content is not checked.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "codon_mut"
.IX Subsection "codon_mut"
.Vb 3
\& Title   : codon_mut
\& Usage   : $obj->codon_mut();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns codon_mut triplet.  If value is not
\&            set, creates the codon triplet from the codon position and
\&            flanking sequences. Return undef for other than point mutations.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "codon_pos"
.IX Subsection "codon_pos"
.Vb 3
\& Title   : codon_pos
\& Usage   : $obj->codon_pos();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns the position of the mutation start in the
\&            codon. If value is not set, returns false.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 1,2,3
\& Args    : none if get, the new value if set
.Ve
.Sh "codon_table"
.IX Subsection "codon_table"
.Vb 3
\& Title   : codon_table
\& Usage   : $obj->codon_table();
\& Function:
.Ve
.PP
.Vb 2
\&            Sets and returns the codon table id of the RNA
\&            If value is not set, returns 1, 'universal' code, as the default.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : integer
\& Args    : none if get, the new value if set
.Ve
.Sh "DNAMutation"
.IX Subsection "DNAMutation"
.Vb 6
\& Title   : DNAMutation
\& Usage   : $mutobj = $obj->DNAMutation;
\&         : $mutobj = $obj->DNAMutation($objref);
\& Function: Returns or sets the link-reference to a mutation/change object.
\&           If there is no link, it will return undef
\& Returns : an obj_ref or undef
.Ve
.Sh "AAChange"
.IX Subsection "AAChange"
.Vb 6
\& Title   : AAChange
\& Usage   : $mutobj = $obj->AAChange;
\&         : $mutobj = $obj->AAChange($objref);
\& Function: Returns or sets the link-reference to a mutation/change object.
\&           If there is no link, it will return undef
\& Returns : an obj_ref or undef
.Ve
.Sh "exons_modified"
.IX Subsection "exons_modified"
.Vb 5
\& Title   : exons_modified
\& Usage   : $modified = $obj->exons_modified;
\&         : $modified = $obj->exons_modified(1);
\& Function: Returns or sets information (example: a simple boolean flag) about
\&           the modification of exons as a result of a mutation.
.Ve
.Sh "region"
.IX Subsection "region"
.Vb 3
\& Title   : region
\& Usage   : $obj->region();
\& Function:
.Ve
.PP
.Vb 3
\&            Sets and returns the name of the sequence region type or
\&            protein domain at this location.  If value is not set,
\&            returns false.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "cds_end"
.IX Subsection "cds_end"
.Vb 3
\& Title   : cds_end
\& Usage   : $cds_end = $obj->get_cds_end();
\& Function:
.Ve
.PP
.Vb 4
\&           Sets or returns the cds_end from the beginning of the DNA sequence
\&           to the coordinate start used to describe variants.
\&           Should be the location of the last nucleotide of the
\&           terminator codon of the gene.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : value of cds_end, a scalar
\& Args    :
.Ve
.Sh "label"
.IX Subsection "label"
.Vb 3
\& Title   : label
\& Usage   : $obj->label();
\& Function:
.Ve
.PP
.Vb 6
\&            Sets and returns mutation event label(s).  If value is not
\&            set, or no argument is given returns false.  Each
\&            instantiable subclass of L<Bio::Variation::VariantI> needs
\&            to implement this method. Valid values are listed in
\&            'Mutation event controlled vocabulary' in
\&            http://www.ebi.ac.uk/mutations/recommendations/mutevent.html.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : string
\& Args    : string
.Ve
.Sh "_change_codon_pos"
.IX Subsection "_change_codon_pos"
.Vb 3
\& Title   : _change_codon_pos
\& Usage   : $newCodonPos = _change_codon_pos($myCodonPos, 5)
\& Function:
.Ve
.PP
.Vb 1
\&           Keeps track of the codon position in a changeing sequence
.Ve
.PP
.Vb 3
\& Returns : codon_pos = integer 1, 2 or 3
\& Args    : valid codon position 
\&           signed integer offset to a new location in sequence
.Ve
