.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Biblio::eutils 3"
.TH Bio::DB::Biblio::eutils 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Biblio::eutils \- Access to PubMed's bibliographic query service
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this object directly, it is recommended to access it and use
it through the \fIBio::Biblio\fR module:
.PP
.Vb 3
\&  use Bio::Biblio;
\&  my $biblio = new Bio::Biblio (-access => 'eutils');
\&  $biblio->db('PMC'); #optional, default is PubMed.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object contains the real implementation of a Bibliographic Query
Service as defined in Bio::DB::BiblioI.
.PP
Bio::DB::BiblioI is not implemented as documented in the interface,
particularly the \fIfind()\fR method, which is not compatible with PubMed's
query language.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Allen Day <allenday@ucla.edu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Allen Day, University of California, Los Angeles.
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.IP "\(bu" 4
More testing and debugging needed to ensure that returned citations
are properly transferred even if they contain foreign characters.
.IP "\(bu" 4
Maximum record count (\s-1MAX_RECORDS\s0) returned currently hard coded to
100K.
.IP "\(bu" 4
Biblio retrieval methods should be more tightly integrated with
Bio::Biblio::Ref and Bio::DB::MeSH.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\& Pub Med Help:
\& http://eutils.ncbi.nlm.nih.gov/entrez/query/static/help/pmhelp.html
.Ve
.PP
.Vb 2
\& Entrez Utilities:
\& http://eutils.ncbi.nlm.nih.gov/entrez/query/static/eutils_help.html
.Ve
.PP
.Vb 2
\& Example code:
\& examples/biblio/biblio-eutils-example.pl
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The main documentation details are to be found in
Bio::DB::BiblioI.
.PP
Here is the rest of the object methods.  Interface methods first,
followed by internal methods.
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 4
\& Usage   : my $obj = new Bio::Biblio (-access => 'eutils' ...);
\&           (_initialize is internally called from this constructor)
\& Returns : 1 on success
\& Args    : none
.Ve
.PP
This is an actual \fInew()\fR method (except for the real object creation
and its blessing which is done in the parent class Bio::Root::Root in
method _create_object).
.PP
Note that this method is called always as an \fIobject\fR method (never as
a \fIclass\fR method) \- and that the object who calls this method may
already be partly initiated (from Bio::Biblio::new method); so if you
need to do some tricks with the 'class invocation' you need to change
Bio::Biblio::new method, not this one.
.Sh "db"
.IX Subsection "db"
.Vb 3
\& Title   : db
\& Usage   : $obj->db($newval)
\& Function: specifies the database to search.  valid values are:
.Ve
.PP
.Vb 1
\&           pubmed, pmc, journals
.Ve
.PP
.Vb 2
\&           it is also possible to add the following, and i will do
\&           so on request:
.Ve
.PP
.Vb 1
\&           genome, nucleotide, protein, popset, snp, sequence, taxonomy
.Ve
.PP
.Vb 1
\&           pubmed is default.
.Ve
.PP
.Vb 2
\& Returns : value of db (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "Methods implementing Bio::DB::BiblioI interface"
.IX Header "Methods implementing Bio::DB::BiblioI interface"
.Sh "get_collection_id"
.IX Subsection "get_collection_id"
.Vb 5
\&  Title   : get_collection_id
\&  Usage   : $id = $biblio->get_collection_id();
\&  Function: returns WebEnv value from ESearch
\&  Returns : ESearch WebEnv value as a string
\&  Args    : none
.Ve
.Sh "reset_retrieval"
.IX Subsection "reset_retrieval"
.Vb 5
\&  Title   : reset_retrieval
\&  Usage   : $biblio->reset_retrieval();
\&  Function: reset cursor in id list, see cursor()
\&  Returns : 1
\&  Args    : none
.Ve
.Sh "get_next"
.IX Subsection "get_next"
.Vb 5
\&  Title   : get_next
\&  Usage   : $xml = $biblio->get_next();
\&  Function: return next record as xml
\&  Returns : an xml string
\&  Args    : none
.Ve
.Sh "get_more"
.IX Subsection "get_more"
.Vb 5
\&  Title   : get_more
\&  Usage   : $xml = $biblio->get_more($more);
\&  Function: returns next $more records concatenated
\&  Returns : a string containing multiple xml documents
\&  Args    : an integer representing how many records to retrieve
.Ve
.Sh "has_next"
.IX Subsection "has_next"
.Vb 5
\&  Title   : has_next
\&  Usage   : $has_next = $biblio->has_next();
\&  Function: check to see if there are more items to be retrieved
\&  Returns : 1 on true, undef on false
\&  Args    : none
.Ve
.Sh "find"
.IX Subsection "find"
.Vb 7
\&  Title   : find
\&  Usage   : $biblio = $biblio->find($pubmed_query_phrase);
\&  Function: perform a PubMed query using Entrez ESearch
\&  Returns : a reference to the object on which the method was called
\&  Args    : a PubMed query phrase.  See
\&            http://eutils.ncbi.nlm.nih.gov/entrez/query/static/help/pmhelp.html
\&            for help on how to construct a query.
.Ve
.Sh "get_all_ids"
.IX Subsection "get_all_ids"
.Vb 5
\&  Title   : get_all_ids
\&  Usage   : @ids = $biblio->get_all_ids();
\&  Function: return a list of PubMed ids resulting from call to find()
\&  Returns : a list of PubMed ids, or an empty list
\&  Args    : none
.Ve
.Sh "get_all"
.IX Subsection "get_all"
.Vb 5
\&  Title   : get_all
\&  Usage   : $xml = $biblio->get_all();
\&  Function: retrieve all records from query
\&  Returns : return a large concatenated string of PubMed xml documents
\&  Args    : none
.Ve
.Sh "exists"
.IX Subsection "exists"
.Vb 5
\&  Title   : exists
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.Sh "destroy"
.IX Subsection "destroy"
.Vb 5
\&  Title   : destroy
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.Sh "get_vocabulary_names"
.IX Subsection "get_vocabulary_names"
.Vb 5
\&  Title   : get_vocabulary_names
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : empty arrayref
\&  Args    : none
.Ve
.Sh "contains"
.IX Subsection "contains"
.Vb 5
\&  Title   : contains
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.Sh "get_entry_description"
.IX Subsection "get_entry_description"
.Vb 5
\&  Title   : get_entry_description
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.Sh "get_all_values"
.IX Subsection "get_all_values"
.Vb 5
\&  Title   : get_all_values
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.Sh "get_all_entries"
.IX Subsection "get_all_entries"
.Vb 5
\&  Title   : get_all_entries
\&  Usage   : do not use
\&  Function: no-op.  this is here only for interface compatibility
\&  Returns : undef
\&  Args    : none
.Ve
.SH "Internal methods unrelated to Bio::DB::BiblioI"
.IX Header "Internal methods unrelated to Bio::DB::BiblioI"
.Sh "cursor"
.IX Subsection "cursor"
.Vb 5
\&  Title   : cursor
\&  Usage   : $obj->cursor($newval)
\&  Function: holds position in reference collection
\&  Returns : value of cursor (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "twig"
.IX Subsection "twig"
.Vb 5
\&  Title   : twig
\&  Usage   : $obj->twig($newval)
\&  Function: holds an XML::Twig instance.
\&  Returns : value of twig (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "ids"
.IX Subsection "ids"
.Vb 5
\&  Title   : ids
\&  Usage   : $obj->ids($newval)
\&  Function: store pubmed ids resulting from find() query
\&  Returns : value of ids (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "collection_id"
.IX Subsection "collection_id"
.Vb 5
\&  Title   : collection_id
\&  Usage   : $obj->collection_id($newval)
\&  Function:
\&  Returns : value of collection_id (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "count"
.IX Subsection "count"
.Vb 5
\&  Title   : count
\&  Usage   : $obj->count($newval)
\&  Function:
\&  Returns : value of count (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "query_key"
.IX Subsection "query_key"
.Vb 5
\&  Title   : query_key
\&  Usage   : $obj->query_key($newval)
\&  Function: holds query_key from ESearch document
\&  Returns : value of query_key (a scalar)
\&  Args    : on set, new value (a scalar or undef, optional)
.Ve
