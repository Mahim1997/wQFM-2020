.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::chaos 3"
.TH Bio::SeqIO::chaos 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::chaos \- chaos sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #In general you will not want to use this module directly;
\&    #use the chaosxml format via SeqIO
.Ve
.PP
.Vb 2
\&    $outstream = Bio::SeqIO->new(-file => $filename,
\&                                 -format => 'chaosxml');
.Ve
.PP
.Vb 3
\&    while ( my $seq = $instream->next_seq() ) {
\&       $outstream->write_seq($seq);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the guts of Bio::SeqIO::chaosxml \- please refer to the
documentation for this module
.PP
\&\fB\s-1CURRENTLY\s0 \s-1WRITE\s0 \s-1ONLY\s0\fR
.PP
ChaosXML is an \s-1XML\s0 mapping of the chado relational database; for more
information, see http://www.fruitfly.org/chaos\-xml
.PP
chaos can be represented in various syntaxes \- \s-1XML\s0, S\-Expressions or
indented text. You should see the relevant SeqIO file. You will
probably want to use Bio::SeqIO::chaosxml, which is a wrapper to
this module.
.Sh "\s-1USING\s0 \s-1STAG\s0 \s-1OBJECTS\s0"
.IX Subsection "USING STAG OBJECTS"
\&\fBnon-standard bioperl stuff you dont necessarily need to know follows\fR
.PP
This module (in write mode) is an \fBevent producer\fR \- it generates \s-1XML\s0
events via the Data::Stag module. If you only care about the final
end-product xml, use Bio::SeqIO::chaosxml
.PP
You can treat the resulting chaos-xml stream as stag \s-1XML\s0 objects;
.PP
.Vb 1
\&    $outstream = Bio::SeqIO->new(-file => $filename, -format => 'chaos');
.Ve
.PP
.Vb 26
\&    while ( my $seq = $instream->next_seq() ) {
\&       $outstream->write_seq($seq);
\&    }
\&    my $chaos = $outstream->handler->stag;
\&    # stag provides get/set methods for xml elements
\&    # (these are chaos objects, not bioperl objects)
\&    my @features = $chaos->get_feature;
\&    my @feature_relationships = $chaos->get_feature_relationships;
\&    # stag objects can be queried with functional-programming
\&    # style queries
\&    my @features_in_range =
\&      $chaos->where('feature',
\&                    sub {
\&                         my $featureloc = shift->get_featureloc;
\&                         $featureloc->strand == 1 &&
\&                         $featureloc->nbeg > 10000 &&
\&                         $featureloc->nend < 20000;
\&                    });
\&    foreach my $feature (@features_in_range) {
\&      my $featureloc = $feature->get_featureloc;
\&      printf "%s [%d->%d on %s]\en",
\&        $feature->sget_name,
\&        $featureloc->sget_nbeg,
\&        $featureloc->sget_end,
\&        $featureloc->sget_srcfeature_id;
\&    }
.Ve
.SH "MODULES REQUIRED"
.IX Header "MODULES REQUIRED"
Data::Stag
.PP
Downloadable from \s-1CPAN\s0; see also http://stag.sourceforge.net
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.
Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.bioperl.org
.Ve
.SH "AUTHOR \- Chris Mungall"
.IX Header "AUTHOR - Chris Mungall"
Email cjm@fruitfly.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "context_namespace"
.IX Subsection "context_namespace"
.Vb 6
\& Title   : context_namespace
\& Usage   : $obj->context_namespace($newval)
\& Function:
\& Example :
\& Returns : value of context_namespace (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.PP
IDs will be preceeded with the context namespace
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 5
\& Title   : next_seq
\& Usage   : $seq = $stream->next_seq()
\& Function: returns the next sequence in the stream
\& Returns : Bio::Seq object
\& Args    :
.Ve
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 5
\& Title   : write_seq
\& Usage   : $stream->write_seq($seq)
\& Function: writes the $seq object (must be seq) to the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Seq
.Ve
