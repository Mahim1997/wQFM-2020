.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Phylo::Molphy::Result 3"
.TH Bio::Tools::Phylo::Molphy::Result 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Phylo::Molphy::Result \- container for data parsed from a ProtML run
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # do not use this object directly, you will get it back as part of a 
\&  # Molphy parser
\&  use Bio::Tools::Phylo::Molphy;
\&  my $parser = new Bio::Tools::Phylo::Molphy(-file => 'output.protml');
\&  while( my $r = $parser->next_result ) {
\&    # r is a Bio::Tools::Phylo::Molphy::Result object
.Ve
.PP
.Vb 2
\&    # print the model name
\&    print $r->model, "\en";
.Ve
.PP
.Vb 6
\&    # get the substitution matrix
\&    # this is a hash of 3letter aa codes -> 3letter aa codes representing
\&    # substitution rate
\&    my $smat = $r->substitution_matrix;
\&    print "Arg -> Gln substitution rate is %d\en", 
\&          $smat->{'Arg'}->{'Gln'}, "\en";
.Ve
.PP
.Vb 6
\&    # get the transition probablity matrix
\&    # this is a hash of 3letter aa codes -> 3letter aa codes representing
\&    # transition probabilty
\&    my $tmat = $r->transition_probability_matrix;
\&    print "Arg -> Gln transition probablity is %.2f\en", 
\&          $tmat->{'Arg'}->{'Gln'}, "\en";
.Ve
.PP
.Vb 2
\&    # get the frequency for each of the residues
\&    my $rfreqs = $r->residue_frequencies;
.Ve
.PP
.Vb 4
\&    foreach my $residue ( keys %{$rfreqs} ) {
\&       printf "residue %s  expected freq: %.2f observed freq: %.2f\en",
\&              $residue,$rfreqs->{$residue}->[0], $rfreqs->{$residue}->[1];
\&    }
.Ve
.PP
.Vb 4
\&    my @trees;
\&    while( my $t = $r->next_tree ) {
\&        push @trees, $t;
\&    }
.Ve
.PP
.Vb 2
\&    print "search space is ", $r->search_space, "\en",
\&          "1st tree score is ", $trees[0]->score, "\en";
.Ve
.PP
.Vb 4
\&    # writing to STDOUT, use -file => '>filename' to specify a file
\&    my $out = new Bio::TreeIO(-format => "newick");
\&    $out->write_tree($trees[0]); # writing only the 1st tree
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A container for data parsed from a ProtML run.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Phylo::Molphy::Result();
\& Function: Builds a new Bio::Tools::Phylo::Molphy::Result object 
\& Returns : Bio::Tools::Phylo::Molphy::Result
\& Args    :
.Ve
.Sh "model"
.IX Subsection "model"
.Vb 5
\& Title   : model
\& Usage   : $obj->model($newval)
\& Function: 
\& Returns : value of model
\& Args    : newvalue (optional)
.Ve
.Sh "substitution_matrix"
.IX Subsection "substitution_matrix"
.Vb 7
\& Title   : substitution_matrix
\& Usage   : my $smat = $result->subsitution_matrix;
\& Function: Get the relative substitution matrix calculated in the ML procedure
\& Returns : reference to hash of hashes where key is the aa/nt name and value
\&           is another hash ref which contains keys for all the aa/nt 
\&           possibilities
\& Args    : none
.Ve
.Sh "transition_probability_matrix"
.IX Subsection "transition_probability_matrix"
.Vb 6
\& Title   : transition_probability_matrix
\& Usage   : my $matrixref = $molphy->transition_probablity_matrix();
\& Function: Gets the observed transition probability matrix
\& Returns : hash of hashes of aa/nt transition to each other aa/nt 
\& Args    : Transition matrix type, typically
\&           '1PAM-1.0e05' or '1PAM-1.0e07'
.Ve
.Sh "residue_frequencies"
.IX Subsection "residue_frequencies"
.Vb 10
\& Title   : residue_frequencies
\& Usage   : my %data = $molphy->residue_frequencies()
\& Function: Get the modeled and expected frequencies for
\&           each of the residues in the sequence
\& Returns : hash of either aa (protml) or nt (nucml) frequencies
\&           each key will point to an array reference where
\&           1st slot is model's expected frequency
\&           2nd slot is observed frequency in the data
\&           $hash{'A'}->[0] = 
\& Args    : none
.Ve
.Sh "next_tree"
.IX Subsection "next_tree"
.Vb 5
\& Title   : next_tree
\& Usage   : my $tree = $factory->next_tree;
\& Function: Get the next tree from the factory
\& Returns : L<Bio::Tree::TreeI>
\& Args    : none
.Ve
.Sh "rewind_tree"
.IX Subsection "rewind_tree"
.Vb 6
\& Title   : rewind_tree_iterator
\& Usage   : $result->rewind_tree()
\& Function: Rewinds the tree iterator so that next_tree can be 
\&           called again from the beginning
\& Returns : none
\& Args    : none
.Ve
.Sh "add_tree"
.IX Subsection "add_tree"
.Vb 5
\& Title   : add_tree
\& Usage   : $result->add_tree($tree);
\& Function: Adds a tree 
\& Returns : integer which is the number of trees stored
\& Args    : L<Bio::Tree::TreeI>
.Ve
.Sh "search_space"
.IX Subsection "search_space"
.Vb 5
\& Title   : search_space
\& Usage   : $obj->search_space($newval)
\& Function: 
\& Returns : value of search_space
\& Args    : newvalue (optional)
.Ve
