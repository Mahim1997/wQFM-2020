.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Assembly::ScaffoldI 3"
.TH Bio::Assembly::ScaffoldI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Assembly::ScaffoldI \- Abstract Inteface of Sequence Assemblies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # get a Bio::Assembly::ScaffoldI object somehow
.Ve
.PP
.Vb 3
\&    foreach my $contig ($assembly->all_contigs) {
\&       # do something (see Bio::Assembly::Contig)
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface defines the basic set of methods an object should have
to manipulate assembly data.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Robson Francisco de Souza"
.IX Header "AUTHOR - Robson Francisco de Souza"
Email: rfsouza@citri.iq.usp.br
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "Accessing general assembly data"
.IX Header "Accessing general assembly data"
.Sh "get_nof_contigs"
.IX Subsection "get_nof_contigs"
.Vb 5
\&        Title   : get_nof_contigs
\&        Usage   : $assembly->get_nof_contigs()
\&        Function: Get the number of contigs included in the assembly
\&        Returns : integer
\&        Args    : none
.Ve
.Sh "get_nof_singlets"
.IX Subsection "get_nof_singlets"
.Vb 5
\&        Title   : get_nof_singlets
\&        Usage   : $assembly->get_nof_singlets()
\&        Function: Get the number of singlets included in the assembly
\&        Returns : integer
\&        Args    : none
.Ve
.Sh "get_contig_ids"
.IX Subsection "get_contig_ids"
.Vb 6
\&        Title   : get_contig_ids
\&        Usage   : $assembly->get_contig_ids()
\&        Function: Access list of contig IDs from assembly
\&        Returns : an array if there are any contigs in the assembly.
\&                  undef otherwise
\&        Args    : an array of contig IDs
.Ve
.Sh "get_singlet_ids"
.IX Subsection "get_singlet_ids"
.Vb 6
\&        Title   : get_singlet_ids
\&        Usage   : $assembly->get_singlet_ids()
\&        Function: Access list of singlet IDs from assembly
\&        Returns : an array if there are any singlets in the assembly.
\&                  undef otherwise
\&        Args    : an array of singlet IDs
.Ve
.Sh "get_contig_by_id"
.IX Subsection "get_contig_by_id"
.Vb 5
\&    Title   : get_contig_by_id
\&    Usage   : $assembly->get_contig_by_id($id)
\&    Function: Get a reference for a contig from the assembly
\&    Returns : a Bio::Assembly::Contig object or undef
\&    Args    : [string] contig unique identifier (ID)
.Ve
.Sh "get_singlet_by_id"
.IX Subsection "get_singlet_by_id"
.Vb 5
\&    Title   : get_singlet_by_id
\&    Usage   : $assembly->get_singlet_by_id()
\&    Function: Get a reference for a singlet from the assembly
\&    Returns : Bio::PrimarySeqI object or undef
\&    Args    : [string] a singlet ID
.Ve
.SH "Modifier methods"
.IX Header "Modifier methods"
Implementation of these methods is optional in the sense that
read-only implementations may not have these. If an object implements
one of them, it should however implement all.
.Sh "add_contig"
.IX Subsection "add_contig"
.Vb 5
\&        Title   : add_contig
\&        Usage   : $assembly->add_contig($contig)
\&        Function: Add another contig to the Bio::Assembly::ScaffoldI object
\&        Returns : 1 on success, 0 otherwise
\&        Args    : a Bio::Assembly:Contig object
.Ve
.PP
.Vb 1
\&    See Bio::Assembly::Contig for more information
.Ve
.Sh "add_singlet"
.IX Subsection "add_singlet"
.Vb 5
\&        Title   : add_singlet
\&        Usage   : $assembly->add_singlet($seq)
\&        Function: Add another singlet to the Bio::Assembly::ScaffoldI object
\&        Returns : 1 on success, 0 otherwise
\&        Args    : a Bio::Align::Singlet object
.Ve
.Sh "remove_contigs"
.IX Subsection "remove_contigs"
.Vb 5
\&        Title   : remove_contigs
\&        Usage   : $assembly->remove_contigs(1..4)
\&        Function: Remove contig from assembly object
\&        Returns : a Bio::Assembly::Contig object
\&        Args    : a list of contig IDs
.Ve
.PP
.Vb 1
\&    See function get_contig_ids() above
.Ve
.Sh "remove_singlets"
.IX Subsection "remove_singlets"
.Vb 5
\&        Title   : remove_singlets
\&        Usage   : $assembly->remove_singlets(1..4)
\&        Function: Remove singlet from assembly object
\&        Returns : a Bio::SeqI object
\&        Args    : a list of singlet IDs
.Ve
.PP
.Vb 1
\&    See function get_singlet_ids() above
.Ve
.SH "Contig and singlet selection methos"
.IX Header "Contig and singlet selection methos"
.Sh "select_contigs"
.IX Subsection "select_contigs"
.Vb 5
\&        Title   : select_contig
\&        Usage   : $assembly->select_contig
\&        Function: Selects an array of contigs from the assembly
\&        Returns : an array of Bio::Assembly::Contig objects
\&        Args    : an array of contig ids
.Ve
.PP
.Vb 1
\&    See function get_contig_ids() above
.Ve
.Sh "select_singlets"
.IX Subsection "select_singlets"
.Vb 5
\&        Title   : select_singlets
\&        Usage   : $assembly->select_singlets(@list)
\&        Function: Selects an array of singlets from the assembly
\&        Returns : an array of Bio::SeqI objects
\&        Args    : an array of singlet ids
.Ve
.PP
.Vb 1
\&    See function get_singlet_ids() above
.Ve
.Sh "all_contigs"
.IX Subsection "all_contigs"
.Vb 8
\&        Title   : all_contigs
\&        Usage   : my @contigs = $assembly->all_contigs
\&        Function: Returns a list of all contigs in this assembly.
\&                  Contigs are both clusters and alignments of one
\&                  or more reads, with an associated consensus
\&                  sequence.
\&        Returns : array of Bio::Assembly::Contig
\&        Args    : none
.Ve
.Sh "all_singlets"
.IX Subsection "all_singlets"
.Vb 7
\&    Title   : all_singlets
\&    Usage   : my @singlets = $assembly->all_singlets
\&    Function: Returns a list of all singlets in this assembly.
\&              Singlets are isolated reads, without non-vector
\&              matches to any other read in the assembly.
\&    Returns : array of Bio::Assembly::Contig
\&    Args    : none
.Ve
