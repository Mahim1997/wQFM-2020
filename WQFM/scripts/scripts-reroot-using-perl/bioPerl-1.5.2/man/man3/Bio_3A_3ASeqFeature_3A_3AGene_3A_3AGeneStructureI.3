.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqFeature::Gene::GeneStructureI 3"
.TH Bio::SeqFeature::Gene::GeneStructureI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqFeature::Gene::GeneStructureI \- A feature representing an arbitrarily
           complex structure of a gene
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #documentation needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A feature representing a gene structure.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "transcripts"
.IX Subsection "transcripts"
.Vb 3
\& Title   : transcripts()
\& Usage   : @transcripts = $gene->transcripts();
\& Function: Get the transcript features/sites of this gene structure.
.Ve
.PP
.Vb 2
\&           See Bio::SeqFeature::Gene::TranscriptI for properties of the
\&           returned objects.
.Ve
.PP
.Vb 3
\& Returns : An array of Bio::SeqFeature::Gene::TranscriptI implementing objects
\&           representing the promoter regions or sites.
\& Args    :
.Ve
.Sh "promoters"
.IX Subsection "promoters"
.Vb 3
\& Title   : promoters()
\& Usage   : @prom_sites = $gene->promoters();
\& Function: Get the promoter features/sites of this gene structure.
.Ve
.PP
.Vb 3
\&           Note that OO-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
.Ve
.PP
.Vb 3
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           promoter regions or sites.
\& Args    :
.Ve
.Sh "exons"
.IX Subsection "exons"
.Vb 5
\& Title   : exons()
\& Usage   : @exons = $gene->exons();
\&           @inital = $gene->exons('Initial');
\& Function: Get all exon features or all exons of specified type of this gene
\&           structure.
.Ve
.PP
.Vb 2
\&           Refer to the documentation of the class that produced this gene
\&           structure object for information about the possible types.
.Ve
.PP
.Vb 2
\&           See Bio::SeqFeature::Gene::ExonI for properties of the
\&           returned objects.
.Ve
.PP
.Vb 3
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects
\&           representing the exon regions.
\& Args    : An optional string specifying the type of the exon.
.Ve
.Sh "introns"
.IX Subsection "introns"
.Vb 6
\& Title   : introns()
\& Usage   : @introns = $gene->introns();
\& Function: Get all introns of this gene structure.
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           introns.
\& Args    :
.Ve
.Sh "poly_A_sites"
.IX Subsection "poly_A_sites"
.Vb 6
\& Title   : poly_A_sites()
\& Usage   : @polyAsites = $gene->poly_A_sites();
\& Function: Get the poly-adenylation features/sites of this gene structure.
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           poly-adenylation regions or sites.
\& Args    :
.Ve
.Sh "utrs"
.IX Subsection "utrs"
.Vb 3
\& Title   : utrs()
\& Usage   : @utr_sites = $gene->utrs();
\& Function: Get the UTR features/sites of this gene structure.
.Ve
.PP
.Vb 2
\&           See Bio::SeqFeature::Gene::ExonI for properties of the
\&           returned objects.
.Ve
.PP
.Vb 3
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects
\&           representing the UTR regions or sites.
\& Args    :
.Ve
