.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::GFF::Featname 3"
.TH Bio::DB::GFF::Featname 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::GFF::Featname \-\- The name of a feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::GFF;
.Ve
.PP
.Vb 2
\&  my $db      = Bio::DB::GFF->new( -adaptor => 'dbi:mysql',
\&                                   -dsn     => 'dbi:mysql:elegans42');
.Ve
.PP
.Vb 2
\&  my $feature = Bio::DB::GFF::Featname->new(Locus => 'unc-19');
\&  my $segment = $db->segment($feature);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::GFF::Featname is the name of a feature.  It contains two
fields: name and class.  It is typically used by the Bio::DB::GFF
module to denote a group, and is accepted by
Bio::DB::Relsegment\->\fInew()\fR and Bio::DB::GFF\->\fIsegment()\fR as a
replacement for the \-name and \-class arguments.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $name = Bio::DB::GFF::Featname->new($class,$name)
\& Function: create a new Bio::DB::GFF::Featname object
\& Returns : a new Bio::DB::GFF::Featname object
\& Args    : class and ID
\& Status  : Public
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 6
\& Title   : id
\& Usage   : $id = $name->id
\& Function: return a unique ID for the combination of class and name
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.PP
This method returns a unique combination of the name and class in the
form \*(L"class:name\*(R".  Coincidentally, this is the same format used
by AceDB.
.Sh "name"
.IX Subsection "name"
.Vb 6
\& Title   : name
\& Usage   : $name = $name->name
\& Function: return the name of the Featname
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.Sh "class"
.IX Subsection "class"
.Vb 6
\& Title   : class
\& Usage   : $class = $name->class
\& Function: return the name of the Featname
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.Sh "asString"
.IX Subsection "asString"
.Vb 6
\& Title   : asString
\& Usage   : $string = $name->asString
\& Function: same as name()
\& Returns : a string
\& Args    : none
\& Status  : Public
.Ve
.PP
This method is used to overload the "" operator.  It is equivalent to
calling \fIname()\fR.
.Sh "clone"
.IX Subsection "clone"
.Vb 6
\& Title   : clone
\& Usage   : $new_clone = $type->clone;
\& Function: clone this object
\& Returns : a new Bio::DB::GFF::Featname object
\& Args    : none
\& Status  : Public
.Ve
.PP
This method creates an exact copy of the object.
.SH "BUGS"
.IX Header "BUGS"
This module is still under development.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
bioperl, Bio::DB::GFF, Bio::DB::RelSegment
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
