.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Restriction::IO 3"
.TH Bio::Restriction::IO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Restriction::IO \- Handler for sequence variation IO Formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Restriction::IO;
.Ve
.PP
.Vb 3
\&    $in  = Bio::Restriction::IO->new(-file => "inputfilename" ,
\&                                     -format => 'withrefm');
\&    my $res = $in->read; # a Bio::Restriction::EnzymeCollection
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Restriction::IO is a handler module for the formats in the
Restriction \s-1IO\s0 set, e.g. \f(CW\*(C`Bio::Restriction::IO::xxx\*(C'\fR. It is the
officially sanctioned way of getting at the format objects, which most
people should use.
.PP
The structure, conventions and most of the code is inherited from
Bio::SeqIO. The main difference is that instead of using methods
\&\f(CW\*(C`next_seq\*(C'\fR, you drop \f(CW\*(C`_seq\*(C'\fR from the method name.
.PP
Also, instead of dealing only with individual Bio::Restriction::Enzyme
objects, \f(CW\*(C`read()\*(C'\fR will slurp in all enzymes into a 
Bio::Restriction::EnzymeCollection object.
.PP
For more details, see documentation in Bio::SeqIO.
.SH "TO DO"
.IX Header "TO DO"
At the moment, these can be use mainly to get a custom set if enzymes in
\&\f(CW\*(C`withrefm\*(C'\fR or \f(CW\*(C`itype2\*(C'\fR formats into Bio::Restriction::Enzyme or
Bio::Restriction::EnzymeCollection objects.  Using \f(CW\*(C`bairoch\*(C'\fR format is
highly experimental and is not recommmended at this time.
.PP
This class inherits from Bio::SeqIO for convenience sake, though this should
inherit from Bio::Root::Root.  Get rid of Bio::SeqIO inheritance by
copying relevant methods in.
.PP
\&\f(CW\*(C`write()\*(C'\fR methods are currently not implemented for any format except \f(CW\*(C`base\*(C'\fR.
Using \f(CW\*(C`write()\*(C'\fR even with \f(CW\*(C`base\*(C'\fR format is not recommended as it does not
support multicut/multisite enzyme output.
.PP
Should additional formats be supported (such as \s-1XML\s0)?
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SeqIO, 
Bio::Restriction::Enzyme, 
Bio::Restriction::EnzymeCollection
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Edwards, redwards@utmem.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : $stream = Bio::Restriction::IO->new(-file => $filename,
\&                                               -format => 'Format')
\& Function: Returns a new seqstream
\& Returns : A Bio::Restriction::IO::Handler initialised with
\&           the appropriate format
\& Args    : -file => $filename
\&           -format => format
\&           -fh => filehandle to attach to
.Ve
.Sh "read"
.IX Subsection "read"
.Vb 5
\& Title   : read
\& Usage   : $renzs = $stream->read
\& Function: reads all the restrction enzymes from the stream
\& Returns : a Bio::Restriction::EnzymeCollection object
\& Args    :
.Ve
.Sh "write"
.IX Subsection "write"
.Vb 5
\& Title   : write
\& Usage   : $stream->write($seq)
\& Function: writes the $seq object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Restriction::EnzymeCollection object
.Ve
.Sh "_guess_format"
.IX Subsection "_guess_format"
.Vb 6
\& Title   : _guess_format
\& Usage   : $obj->_guess_format($filename)
\& Function:
\& Example :
\& Returns : guessed format of filename (lower case)
\& Args    :
.Ve
