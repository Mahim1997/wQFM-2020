.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::tinyseq 3"
.TH Bio::SeqIO::tinyseq 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::tinyseq \- reading/writing sequences in NCBI TinySeq format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly; use the SeqIO handler system:
.PP
.Vb 1
\&  $stream = Bio::SeqIO->new( -file => $filename, -format => 'tinyseq' );
.Ve
.PP
.Vb 3
\&  while ( my $seq = $stream->next_seq ) {
\&    ....
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object reads and writes Bio::Seq objects to and from TinySeq \s-1XML\s0
format.  A TinySeq is a lightweight \s-1XML\s0 file of sequence information,
analgous to \s-1FASTA\s0 format.
.PP
See <http://www.ncbi.nlm.nih.gov/dtd/NCBI_TSeq.mod.dtd> for the \s-1DTD\s0.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.bioperl.org
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SeqIO, Bio::Seq.
.SH "AUTHOR"
.IX Header "AUTHOR"
Donald Jackson, <donald.jackson@bms.com>
.PP
Parts of this module and the test script were patterned after Sheldon
McKay's Bio::SeqIO::game.  If it breaks, however, it's my fault not
his ;).
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "next_seq"
.IX Subsection "next_seq"
.Vb 5
\&  Title         : next_seq
\&  Usage         : $seq = $stream->next_seq()
\&  Function      : returns the next sequence in the stream
\&  Returns       : Bio::Seq object
\&  Args          : NONE
.Ve
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 5
\&  Title         : write_seq
\&  Usage         : $seq = $stream->write_seq(@sequence_objects); undef $stream
\&  Function      : outputs one or more sequence objects as TinySeq XML
\&  Returns       : 1 on success
\&  Args          : one or more sequence objects as TinySeq XML
.Ve
.PP
Because the TSeq dtd includes closing tags after all sets are written,
the output will not be complete until the program terminates or the
object is forced out of scope (see \fIclose_writer()\fR).  May not perfectly
reproduce TSeq_sid element for all sequences
.Sh "_get_seqs"
.IX Subsection "_get_seqs"
.Vb 5
\&  Title         : _get_seqs
\&  Usage         : Internal function - use next_seq() instead
\&  Function      : parses the XML and creates Bio::Seq objects
\&  Returns       : 1 on success
\&  Args          : NONE
.Ve
.PP
Currently stores all sequence objects into memory.  I will work on do
more of a stream-based approach
.Sh "_get_species"
.IX Subsection "_get_species"
.Vb 6
\&  Title         : _get_species
\&  Usage         : Internal function
\&  Function      : gets a Bio::Species object from cache or creates as needed
\&  Returns       : a Bio::Species object on success, undef on failure
\&  Args          : a classification string (eg 'Homo sapiens') and
\&                  a NCBI taxon id (optional)
.Ve
.PP
Objects are cached for parsing multiple sequence files.
.Sh "_create_species"
.IX Subsection "_create_species"
.Vb 6
\&  Title         : _create_species
\&  Usage         : Internal function
\&  Function      : creates a Bio::Species object
\&  Returns       : a Bio::Species object on success, undef on failure
\&  Args          : a classification string (eg 'Homo sapiens') and
\&                  a NCBI taxon id (optional)
.Ve
.Sh "_assign_identifier"
.IX Subsection "_assign_identifier"
.Vb 5
\&  Title         : _assign_identifier
\&  Usage         : Internal function
\&  Function      : looks for sequence accession
\&  Returns       : 1 on success
\&  Args          : NONE
.Ve
.PP
\&\s-1NCBI\s0 puts refseq accessions in TSeq_sid, others in TSeq_accver.
.Sh "_convert_seqtype"
.IX Subsection "_convert_seqtype"
.Vb 4
\&  Title         : _convert_seqtype
\&  Usage         : Internal function
\&  Function      : maps Bio::Seq::alphabet() values [dna/rna/protein] onto
\&                  TSeq_seqtype values [protein/nucleotide]
.Ve
.Sh "_get_idstring"
.IX Subsection "_get_idstring"
.Vb 4
\&  Title         : _get_idstring
\&  Usage         : Internal function
\&  Function      : parse accession and version info from TSeq_accver
\&                  or TSeq_sid
.Ve
.Sh "_get_writer"
.IX Subsection "_get_writer"
.Vb 4
\&  Title         : _get_writer
\&  Usage         : Internal function
\&  Function      : instantiate XML::Writer object if needed,
\&                  output initial XML
.Ve
.Sh "close_writer"
.IX Subsection "close_writer"
.Vb 5
\&  Title         : close_writer
\&  Usage         : $self->close_writer()
\&  Function      : terminate XML output
\&  Args          : NONE
\&  Returns       : 1 on success
.Ve
.PP
Called automatically by \s-1DESTROY\s0 when object goes out of scope
