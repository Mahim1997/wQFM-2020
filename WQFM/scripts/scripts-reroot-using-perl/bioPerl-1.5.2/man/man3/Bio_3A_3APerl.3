.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Perl 3"
.TH Bio::Perl 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Perl \- Functional access to BioPerl for people who don't know objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Perl;
.Ve
.PP
.Vb 2
\&  # will guess file format from extension
\&  $seq_object = read_sequence($filename);
.Ve
.PP
.Vb 2
\&  # forces genbank format
\&  $seq_object = read_sequence($filename,'genbank');
.Ve
.PP
.Vb 2
\&  # reads an array of sequences
\&  @seq_object_array = read_all_sequences($filename,'fasta');
.Ve
.PP
.Vb 2
\&  # sequences are Bio::Seq objects, so the following methods work
\&  # for more info see Bio::Seq, or do 'perldoc Bio/Seq.pm'
.Ve
.PP
.Vb 3
\&  print "Sequence name is ",$seq_object->display_id,"\en";
\&  print "Sequence acc  is ",$seq_object->accession_number,"\en";
\&  print "First 5 bases is ",$seq_object->subseq(1,5),"\en";
.Ve
.PP
.Vb 1
\&  # get the whole sequence as a single string
.Ve
.PP
.Vb 1
\&  $sequence_as_a_string = $seq_object->seq();
.Ve
.PP
.Vb 1
\&  # writing sequences
.Ve
.PP
.Vb 1
\&  write_sequence(">$filename",'genbank',$seq_object);
.Ve
.PP
.Vb 1
\&  write_sequence(">$filename",'genbank',@seq_object_array);
.Ve
.PP
.Vb 1
\&  # making a new sequence from just a string
.Ve
.PP
.Vb 2
\&  $seq_object = new_sequence("ATTGGTTTGGGGACCCAATTTGTGTGTTATATGTA",
\&      "myname","AL12232");
.Ve
.PP
.Vb 1
\&  # getting a sequence from a database (assumes internet connection)
.Ve
.PP
.Vb 1
\&  $seq_object = get_sequence('swissprot',"ROA1_HUMAN");
.Ve
.PP
.Vb 1
\&  $seq_object = get_sequence('embl',"AI129902");
.Ve
.PP
.Vb 1
\&  $seq_object = get_sequence('genbank',"AI129902");
.Ve
.PP
.Vb 1
\&  # BLAST a sequence (assummes an internet connection)
.Ve
.PP
.Vb 1
\&  $blast_report = blast_sequence($seq_object);
.Ve
.PP
.Vb 1
\&  write_blast(">blast.out",$blast_report);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Easy first time access to BioPerl via functions.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 1
\&  bioperl-l@bioperl.org
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Email birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "read_sequence"
.IX Subsection "read_sequence"
.Vb 3
\& Title   : read_sequence
\& Usage   : $seq = read_sequence('sequences.fa')
\&           $seq = read_sequence($filename,'genbank');
.Ve
.PP
.Vb 2
\&           # pipes are fine
\&           $seq = read_sequence("my_fetching_program $id |",'fasta');
.Ve
.PP
.Vb 4
\& Function: Reads the top sequence from the file. If no format is given, it will
\&           try to guess the format from the filename. If a format is given, it
\&           forces that format. The filename can be any valid perl open() string
\&           - in particular, you can put in pipes
.Ve
.PP
.Vb 3
\& Returns : A Bio::Seq object. A quick synopsis:
\&           $seq_object->display_id - name of the sequence
\&           $seq_object->seq        - sequence as a string
.Ve
.PP
.Vb 2
\& Args    : Two strings, first the filename - any Perl open() string is ok
\&           Second string is the format, which is optional
.Ve
.PP
For more information on Seq objects see Bio::Seq.
.Sh "read_all_sequences"
.IX Subsection "read_all_sequences"
.Vb 3
\& Title   : read_all_sequences
\& Usage   : @seq_object_array = read_all_sequences($filename);
\&           @seq_object_array = read_all_sequences($filename,'genbank');
.Ve
.PP
.Vb 2
\& Function: Just as the function above, but reads all the sequences in the
\&           file and loads them into an array.
.Ve
.PP
.Vb 3
\&           For very large files, you will run out of memory. When this
\&           happens, you've got to use the SeqIO system directly (this is
\&           not so hard! Don't worry about it!).
.Ve
.PP
.Vb 1
\& Returns : array of Bio::Seq objects
.Ve
.PP
.Vb 2
\& Args    : two strings, first the filename (any open() string is ok)
\&           second the format (which is optional)
.Ve
.PP
See Bio::SeqIO and Bio::Seq for more information
.Sh "write_sequence"
.IX Subsection "write_sequence"
.Vb 3
\& Title   : write_sequence
\& Usage   : write_sequence(">new_file.gb",'genbank',$seq)
\&           write_sequence(">new_file.gb",'genbank',@array_of_sequence_objects)
.Ve
.PP
.Vb 1
\& Function: writes sequences in the specified format
.Ve
.PP
.Vb 1
\& Returns : true
.Ve
.PP
.Vb 3
\& Args    : filename as a string, must provide an open() output file
\&           format as a string
\&           one or more sequence objects
.Ve
.Sh "new_sequence"
.IX Subsection "new_sequence"
.Vb 2
\& Title   : new_sequence
\& Usage   : $seq_obj = new_sequence("GATTACA", "kino-enzyme");
.Ve
.PP
.Vb 2
\& Function: Construct a sequency object from sequence string
\& Returns : A Bio::Seq object
.Ve
.PP
.Vb 3
\& Args    : sequence string
\&           name string (optional, default "no-name-for-sequence")
\&           accession - accession number (optional, no default)
.Ve
.Sh "blast_sequence"
.IX Subsection "blast_sequence"
.Vb 3
\& Title   : blast_sequence
\& Usage   : $blast_result = blast_sequence($seq)
\&           $blast_result = blast_sequence('MFVEGGTFASEDDDSASAEDE');
.Ve
.PP
.Vb 2
\& Function: If the computer has Internet accessibility, blasts
\&           the sequence using the NCBI BLAST server against nrdb.
.Ve
.PP
.Vb 1
\&           It chooses the flavour of BLAST on the basis of the sequence.
.Ve
.PP
.Vb 4
\&           This function uses Bio::Tools::Run::RemoteBlast, which itself
\&           use Bio::SearchIO - as soon as you want to know more, check out
\&           these modules
\& Returns : Bio::Search::Result::GenericResult.pm
.Ve
.PP
.Vb 2
\& Args    : Either a string of protein letters or nucleotides, or a
\&           Bio::Seq object
.Ve
.Sh "write_blast"
.IX Subsection "write_blast"
.Vb 2
\& Title   : write_blast
\& Usage   : write_blast($filename,$blast_report);
.Ve
.PP
.Vb 3
\& Function: Writes a BLAST result object (or more formally
\&           a SearchIO result object) out to a filename
\&           in BLAST-like format
.Ve
.PP
.Vb 1
\& Returns : none
.Ve
.PP
.Vb 2
\& Args    : filename as a string
\&           Bio::SearchIO::Results object
.Ve
.Sh "get_sequence"
.IX Subsection "get_sequence"
.Vb 2
\& Title   : get_sequence
\& Usage   : $seq_object = get_sequence('swiss',"ROA1_HUMAN");
.Ve
.PP
.Vb 4
\& Function: If the computer has Internet access this method gets
\&           the sequence from Internet accessible databases. Currently
\&           this supports Swissprot ('swiss'), EMBL ('embl'), GenBank
\&           ('genbank'), GenPept ('genpept'), and RefSeq ('refseq').
.Ve
.PP
.Vb 1
\&           Swissprot and EMBL are more robust than GenBank fetching.
.Ve
.PP
.Vb 2
\&           If the user is trying to retrieve a RefSeq entry from
\&           GenBank/EMBL, the query is silently redirected.
.Ve
.PP
.Vb 1
\& Returns : A Bio::Seq object
.Ve
.PP
.Vb 2
\& Args    : database type - one of swiss, embl, genbank, genpept, or
\&           refseq
.Ve
.Sh "translate"
.IX Subsection "translate"
.Vb 2
\& Title   : translate
\& Usage   : $seqobj = translate($seq_or_string_scalar)
.Ve
.PP
.Vb 3
\& Function: translates a DNA sequence object OR just a plain
\&           string of DNA to amino acids
\& Returns : A Bio::Seq object
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
.Sh "translate_as_string"
.IX Subsection "translate_as_string"
.Vb 2
\& Title   : translate_as_string
\& Usage   : $seqstring = translate_as_string($seq_or_string_scalar)
.Ve
.PP
.Vb 3
\& Function: translates a DNA sequence object OR just a plain
\&           string of DNA to amino acids
\& Returns : A string of just amino acids
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
.Sh "reverse_complement"
.IX Subsection "reverse_complement"
.Vb 2
\& Title   : reverse_complement
\& Usage   : $seqobj = reverse_complement($seq_or_string_scalar)
.Ve
.PP
.Vb 4
\& Function: reverse complements a string or sequence argument
\&           producing a Bio::Seq - if you want a string, you
\&           can use reverse_complement_as_string
\& Returns : A Bio::Seq object
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
.Sh "revcom"
.IX Subsection "revcom"
.Vb 2
\& Title   : revcom
\& Usage   : $seqobj = revcom($seq_or_string_scalar)
.Ve
.PP
.Vb 3
\& Function: reverse complements a string or sequence argument
\&           producing a Bio::Seq - if you want a string, you
\&           can use reverse_complement_as_string
.Ve
.PP
.Vb 2
\&           This is an alias for reverse_complement
\& Returns : A Bio::Seq object
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
.Sh "reverse_complement_as_string"
.IX Subsection "reverse_complement_as_string"
.Vb 2
\& Title   : reverse_complement_as_string
\& Usage   : $string = reverse_complement_as_string($seq_or_string_scalar)
.Ve
.PP
.Vb 3
\& Function: reverse complements a string or sequence argument
\&           producing a string
\& Returns : A string of DNA letters
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
.Sh "revcom_as_string"
.IX Subsection "revcom_as_string"
.Vb 2
\& Title   : revcom_as_string
\& Usage   : $string = revcom_as_string($seq_or_string_scalar)
.Ve
.PP
.Vb 3
\& Function: reverse complements a string or sequence argument
\&           producing a string
\& Returns : A string of DNA letters
.Ve
.PP
.Vb 2
\& Args    : Either a sequence object or a string of
\&           just DNA sequence characters
.Ve
