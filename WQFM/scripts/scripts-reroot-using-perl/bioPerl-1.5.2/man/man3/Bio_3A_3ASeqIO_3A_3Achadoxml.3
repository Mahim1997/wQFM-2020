.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::chadoxml 3"
.TH Bio::SeqIO::chadoxml 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::chadoxml \- chadoxml sequence output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
It is probably best not to use this object directly, but
rather go through the SeqIO handler system:
.PP
.Vb 2
\&    $writer = Bio::SeqIO->new(-file => ">chado.xml",
\&                              -format => 'chadoxml');
.Ve
.PP
.Vb 2
\&    # assume you already have a Sequence object
\&    $writer->write_seq($seq_obj);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Seq objects to chadoxml flat
file databases (for chadoxml \s-1DTD\s0, see
http://gmod.cvs.sourceforge.net/gmod/schema/chado/dat/chado.dtd).
.PP
This is currently a write-only module.
.PP
.Vb 2
\&    $seqio = Bio::SeqIO->new(-file => '>outfile.xml',
\&                             -format => 'chadoxml');
.Ve
.PP
.Vb 6
\&    # we have a Bio::Seq object $seq which is a gene located on
\&    # chromosome arm 'X', to be written out to chadoxml
\&    # before converting to chadoxml, $seq object B<must> be transformed
\&    # so that all the coordinates in $seq are against the source
\&    # feature to be passed into Bio::SeqIO::chadoxml->write_seq()
\&    # -- chromosome arm X in the example below.
.Ve
.PP
.Vb 7
\&    $seqio->write_seq(-seq=>$seq,
\&                      -seq_so_type=>'gene',
\&                      -src_feature=>'X',
\&                      -src_feat_type=>'chromosome_arm',
\&                                -nounflatten=>1,
\&                      -is_analysis=>'true',
\&                      -data_source=>'GenBank');
.Ve
.PP
The chadoxml output of Bio::SeqIO::chadoxml\->\fIwrite_seq()\fR method can be
passed to the loader utility in \s-1XORT\s0 package
(http://gmod.cvs.sourceforge.net/gmod/schema/XMLTools/XORT/)
to be loaded into chado.
.PP
This object is currently implemented to work with sequence and
annotation data from whole genome projects deposited in GenBank. It
may not be able to handle all different types of data from all
different sources.
.PP
In converting a Bio::Seq object into chadoxml, a top-level feature is
created to represent the object and all sequence features inside the
Bio::Seq object are treated as subfeatures of the top-level
feature. The Bio::SeqIO::chadoxml object calls
Bio::SeqFeature::Tools::Unflattener to unflatten the flat feature list
contained in the subject Bio::Seq object, to build gene model
containment hierarchy conforming to chado central dogma model: gene
\&\-\-> mRNA \-\-> exons and protein.
.PP
Destination of data in the subject Bio::Seq object \f(CW$seq\fR is as following:
.PP
.Vb 1
\&        *$seq->display_id:  name of the top-level feature;
.Ve
.PP
.Vb 5
\&        *$seq->accession_number: if defined, uniquename and
\&                                 feature_dbxref of the top-level
\&                                 feature if not defined,
\&                                 $seq->display_id is used as the
\&                                 uniquename of the top-level feature;
.Ve
.PP
.Vb 4
\&        *$seq->molecule: transformed to SO type, used as the feature
\&                        type of the top-level feature if -seq_so_type
\&                        argument is supplied, use the supplied SO type
\&                        as the feature type of the top-level feature;
.Ve
.PP
.Vb 1
\&        *$seq->species: organism of the top-level feature;
.Ve
.PP
.Vb 1
\&        *$seq->seq: residues of the top-level feature;
.Ve
.PP
.Vb 1
\&        *$seq->is_circular, $seq->division: feature_cvterm;
.Ve
.PP
.Vb 1
\&        *$seq->keywords, $seq->desc, comments: featureprop;
.Ve
.PP
.Vb 3
\&        *references: pub and feature_pub;
\&                medline/pubmed ids: pub_dbxref;
\&                comments: pubprop;
.Ve
.PP
.Vb 1
\&        *feature "source" span: featureloc for top-level feature;
.Ve
.PP
.Vb 1
\&        *feature "source" db_xref: feature_dbxref for top-level feature;
.Ve
.PP
.Vb 1
\&        *feature "source" other tags: featureprop for top-level feature;
.Ve
.PP
.Vb 5
\&        *subfeature 'symbol' or 'label' tag: feature uniquename, if
\&                     none of these is present, the chadoxml object
\&                     generates feature uniquenames as:
\&                     <gene>-<feature_type>-<span>
\&                     (e.g. foo-mRNA--1000..3000);
.Ve
.PP
.Vb 2
\&        *gene model: feature_relationship built based on the
\&                     containment hierarchy;
.Ve
.PP
.Vb 1
\&        *feature span: featureloc;
.Ve
.PP
.Vb 1
\&        *feature accession numbers: feature_dbxref;
.Ve
.PP
.Vb 1
\&        *feature tags (except db_xref, symbol and gene): featureprop;
.Ve
.PP
Things to watch out for:
.PP
.Vb 2
\&        *chado schema change: this version works with the chado
\&                               version tagged chado_1_01 in GMOD CVS.
.Ve
.PP
.Vb 5
\&        *feature uniquenames: especially important if using XORT
\&                              loader to do incremental load into
\&                              chado. may need pre-processing of the
\&                              source data to put the correct
\&                              uniquenames in place.
.Ve
.PP
.Vb 9
\&        *pub uniquenames: chadoxml->write_seq() has the FlyBase policy
\&                          on pub uniquenames hard-coded, it assigns
\&                          pub uniquenames in the following way: for
\&                          journals and books, use ISBN number; for
\&                          published papers, use MEDLINE ID; for
\&                          everything else, use FlyBase unique
\&                          identifier FBrf#. need to modify the code to
\&                          implement your policy. look for the comments
\&                          in the code.
.Ve
.PP
.Vb 12
\&        *for pubs possibly existing in chado but with no knowledge of
\&         its uniquename:put "op" as "match", then need to run the
\&                        output chadoxml through a special filter that
\&                        talks to chado database and tries to find the
\&                        pub by matching with the provided information
\&                        instead of looking up by the unique key. after
\&                        matching, the filter also resets the "match"
\&                        operation to either "force" (default), or
\&                        "lookup", or "insert", or "update". the
\&                        "match" operation is for a special FlyBase use
\&                        case. please modify to work according to your
\&                        rules.
.Ve
.PP
.Vb 1
\&        *chado initialization for loading:
.Ve
.PP
.Vb 12
\&                cv & cvterm: in the output chadoxml, all cv's and
\&                             cvterm's are lookup only. Therefore,
\&                             before using XORT loader to load the
\&                             output into chado, chado must be
\&                             pre-loaded with all necessary CVs and
\&                             CVterms, including "SO" , "property
\&                             type", "relationship type", "pub type",
\&                             "pubprop type", "pub relationship type",
\&                             "sequence topology", "GenBank feature
\&                             qualifier", "GenBank division". A pub by
\&                             the uniquename 'nullpub' of type 'null
\&                             pub' needs to be inserted.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.
Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.bioperl.org
.Ve
.SH "AUTHOR \- Peili Zhang"
.IX Header "AUTHOR - Peili Zhang"
Email peili@morgan.harvard.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "write_seq"
.IX Subsection "write_seq"
.Vb 24
\& Title   : write_seq
\& Usage   : $stream->write_seq(-seq=>$seq, -seq_so_type=>$seqSOtype,
\&                              -src_feature=>$srcfeature,
\&                              -src_feat_type=>$srcfeattype,
\&                              -nounflatten=>0 or 1,
\&                              -is_analysis=>'true' or 'false',
\&                              -data_source=>$datasource)
\& Function: writes the $seq object (must be seq) into chadoxml.
\&           Current implementation:
\&           1. for non-mRNA records,
\&           a top-level feature of type $seq->alphabet is
\&           generated for the whole GenBank record, features listed
\&           are unflattened for DNA records to build gene model
\&           feature graph, and for the other types of records all
\&           features in $seq are treated as subfeatures of the top-level
\&           feature.
\&           2. for mRNA records,
\&           if a 'gene' feature is present, it B<must> have a /symbol
\&           or /label tag to contain the uniquename of the gene. a top-
\&           level feature of type 'gene' is generated. the mRNA is written
\&           as a subfeature of the top-level gene feature, and the other
\&           sequence features listed in $seq are treated as subfeatures
\&           of the mRNA feature.
\& Returns : 1 for success and 0 for error
.Ve
.PP
.Vb 19
\& Args     : A Bio::Seq object $seq, optional $seqSOtype, $srcfeature,
\&                 $srcfeattype, $nounflatten, $is_analysis and $data_source.
\&           when $srcfeature (a string, the uniquename of the source
\&           feature) is given, the location and strand information of
\&           the top-level feature against the source feature will be
\&           derived from the sequence feature called 'source' of the
\&           $seq object, a featureloc record is generated for the top
\&           -level feature on $srcfeature. when $srcfeature is given,
\&           $srcfeattype must also be present. All feature coordinates
\&           in $seq should be against $srcfeature.  $seqSOtype is the
\&           optional SO term to use as the type of the top-level feature.
\&           For example, a GenBank data file for a Drosophila melanogaster
\&           genome scaffold has the molecule type of "DNA", when
\&           converting to chadoxml, a $seqSOtype argument of
\&           "golden_path_region" can be supplied to save the scaffold
\&           as a feature of type "golden_path_region" in chadoxml, instead
\&           of "DNA".  a feature with primary tag of 'source' must be
\&           present in the sequence feature list of $seq, to decribe the
\&           whole sequence record.
.Ve
