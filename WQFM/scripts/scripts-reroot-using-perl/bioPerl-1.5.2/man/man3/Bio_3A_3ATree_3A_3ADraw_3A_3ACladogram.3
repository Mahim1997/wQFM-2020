.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::Draw::Cladogram 3"
.TH Bio::Tree::Draw::Cladogram 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::Draw::Cladogram \- Drawing phylogenetic trees in
Encapsulated PostScript (EPS) format.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  use Bio::Tree::Draw::Cladogram;
\&  use Bio::TreeIO;
\&  my $treeio = new Bio::TreeIO('-format' => 'newick',
\&                               '-file'   => 'input.nwk');
\&  my $t1 = $treeio->next_tree;
\&  my $t2 = $treeio->next_tree;
.Ve
.PP
.Vb 2
\&  my $obj1 = new Bio::Tree::Draw::Cladogram(-tree => $t1);
\&  $obj1->print(-file => 'cladogram.eps');
.Ve
.PP
.Vb 4
\&  if ($t2) {
\&    my $obj2 = new Bio::Tree::Draw::Cladogram(-tree => $t1, -second => $t2);
\&    $obj2->print(-file => 'tanglegram.eps');
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tree::Draw::Cladogram is a Perl tool for drawing Bio::Tree::Tree
objects in Encapsulated PostScript (\s-1EPS\s0) format. It can be utilized
both for displaying a single phylogenetic tree (a cladogram) and for
the comparative display of two phylogenetic trees (a tanglegram) such
as a gene tree and a species tree, a host tree and a parasite tree,
two alternative trees for the same set of taxa, or two alternative
trees for overlapping sets of taxa.
.PP
Phylogenetic trees are drawn as rectangular cladograms, with
horizontal orientation and ancestral nodes centered over their
descendents. The font used for taxa is Courier at 10 pt. A single
Bio::Tree::Tree object is drawn with ancestors to the left and taxa
flushed to the right. Two Bio::Tree::Tree objects are drawn with the
first tree oriented left-to-right and the second tree oriented
right\-to\-left, and with corresponding taxa connected by straight lines
in a shade of gray. Each correspondence between a \f(CW$taxon1\fR of the first
tree and a \f(CW$taxon2\fR of the second tree is established by setting
\&\f(CW$taxon1\fR\->add_tag_value('connection',$taxon2). Thus, a taxon of the
first tree can be connected to more than one taxon of the second tree,
and vice versa.
.PP
The branch from the parent to a child \f(CW$node\fR, as well as the child
label, can be colored by setting \f(CW$node\fR\->add_tag_value('Rcolor',$r),
\&\f(CW$node\fR\->add_tag_value('Gcolor',$g), and
\&\f(CW$node\fR\->add_tag_value('Bcolor',$b), where \f(CW$r\fR, \f(CW$g\fR, and \f(CW$b\fR are the
desired values for red, green, and blue (zero for lowest, one for
highest intensity).
.PP
This is a preliminary release of Bio::Tree::Draw::Cladogram. Future
improvements include an option to output phylograms instead of
cladograms. Beware that cladograms are automatically scaled according
to branch lengths, but the current release has only been tested with
trees having unit branch lengths.
.PP
The print method could be extended to output graphic formats other
than \s-1EPS\s0, although there are many graphics conversion programs around
that accept \s-1EPS\s0 input. For instance, most Linux distributions include
epstopdf, a Perl script that together with Ghostscript, converts \s-1EPS\s0
to \s-1PDF\s0.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Gabriel Valiente"
.IX Header "AUTHOR - Gabriel Valiente"
Email valiente@lsi.upc.edu
.PP
Code for coloring branches contributed by Georgii A Bazykin
(gbazykin@princeton.edu).
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 17
\& Title   : new
\& Usage   : my $obj = new Bio::Tree::Draw::Cladogram();
\& Function: Builds a new Bio::Tree::Draw::Cladogram object 
\& Returns : Bio::Tree::Draw::Cladogram
\& Args    : -tree => Bio::Tree::Tree object
\&           -second => Bio::Tree::Tree object (optional)
\&           -font => font name [string] (optional)
\&           -size => font size [integer] (optional)
\&           -top => top margin [integer] (optional)
\&           -bottom => bottom margin [integer] (optional)
\&           -left => left margin [integer] (optional)
\&           -right => right margin [integer] (optional)
\&           -tip => extra tip space [integer] (optional)
\&           -column => extra space between cladograms [integer] (optional)
\&           -compact => ignore branch lengths [boolean] (optional)
\&           -ratio => horizontal to vertical ratio [integer] (optional)
\&           -colors => use colors to color edges [boolean] (optional)
.Ve
.Sh "print"
.IX Subsection "print"
.Vb 5
\& Title   : print
\& Usage   : $obj->print();
\& Function: Outputs $obj in Encapsulated PostScript (EPS) format 
\& Returns : 
\& Args    : -file => filename (optional)
.Ve
