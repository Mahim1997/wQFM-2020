.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqFeature::Store::DBI::mysql 3"
.TH Bio::DB::SeqFeature::Store::DBI::mysql 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::SeqFeature::Store::DBI::mysql \-\- Mysql implementation of Bio::DB::SeqFeature::Store
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::SeqFeature::Store;
.Ve
.PP
.Vb 3
\&  # Open the sequence database
\&  my $db = Bio::DB::SeqFeature::Store->new(-adaptor => 'DBI::mysql',
\&                                          -dsn     => 'dbi:mysql:test');
.Ve
.PP
.Vb 2
\&  # get a feature from somewhere
\&  my $feature = Bio::SeqFeature::Generic->new(...);
.Ve
.PP
.Vb 2
\&  # store it
\&  $db->store($feature) or die "Couldn't store!";
.Ve
.PP
.Vb 3
\&  # primary ID of the feature is changed to indicate its primary ID
\&  # in the database...
\&  my $id = $feature->primary_id;
.Ve
.PP
.Vb 2
\&  # get the feature back out
\&  my $f  = $db->fetch($id);
.Ve
.PP
.Vb 3
\&  # change the feature and update it
\&  $f->start(100);
\&  $db->update($f) or die "Couldn't update!";
.Ve
.PP
.Vb 3
\&  # searching...
\&  # ...by id
\&  my @features = $db->fetch_many(@list_of_ids);
.Ve
.PP
.Vb 2
\&  # ...by name
\&  @features = $db->get_features_by_name('ZK909');
.Ve
.PP
.Vb 2
\&  # ...by alias
\&  @features = $db->get_features_by_alias('sma-3');
.Ve
.PP
.Vb 2
\&  # ...by type
\&  @features = $db->get_features_by_name('gene');
.Ve
.PP
.Vb 2
\&  # ...by location
\&  @features = $db->get_features_by_location(-seq_id=>'Chr1',-start=>4000,-end=>600000);
.Ve
.PP
.Vb 2
\&  # ...by attribute
\&  @features = $db->get_features_by_attribute({description => 'protein kinase'})
.Ve
.PP
.Vb 2
\&  # ...by the GFF "Note" field
\&  @result_list = $db->search_notes('kinase');
.Ve
.PP
.Vb 7
\&  # ...by arbitrary combinations of selectors
\&  @features = $db->features(-name => $name,
\&                            -type => $types,
\&                            -seq_id => $seqid,
\&                            -start  => $start,
\&                            -end    => $end,
\&                            -attributes => $attributes);
.Ve
.PP
.Vb 7
\&  # ...using an iterator
\&  my $iterator = $db->get_seq_stream(-name => $name,
\&                                     -type => $types,
\&                                     -seq_id => $seqid,
\&                                     -start  => $start,
\&                                     -end    => $end,
\&                                     -attributes => $attributes);
.Ve
.PP
.Vb 3
\&  while (my $feature = $iterator->next_seq) {
\&    # do something with the feature
\&  }
.Ve
.PP
.Vb 3
\&  # ...limiting the search to a particular region
\&  my $segment  = $db->segment('Chr1',5000=>6000);
\&  my @features = $segment->features(-type=>['mRNA','match']);
.Ve
.PP
.Vb 4
\&  # getting & storing sequence information
\&  # Warning: this returns a string, and not a PrimarySeq object
\&  $db->insert_sequence('Chr1','GATCCCCCGGGATTCCAAAA...');
\&  my $sequence = $db->fetch_sequence('Chr1',5000=>6000);
.Ve
.PP
.Vb 5
\&  # create a new feature in the database
\&  my $feature = $db->new_feature(-primary_tag => 'mRNA',
\&                                 -seq_id      => 'chr3',
\&                                 -start      => 10000,
\&                                 -end        => 11000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::SeqFeature::Store::mysql is the Mysql adaptor for
Bio::DB::SeqFeature::Store. You will not create it directly, but
instead use Bio::DB::SeqFeature::Store\->\fInew()\fR to do so.
.PP
See Bio::DB::SeqFeature::Store for complete usage instructions.
.Sh "Using the Mysql adaptor"
.IX Subsection "Using the Mysql adaptor"
Before you can use the adaptor, you must use the mysqladmin tool to
create a database and establish a user account with write
permission. In order to use \*(L"fast\*(R" loading, the user account must have
\&\*(L"file\*(R" privileges.
.PP
To establish a connection to the database, call
Bio::DB::SeqFeature::Store\->new(\-adaptor=>'DBI::mysql',@more_args). The
additional arguments are as follows:
.PP
.Vb 2
\&  Argument name       Description
\&  -------------       -----------
.Ve
.PP
.Vb 2
\& -dsn              The database name. You can abbreviate 
\&                   "dbi:mysql:foo" as "foo" if you wish.
.Ve
.PP
.Vb 1
\& -user             Username for authentication.
.Ve
.PP
.Vb 1
\& -pass             Password for authentication.
.Ve
.PP
.Vb 3
\& -namespace        A prefix to attach to each table. This allows you
\&                   to have several virtual databases in the same
\&                   physical database.
.Ve
.PP
.Vb 3
\& -temp             Boolean flag. If true, a temporary database
\&                   will be created and destroyed as soon as
\&                   the Store object goes out of scope. (synonym -temporary)
.Ve
.PP
.Vb 2
\& -autoindex        Boolean flag. If true, features in the database will be
\&                   reindexed every time they change. This is the default.
.Ve
.PP
.Vb 2
\& -tmpdir           Directory in which to place temporary files during "fast" loading.
\&                   Defaults to File::Spec->tmpdir(). (synonyms -dump_dir, -dumpdir, -tmp)
.Ve
.PP
.Vb 2
\& -dbi_options      A hashref to pass to DBI->connect's 4th argument, the "attributes."
\&                   (synonyms -options, -dbi_attr)
.Ve
.PP
.Vb 1
\& -write            Pass true to open database for writing or updating.
.Ve
.PP
If successful, a new instance of
Bio::DB::SeqFeature::Store::DBI::mysql will be returned.
.PP
In addition to the standard methods supported by all well-behaved
Bio::DB::SeqFeature::Store databases, several following
adaptor-specific methods are provided. These are described in the next
sections.
