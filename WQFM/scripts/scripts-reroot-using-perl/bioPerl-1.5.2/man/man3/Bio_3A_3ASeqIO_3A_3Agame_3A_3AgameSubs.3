.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::game::gameSubs 3"
.TH Bio::SeqIO::game::gameSubs 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::SeqIO::game::gameSubs \-\- a base class for game\-XML parsing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not used directly
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A bag of tricks for game-XML parsing.  The PerlSAX handler methods were
stolen from Chris Mungall's \s-1XML\s0 base class, which he stole from Ken MacLeod's
XML::Handler::Subs
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
to one of the Bioperl mailing lists.
.PP
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Sheldon McKay"
.IX Header "AUTHOR - Sheldon McKay"
Email mckays@cshl.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 4
\& Title   : new
\& Usage   : not used directly
\& Returns : a gameHandler object
\& Args    : an XML filename
.Ve
.Sh "go"
.IX Subsection "go"
.Vb 3
\& Title   : go
\& Usage   : not used directly
\& Function: starts PerlSAX XML parsing
.Ve
.Sh "start_document"
.IX Subsection "start_document"
.Vb 2
\& Title   : start_document
\& Usage   : not used directly
.Ve
.Sh "end_document"
.IX Subsection "end_document"
.Vb 2
\& Title   : end_document
\& Usage   : not used directly
.Ve
.Sh "start_element"
.IX Subsection "start_element"
.Vb 2
\& Title   : start_element
\& Usage   : not used directly
.Ve
.Sh "end_element"
.IX Subsection "end_element"
.Vb 2
\& Title   : end_element
\& Usage   : not used directly
.Ve
.Sh "characters"
.IX Subsection "characters"
.Vb 2
\& Title   : characters
\& Usage   : not used directly
.Ve
.Sh "strip_characters"
.IX Subsection "strip_characters"
.Vb 3
\& Title   : strip_characters
\& Usage   : not used directly
\& Function: cleans up XML element contents
.Ve
.Sh "curr_element"
.IX Subsection "curr_element"
.Vb 3
\& Title   : curr_element
\& Usage   : not used directly
\& Function: returns the currently open element
.Ve
.Sh "flush"
.IX Subsection "flush"
.Vb 5
\& Title   : flush
\& Usage   : $self->flush($element) # or $element->flush
\& Function: prune a branch from the XML tree
\& Returns : true if successful
\& Args    : an element object (optional)
.Ve
.Sh "complain"
.IX Subsection "complain"
.Vb 5
\& Title   : complain
\& Usage   : $self->complain("This is terrible; I am not happy")
\& Function: throw a non-fatal warning, formats message for pretty-printing
\& Returns : nothing
\& Args    : a list of strings
.Ve
.Sh "dbxref"
.IX Subsection "dbxref"
.Vb 5
\& Title   : dbxref
\& Usage   : $self->db_xref($el, $tags) 
\& Function: an internal method to flatten dbxref elements
\& Returns : the db_xref (eg wormbase:C02D5.1)
\& Args    : an element object (reqd) and a hash ref of tag/values (optional)
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $self->comment($comment_element)
\& Function: a method to flatten comment elements
\& Returns : a string
\& Args    : an comment element (reqd) and a hash ref of tag/values (optional)
\& Note    : The hope here is that we can unflatten structured comments
\&           in game-derived annotations happen to make a return trip
.Ve
.Sh "property"
.IX Subsection "property"
.Vb 6
\& Title   : property
\& Usage   : $self->property($property_element)
\& Function: an internal method to flatten property elements
\& Returns : a hash reference
\& Args    : an property/output element (reqd) and a hash ref of tag/values (optional)
\& Note: This method is aliased to 'output' to handle structurally identical output elements
.Ve
.Sh "evidence"
.IX Subsection "evidence"
.Vb 5
\& Title   : evidence
\& Usage   : $self->evidence($evidence_element)
\& Function: a method to flatten evidence elements
\& Returns : a string
\& Args    : an evidence element
.Ve
.Sh "date"
.IX Subsection "date"
.Vb 5
\& Title   : date
\& Usage   : $self->date($date_element)
\& Function: a method to flatten date elements
\& Returns : true if successful
\& Args    : a date element
.Ve
.Sh "protein_id"
.IX Subsection "protein_id"
.Vb 5
\& Title   : protein_id
\& Usage   : $pid = $self->protein_id($cds, $standard_name)
\& Function: a method to search for a protein name
\& Returns : a string
\& Args    : the CDS object plus the transcript\e's 'standard_name'
.Ve
