.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Structure::IO 3"
.TH Bio::Structure::IO 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Structure::IO \- Handler for Structure Formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Structure::IO;
.Ve
.PP
.Vb 2
\&    $in  = Bio::Structure::IO->new(-file => "inputfilename",
\&                                   -format => 'pdb');
.Ve
.PP
.Vb 4
\&    while ( my $struc = $in->next_structure() ) {
\&       print "Structure ", $struc->id, " number of models: ",
\&             scalar $struc->model,"\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Structure::IO is a handler module for the formats in the
Structure::IO set (e.g. Bio::Structure::IO::pdb). It is the officially
sanctioned way of getting at the format objects, which most people
should use.
.PP
The Bio::Structure::IO system can be thought of like biological file
handles.  They are attached to filehandles with smart formatting rules
(e.g. \s-1PDB\s0 format) and can either read or write structure objects
(Bio::Structure objects, or more correctly, Bio::Structure::StructureI
implementing objects, of which Bio::Structure is one such object). If
you want to know what to do with a Bio::Structure object, read
Bio::Structure.
.PP
The idea is that you request a stream object for a particular format.
All the stream objects have a notion of an internal file that is read
from or written to. A particular Structure::IO object instance is
configured for either input or output. A specific example of a stream
object is the Bio::Structure::IO::pdb object.
.PP
Each stream object has functions
.PP
.Vb 1
\&   $stream->next_structure();
.Ve
.PP
and
.PP
.Vb 1
\&   $stream->write_structure($struc);
.Ve
.PP
also
.PP
.Vb 1
\&   $stream->type() # returns 'INPUT' or 'OUTPUT'
.Ve
.PP
As an added bonus, you can recover a filehandle that is tied to the
Structure::IOIO object, allowing you to use the standard <>
and print operations to read and write structure::IOuence objects:
.PP
.Vb 1
\&    use Bio::Structure::IO;
.Ve
.PP
.Vb 1
\&    $stream = Bio::Structure::IO->newFh(-format => 'pdb'); # read from standard input
.Ve
.PP
.Vb 3
\&    while ( $structure = <$stream> ) {
\&        # do something with $structure
\&    }
.Ve
.PP
and
.PP
.Vb 1
\&    print $stream $structure; # when stream is in output mode
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "Bio::Structure::IO\->\fInew()\fP"
.IX Subsection "Bio::Structure::IO->new()"
.Vb 3
\&   $stream = Bio::Structure::IO->new(-file => 'filename',   -format=>$format);
\&   $stream = Bio::Structure::IO->new(-fh   => \e*FILEHANDLE, -format=>$format);
\&   $stream = Bio::Structure::IO->new(-format => $format);
.Ve
.PP
The \fInew()\fR class method constructs a new Bio::Structure::IO object. The
returned object can be used to retrieve or print Bio::Structure
objects.  \fInew()\fR accepts the following parameters:
.IP "\-file" 4
.IX Item "-file"
A file path to be opened for reading or writing.  The usual Perl
conventions apply:
.Sp
.Vb 6
\&   'file'       # open file for reading
\&   '>file'      # open file for writing
\&   '>>file'     # open file for appending
\&   '+<file'     # open file read/write
\&   'command |'  # open a pipe from the command
\&   '| command'  # open a pipe to the command
.Ve
.IP "\-fh" 4
.IX Item "-fh"
You may provide \fInew()\fR with a previously-opened filehandle.  For
example, to read from \s-1STDIN:\s0
.Sp
.Vb 1
\&   $strucIO = Bio::Structure::IO->new(-fh => \e*STDIN);
.Ve
.Sp
Note that you must pass filehandles as references to globs.
.Sp
If neither a filehandle nor a filename is specified, then the module
will read from the \f(CW@ARGV\fR array or \s-1STDIN\s0, using the familiar <>
semantics.
.IP "\-format" 4
.IX Item "-format"
Specify the format of the file.  Supported formats include:
.Sp
.Vb 1
\&   pdb         Protein Data Bank format
.Ve
.Sp
If no format is specified and a filename is given, then the module
will attempt to deduce it from the filename.  If this is unsuccessful,
\&\s-1PDB\s0 format is assumed.
.Sp
The format name is case insensitive.  '\s-1PDB\s0', 'Pdb' and 'pdb' are
all supported.
.Sh "Bio::Structure::IO\->\fInewFh()\fP"
.IX Subsection "Bio::Structure::IO->newFh()"
.Vb 3
\&   $fh = Bio::Structure::IO->newFh(-fh   => \e*FILEHANDLE, -format=>$format);
\&   $fh = Bio::Structure::IO->newFh(-format => $format);
\&   # etc.
.Ve
.PP
This constructor behaves like \fInew()\fR, but returns a tied filehandle
rather than a Bio::Structure::IO object.  You can read structures from this
object using the familiar <> operator, and write to it using
\&\fIprint()\fR.  The usual array and \f(CW$_\fR semantics work.  For example, you can
read all structure objects into an array like this:
.PP
.Vb 1
\&  @structures = <$fh>;
.Ve
.PP
Other operations, such as \fIread()\fR, \fIsysread()\fR, \fIwrite()\fR, \fIclose()\fR, and \fIprintf()\fR
are not supported.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
See below for more detailed summaries.  The main methods are:
.ie n .Sh "$structure = $structIO\fP\->\fInext_structure()"
.el .Sh "$structure = \f(CW$structIO\fP\->\fInext_structure()\fP"
.IX Subsection "$structure = $structIO->next_structure()"
Fetch the next structure from the stream.
.Sh "$structIO\->write_structure($struc [,$another_struc,...])"
.IX Subsection "$structIO->write_structure($struc [,$another_struc,...])"
Write the specified structure(s) to the stream.
.Sh "\s-1\fITIEHANDLE\s0()\fP, \s-1\fIREADLINE\s0()\fP, \s-1\fIPRINT\s0()\fP"
.IX Subsection "TIEHANDLE(), READLINE(), PRINT()"
These provide the tie interface.  See perltie for more details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.
Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHORS \- Ewan Birney, Lincoln Stein, Kris Boulez"
.IX Header "AUTHORS - Ewan Birney, Lincoln Stein, Kris Boulez"
Email birney@ebi.ac.uk, lstein@cshl.org, kris.boulez@algonomics.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $stream = Bio::Structure::IO->new(-file => $filename, -format => 'Format')
\& Function: Returns a new structIOstream
\& Returns : A Bio::Structure::IO handler initialised with the appropriate format
\& Args    : -file => $filename
\&           -format => format
\&           -fh => filehandle to attach to
.Ve
.Sh "newFh"
.IX Subsection "newFh"
.Vb 8
\& Title   : newFh
\& Usage   : $fh = Bio::Structure::IO->newFh(-file=>$filename,-format=>'Format')
\& Function: does a new() followed by an fh()
\& Example : $fh = Bio::Structure::IO->newFh(-file=>$filename,-format=>'Format')
\&           $structure = <$fh>;   # read a structure object
\&           print $fh $structure; # write a structure object
\& Returns : filehandle tied to the Bio::Structure::IO::Fh class
\& Args    :
.Ve
.Sh "fh"
.IX Subsection "fh"
.Vb 8
\& Title   : fh
\& Usage   : $obj->fh
\& Function:
\& Example : $fh = $obj->fh;      # make a tied filehandle
\&           $structure = <$fh>;   # read a structure object
\&           print $fh $structure; # write a structure object
\& Returns : filehandle tied to the Bio::Structure::IO::Fh class
\& Args    :
.Ve
.Sh "next_structure"
.IX Subsection "next_structure"
.Vb 4
\& Title   : next_structure
\& Usage   : $structure = stream->next_structure
\& Function: Reads the next structure object from the stream and returns a
\&           Bio::Structure::Entry object.
.Ve
.PP
.Vb 12
\&           Certain driver modules may encounter entries in the stream that
\&           are either misformatted or that use syntax not yet understood
\&           by the driver. If such an incident is recoverable, e.g., by
\&           dismissing a feature of a feature table or some other non-mandatory
\&           part of an entry, the driver will issue a warning. In the case
\&           of a non-recoverable situation an exception will be thrown.
\&           Do not assume that you can resume parsing the same stream after
\&           catching the exception. Note that you can always turn recoverable
\&           errors into exceptions by calling $stream->verbose(2) (see
\&           Bio::RootI POD page).
\& Returns : a Bio::Structure::Entry object
\& Args    : none
.Ve
.Sh "write_structure"
.IX Subsection "write_structure"
.Vb 5
\& Title   : write_structure
\& Usage   : $stream->write_structure($structure)
\& Function: writes the $structure object into the stream
\& Returns : 1 for success and 0 for error
\& Args    : Bio::Structure object
.Ve
.Sh "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 6
\& Title   : _load_format_module
\& Usage   : *INTERNAL Structure::IO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "_concatenate_lines"
.IX Subsection "_concatenate_lines"
.Vb 5
\& Title   : _concatenate_lines
\& Usage   : $s = _concatenate_lines($line, $continuation_line)
\& Function: Private. Concatenates two strings assuming that the second stems
\&           from a continuation line of the first. Adds a space between both
\&           unless the first ends with a dash.
.Ve
.PP
.Vb 4
\&           Takes care of either arg being empty.
\& Example :
\& Returns : A string.
\& Args    :
.Ve
.Sh "_filehandle"
.IX Subsection "_filehandle"
.Vb 6
\& Title   : _filehandle
\& Usage   : $obj->_filehandle($newval)
\& Function: This method is deprecated. Call _fh() instead.
\& Example :
\& Returns : value of _filehandle
\& Args    : newvalue (optional)
.Ve
.Sh "_guess_format"
.IX Subsection "_guess_format"
.Vb 6
\& Title   : _guess_format
\& Usage   : $obj->_guess_format($filename)
\& Function:
\& Example :
\& Returns : guessed format of filename (lower case)
\& Args    :
.Ve
