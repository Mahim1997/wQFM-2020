.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::LiveSeq::IO::Loader 3"
.TH Bio::LiveSeq::IO::Loader 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::LiveSeq::IO::Loader \- Parent Loader for LiveSeq
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #documentation needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package holds common methods used by BioPerl and file loaders.
It contains methods to create LiveSeq objects out of entire entries or from a
localized sequence region surrounding a particular gene.
.SH "AUTHOR \- Joseph A.L. Insana"
.IX Header "AUTHOR - Joseph A.L. Insana"
Email:  Insana@ebi.ac.uk, jinsana@gmx.net
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "entry2liveseq"
.IX Subsection "entry2liveseq"
.Vb 12
\&  Title   : entry2liveseq
\&  Usage   : @translationobjects=$loader->entry2liveseq();
\&          : @translationobjects=$loader->entry2liveseq(-getswissprotinfo => 0);
\&  Function: creates LiveSeq objects from an entry previously loaded
\&  Returns : array of references to objects of class Translation
\&  Errorcode 0
\&  Args    : optional boolean flag to avoid the retrieval of SwissProt
\&            informations for all Transcripts containing SwissProt x-reference
\&            default is 1 (to retrieve those informations and create AARange
\&            LiveSeq objects)
\&  Note    : this method can get really slow for big entries. The lightweight
\&            gene2liveseq method is recommended
.Ve
.Sh "novelaasequence2gene"
.IX Subsection "novelaasequence2gene"
.Vb 5
\&  Title   : novelaasequence2gene
\&  Usage   : $gene=$loader->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
\&          : $gene=$loader->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
\&                                             -taxon => 9606,
\&                                             -gene_name => "tyr-kinase");
.Ve
.PP
.Vb 10
\&  Function: creates LiveSeq objects from a novel amino acid sequence,
\&            using codon usage database to choose codons according to
\&            relative frequencies.
\&            If a taxon ID is not specified, the default is to use the human
\&            one (taxonomy ID 9606).
\&  Returns : reference to a Gene object containing references to LiveSeq objects
\&  Errorcode 0
\&  Args    : string containing an amino acid sequence
\&            integer (optional) with a taxonomy ID
\&            string specifying a gene name
.Ve
.Sh "gene2liveseq"
.IX Subsection "gene2liveseq"
.Vb 7
\&  Title   : gene2liveseq
\&  Usage   : $gene=$loader->gene2liveseq(-gene_name => "gene name");
\&          : $gene=$loader->gene2liveseq(-gene_name => "gene name",
\&                                        -flanking => 64);
\&          : $gene=$loader->gene2liveseq(-gene_name => "gene name",
\&                                        -getswissprotinfo => 0);
\&          : $gene=$loader->gene2liveseq(-position => 4);
.Ve
.PP
.Vb 16
\&  Function: creates LiveSeq objects from an entry previously loaded
\&            It is a "light weight" creation because it creates
\&            a LiveSequence just for the interesting region in an entry
\&            (instead than for the total entry, like in entry2liveseq) and for
\&            the flanking regions up to 500 nucleotides (default) or up to
\&            the specified amount of nucleotides (given as argument) around the
\&            Gene.
\&  Returns : reference to a Gene object containing possibly alternative
\&            Transcripts.
\&  Errorcode 0
\&  Args    : string containing the gene name as in the EMBL feature qualifier
\&            integer (optional) "flanking": amount of flanking bases to be kept
\&            boolean (optional) "getswissprotinfo": if set to "0" it will avoid
\&             trying to fetch information from a crossreference to a SwissProt
\&             entry, avoding the process of creation of AARange objects
\&             It is "1" (on) by default
.Ve
.PP
.Vb 3
\&            Alternative to a gene_name, a position can be given: an
\&            integer (1-) containing the position of the desired CDS in the
\&            loaded entry
.Ve
.Sh "printswissprot"
.IX Subsection "printswissprot"
.Vb 8
\&  Title   : printswissprot
\&  Usage   : $loader->printswissprot($hashref);
\&  Function: prints out all informations loaded from a database entry into the
\&            loader. Mainly used for testing purposes.
\&  Args    : a hashref containing the SWISSPROT entry datas
\&  Note    : the hashref can be obtained with a call to the method
\&               $loader->get_swisshash()      (BioPerl via Bio::DB::EMBL.pm)
\&            that takes as argument a string like "SWISS-PROT:P10275"
.Ve
.Sh "printembl"
.IX Subsection "printembl"
.Vb 5
\&  Title   : printembl
\&  Usage   : $loader->printembl();
\&  Function: prints out all informations loaded from a database entry into the
\&            loader. Mainly used for testing purposes.
\&  Args    : none
.Ve
.Sh "genes"
.IX Subsection "genes"
.Vb 5
\&  Title   : genes
\&  Usage   : $loader->genes();
\&  Function: Returns an array of gene_names (strings) contained in the loaded
\&            entry.
\&  Args    : none
.Ve
