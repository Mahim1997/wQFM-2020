.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tree::TreeI 3"
.TH Bio::Tree::TreeI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tree::TreeI \- A Tree object suitable for lots of things, designed
  originally for Phylogenetic Trees.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  # get a Bio::Tree::TreeI somehow
\&  # like from a TreeIO
\&  my $treeio = new Bio::TreeIO(-format => 'newick', -file => 'treefile.dnd');
\&  my $tree   = $treeio->next_tree;
\&  my @nodes  = $tree->get_nodes;
\&  my @leaves = $tree->get_leaf_nodes;
\&  my $root   = $tree->get_root_node;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object holds a pointer to the Root of a Tree which is a
Bio::Tree::NodeI.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Aaron Mackey, amackey@virginia.edu
Elia Stupka,  elia@fugu\-sg.org
Sendu Bala,   bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "get_nodes"
.IX Subsection "get_nodes"
.Vb 6
\& Title   : get_nodes
\& Usage   : my @nodes = $tree->get_nodes()
\& Function: Return list of Tree::NodeI objects
\& Returns : array of Tree::NodeI objects
\& Args    : (named values) hash with one value 
\&           order => 'b|breadth' first order or 'd|depth' first order
.Ve
.Sh "get_root_node"
.IX Subsection "get_root_node"
.Vb 6
\& Title   : get_root_node
\& Usage   : my $node = $tree->get_root_node();
\& Function: Get the Top Node in the tree, in this implementation
\&           Trees only have one top node.
\& Returns : Bio::Tree::NodeI object
\& Args    : none
.Ve
.Sh "number_nodes"
.IX Subsection "number_nodes"
.Vb 5
\& Title   : number_nodes
\& Usage   : my $size = $tree->number_nodes
\& Function: Find the number of nodes in the tree.
\& Returns : int
\& Args    : none
.Ve
.Sh "total_branch_length"
.IX Subsection "total_branch_length"
.Vb 5
\& Title   : total_branch_length
\& Usage   : my $size = $tree->total_branch_length
\& Function: Returns the sum of the length of all branches
\& Returns : integer
\& Args    : none
.Ve
.Sh "height"
.IX Subsection "height"
.Vb 8
\& Title   : height
\& Usage   : my $height = $tree->height
\& Function: Gets the height of tree - this LOG_2($number_nodes)
\&           WARNING: this is only true for strict binary trees.  The TreeIO
\&           system is capable of building non-binary trees, for which this
\&           method will currently return an incorrect value!!
\& Returns : integer
\& Args    : none
.Ve
.Sh "id"
.IX Subsection "id"
.Vb 5
\& Title   : id
\& Usage   : my $id = $tree->id();
\& Function: An id value for the tree
\& Returns : scalar
\& Args    :
.Ve
.Sh "score"
.IX Subsection "score"
.Vb 7
\& Title   : score
\& Usage   : $obj->score($newval)
\& Function: Sets the associated score with this tree
\&           This is a generic slot which is probably best used 
\&           for log likelihood or other overall tree score
\& Returns : value of score
\& Args    : newvalue (optional)
.Ve
.Sh "get_leaf_nodes"
.IX Subsection "get_leaf_nodes"
.Vb 5
\& Title   : get_leaf_nodes
\& Usage   : my @leaves = $tree->get_leaf_nodes()
\& Function: Returns the leaves (tips) of the tree
\& Returns : Array of Bio::Tree::NodeI objects
\& Args    : none
.Ve
