.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::CodonUsage::Table 3"
.TH Bio::CodonUsage::Table 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::CodonUsage::Table \- for access to the Codon usage Database
at http://www.kazusa.or.jp/codon.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::CodonUsage::Table;
\&  use Bio::DB::CUTG;
.Ve
.PP
.Vb 3
\&  ## get  a codon usage table from web database ##
\&  my $cdtable = Bio::DB::CUTG->new(-sp => 'Mus musculus'
\&                                   -gc => 1);
.Ve
.PP
.Vb 1
\&  ## or from local file
.Ve
.PP
.Vb 2
\&  my $io      = Bio::CodonUsage::IO->new(-file=>"file");
\&  my $cdtable = $io->next_data();
.Ve
.PP
.Vb 1
\&  ## or create your own from your own sequences
.Ve
.PP
.Vb 2
\&  ## get a Bio::PrimarySeq compliant object ##
\&  # $codonstats is a ref to a hash of codon name /count key-value pairs.
.Ve
.PP
.Vb 1
\&  my $codonstats = Bio::Tools::SeqStats->codon_count($my_1ary_Seq_objct);
.Ve
.PP
.Vb 4
\&  ### the '-data' field must be specified ##
\&  ### the '-species' and 'genetic_code' fields are optional
\&  my $CUT = Bio::CodonUsage::Table->new(-data    => $codonstats,
\&                                        -species => 'Hsapiens_kinase');
.Ve
.PP
.Vb 6
\&  print "leu frequency is ", $cdtable->aa_frequency('LEU'), "\en";
\&  print "freqof ATG is ", $cdtable->codon_rel_frequency('ttc'), "\en";
\&  print "abs freq of ATG is ", $cdtable->codon_abs_frequency('ATG'), "\en";
\&  print "number of ATG codons is ", $cdtable->codon_count('ATG'), "\en";
\&  print "gc content at position 1 is ", $cdtable->get_coding_gc('1'), "\en";
\&  print "total CDSs for Mus musculus  is ", $cdtable->cds_count(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides methods for accessing codon usage table data.
.PP
All of the methods at present are simple look-ups of the table or are
derived from simple calculations from the table. Future methods could
include measuring the codon usage of a sequence , for example, or
provide methods for examining codon usage in alignments.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Tools::CodonTable, 
Bio::WebAgent,
Bio::CodonUsage::IO,
Bio::DB::CUTG
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Richard Adams, Richard.Adams@ed.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $cut = Bio::CodonUsage::Table->new(-data => $cut_hash_ref,
\&                                                 -species => 'H.sapiens_kinase'
\&                                                 -genetic_code =>1);
\& Returns : a reference to a new  Bio::CodonUsage::Table object
\& Args    : none or a reference to a hash of codon counts. This constructor is
\&           designed to be compatible with the output of
\&           Bio::Tools::SeqUtils::count_codons()
\&           Species and genetic code parameters can be entered here or via the 
\&           species() and genetic_code() methods separately.
.Ve
.Sh "all_aa_frequencies"
.IX Subsection "all_aa_frequencies"
.Vb 6
\& Title   : all_aa_frequencies
\& Usage   : my $freq = $cdtable->all_aa_frequencies();
\& Returns : a reference to a hash where each key is an amino acid
\&           and each value is its frequency in all proteins in that
\&           species.
\& Args    : none
.Ve
.Sh "codon_abs_frequency"
.IX Subsection "codon_abs_frequency"
.Vb 6
\& Title   : codon_abs_frequency
\& Usage   : my $freq = $cdtable->codon_abs_frequency('CTG');
\& Purpose : To return the frequency of that codon as a percentage
\&           of all codons in the organism. 
\& Returns : a percentage frequency
\& Args    : a non-ambiguous codon string
.Ve
.Sh "codon_rel_frequency"
.IX Subsection "codon_rel_frequency"
.Vb 7
\& Title   : codon_rel_frequency
\& Usage   : my $freq = $cdtable->codon_rel_frequency('CTG');
\& Purpose : To return the frequency of that codon as a percentage
\&           of codons coding for the same amino acid. E.g., ATG and TGG
\&           would return 100 as those codons are unique.
\& Returns : a percentage frequency
\& Args    : a non-ambiguous codon string
.Ve
.Sh "probable_codons"
.IX Subsection "probable_codons"
.Vb 8
\& Title    : probable_codons
\& Usage    : my $prob_codons = $cd_table->probable_codons(10);
\& Purpose  : to obtain a list of codons for the amino acid above a given
\&            threshold % relative frequency
\& Returns  : A reference to a hash where keys are 1 letter amino acid  codes
\&            and values are references to arrays of codons whose frequency
\&            is above the threshold.
\& Arguments: a minimum threshold frequency
.Ve
.Sh "codon_count"
.IX Subsection "codon_count"
.Vb 6
\& Title   : codon_count
\& Usage   : my $count = $cdtable->codon_count('CTG');
\& Purpose : To obtain the absolute number of the codons in the
\&           organism. 
\& Returns : an integer
\& Args    : a non-ambiguous codon string
.Ve
.Sh "get_coding_gc"
.IX Subsection "get_coding_gc"
.Vb 7
\& Title   : get_coding_gc
\& Usage   : my $count = $cdtable->get_coding_gc(1);
\& Purpose : To return the percentage GC composition for the organism at
\&           codon positions 1,2 or 3, or an average for all coding sequence
\&          ('all').
\& Returns : a number (%-age GC content) or 0 if these fields are undefined
\& Args    : 1,2,3 or 'all'.
.Ve
.Sh "set_coding_gc"
.IX Subsection "set_coding_gc"
.Vb 8
\& Title   : set_coding_gc
\& Usage   : my $count = $cdtable->set_coding_gc(-1=>55.78);
\& Purpose : To set the percentage GC composition for the organism at
\&           codon positions 1,2 or 3, or an average for all coding sequence
\&           ('all').  
\& Returns : void
\& Args    : a hash where the key must be 1,2,3 or 'all' and the value the %age GC
\&           at that codon position..
.Ve
.Sh "species"
.IX Subsection "species"
.Vb 5
\& Title     : species
\& Usage     : my $sp = $cut->species();
\& Purpose   : Get/setter for species name of codon table
\& Returns   : Void or species name string
\& Args      : None or species name string
.Ve
.Sh "genetic_code"
.IX Subsection "genetic_code"
.Vb 5
\& Title     : genetic_code
\& Usage     : my $sp = $cut->genetic_code();
\& Purpose   : Get/setter for genetic_code name of codon table
\& Returns   : Void or genetic_code id, 1 by default
\& Args      : None or genetic_code id, 1 by default if invalid argument.
.Ve
.Sh "cds_count"
.IX Subsection "cds_count"
.Vb 6
\& Title   : cds_count
\& Usage   : my $count = $cdtable->cds_count();
\& Purpose : To retrieve the total number of CDSs used to generate the Codon Table
\&           for that organism. 
\& Returns : an integer
\& Args    : none (if retrieving the value) or an integer( if setting ).
.Ve
.Sh "aa_frequency"
.IX Subsection "aa_frequency"
.Vb 5
\& Title   : aa_frequency
\& Usage   : my $freq = $cdtable->aa_frequency('Leu');
\& Purpose : To retrieve the frequency of an amino acid in the organism
\& Returns : a percentage
\& Args    : a 1 letter or 3 letter string representing the amino acid
.Ve
.Sh "common_codon"
.IX Subsection "common_codon"
.Vb 5
\& Title   : common_codon
\& Usage   : my $freq = $cdtable->common_codon('Leu');
\& Purpose : To retrieve the frequency of the most common codon of that aa
\& Returns : a percentage
\& Args    : a 1 letter or 3 letter string representing the amino acid
.Ve
.Sh "rare_codon"
.IX Subsection "rare_codon"
.Vb 5
\& Title   : rare_codon
\& Usage   : my $freq = $cdtable->rare_codon('Leu');
\& Purpose : To retrieve the frequency of the least common codon of that aa
\& Returns : a percentage
\& Args    : a 1 letter or 3 letter string representing the amino acid
.Ve
