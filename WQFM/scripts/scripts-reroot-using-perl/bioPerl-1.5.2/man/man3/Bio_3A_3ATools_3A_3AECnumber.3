.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::ECnumber 3"
.TH Bio::Tools::ECnumber 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::ECnumber \- representation of EC numbers (Enzyme Classification)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Tools::ECnumber;
.Ve
.PP
.Vb 4
\&  # Creation of ECnumber objects
\&  my $EC1 = Bio::Tools::ECnumber->new( -ec_string => "4.3.2.1" );
\&  my $EC2 = Bio::Tools::ECnumber->new( -ec_string => "EC 1.1.1.1" );
\&  my $EC3 = Bio::Tools::ECnumber->new();
.Ve
.PP
.Vb 2
\&  # Copying
\&  my $EC4 = $EC1->copy();
.Ve
.PP
.Vb 2
\&  # Modification/canonicalization of ECnumber objects
\&  print $EC3->EC_string( "1.01.01.001" ); # Prints "1.1.1.1".
.Ve
.PP
.Vb 4
\&  # Stringify
\&  print $EC3->EC_string();
\&  # or
\&  print $EC3->to_string();
.Ve
.PP
.Vb 9
\&  # Test for equality
\&  # -- Against ECnumber object:
\&  if ( $EC3->is_equal( $EC2 ) ) { # Prints "equal".
\&      print "equal";
\&  }
\&  # -- Against string representation of EC number:
\&  if ( ! $EC3->is_equal( "1.1.1.-" ) ) { # Prints "not equal".
\&      print "not equal";
\&  }
.Ve
.PP
.Vb 10
\&  # Test for membership
\&  my $EC5 = Bio::Tools::ECnumber->new( -ec_string => "4.3.2.-" ); 
\&  # -- Against ECnumber object.
\&  if ( $EC1->is_member( $EC5 ) ) { # Prints "member".
\&      print "member"; 
\&  }
\&  # -- Against string representation of EC number.
\&  if ( ! $EC1->is_member( "4.3.1.-" ) ) { # Prints "not member".
\&      print "not member";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tools::ECnumber is a representation of \s-1EC\s0 numbers, 
the numerical heirarchy for Enzyme Classification.
.PP
See <http://www.chem.qmul.ac.uk/iubmb/enzyme/> for more details.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek@gnf.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://www.genetics.wustl.edu/eddy/people/zmasek/
.PP
Address: 
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 14
\& Title   : new
\& Usage   : $EC1 = Bio::Tools::ECnumber->new( -ec_string => "4.3.2.1" );
\&           or
\&           $EC2 = Bio::Tools::ECnumber->new( -ec_string => "4.3.2.2",
\&                                             -comment   => "Is EC 4.3.2.2" );
\&           or                      
\&           $EC3 = Bio::Tools::ECnumber->new(); # EC3 is now "-.-.-.-"                      
\& Function: Creates a new ECnumber object.
\&           Parses a EC number from "x.x.x.x", "EC x.x.x.x",
\&           "ECx.x.x.x", or "EC:x.x.x.x";
\&           x being either a positive integer or a "-".
\& Returns : A new ECnumber object.
\& Args    : A string representing a EC number, e.g. "4.3.2.1"
\&           or "EC 4.3.2.1" or "1.-.-.-".
.Ve
.Sh "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $EC1->init(); # EC1 is now "-.-.-.-"    
\& Function: Initializes this ECnumber to default values.
\& Returns : 
\& Args    :
.Ve
.Sh "copy"
.IX Subsection "copy"
.Vb 6
\& Title   : copy()
\& Usage   : $EC2 = $EC1->copy();
\& Function: Creates a new ECnumber object which is an exact copy
\&           of this ECnumber.
\& Returns : A copy of this ECnumber.
\& Args    :
.Ve
.Sh "EC_string"
.IX Subsection "EC_string"
.Vb 10
\& Title   : EC_string
\& Usage   : $EC3->EC_string( "1.1.1.-" );
\&           or
\&           print $EC3->EC_string();
\& Function: Set/get for string representations of EC numbers.
\&           Parses a EC number from "x.x.x.x", "EC x.x.x.x",
\&           "ECx.x.x.x", or "EC:x.x.x.x";
\&           x being either a positive integer or a "-".
\& Returns : A string representations of a EC number.
\& Args    : A string representations of a EC number.
.Ve
.Sh "to_string"
.IX Subsection "to_string"
.Vb 6
\& Title   : to_string()
\& Usage   : print $EC3->to_string();
\& Function: To string method for EC numbers
\&           (equals the "get" functionality of "EC_string").
\& Returns : A string representations of a EC number.
\& Args    :
.Ve
.Sh "is_equal"
.IX Subsection "is_equal"
.Vb 8
\& Title   : is_equal
\& Usage   : if ( $EC3->is_equal( $EC2 ) )
\&           or
\&           if ( $EC3->is_equal( "1.1.1.-" ) )
\& Function: Checks whether this ECnumber is equal to the argument
\&           EC number (please note: "1.1.1.1" != "1.1.1.-").
\& Returns : True (1) or false (0).
\& Args    : A ECnumber object or a string representation of a EC number.
.Ve
.Sh "is_member"
.IX Subsection "is_member"
.Vb 9
\& Title   : is_member
\& Usage   : if ( $EC1->is_member( $EC5 ) )
\&           or
\&           if ( $EC1->is_member( "4.3.-.-" ) )
\& Function: Checks whether this ECnumber is a member of the (incomplete)
\&           argument EC number (e.g. "1.1.1.1" is a member of "1.1.1.-"
\&           but not of "1.1.1.2").
\& Returns : True (1) or false (0).
\& Args    : A ECnumber object or a string representation of a EC number.
.Ve
.Sh "enzyme_class"
.IX Subsection "enzyme_class"
.Vb 7
\& Title   : enzyme_class
\& Usage   : $EC1->enzyme_class( 1 );
\&           or 
\&           print $EC1->enzyme_class(); 
\& Function: Set/get for the enzyme class number of ECnumbers.
\& Returns : The enzyme class number of this ECnumber.
\& Args    : A positive integer or "-".
.Ve
.Sh "sub_class"
.IX Subsection "sub_class"
.Vb 7
\& Title   : sub_class
\& Usage   : $EC1->sub_class( 4 );
\&           or 
\&           print $EC1->sub_class(); 
\& Function: Set/get for the enzyme sub class number of ECnumbers.
\& Returns : The enzyme sub class number of this ECnumber.
\& Args    : A positive integer or "-".
.Ve
.Sh "sub_sub_class"
.IX Subsection "sub_sub_class"
.Vb 7
\& Title   : sub_sub_class
\& Usage   : $EC1->sub_sub_class( 12 );
\&           or 
\&           print $EC1->sub_sub_class(); 
\& Function: Set/get for the enzyme sub sub class number of ECnumbers.
\& Returns : The enzyme sub sub class number of this ECnumber.
\& Args    : A positive integer or "-".
.Ve
.Sh "serial_number"
.IX Subsection "serial_number"
.Vb 7
\& Title   : serial_number
\& Usage   : $EC1->serial_number( 482 );
\&           or 
\&           print $EC1->serial_number(); 
\& Function: Set/get for the serial number of ECnumbers.
\& Returns : The serial number of this ECnumber.
\& Args    : A positive integer or "-".
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $EC1->comment( "deprecated" );
\&           or 
\&           print $EC1->comment();
\& Function: Set/get for a arbitrary comment.
\& Returns : A comment [scalar].
\& Args    : A comment [scalar].
.Ve
