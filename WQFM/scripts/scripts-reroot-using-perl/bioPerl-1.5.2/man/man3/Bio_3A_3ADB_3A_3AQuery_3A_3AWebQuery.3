.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Query::WebQuery 3"
.TH Bio::DB::Query::WebQuery 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::Query::WebQuery \- Helper class for web\-based sequence queryies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Do not use this class directly.  See Bio::DB::QueryI and one of
\&  # the implementor classes (such as Bio::DB::GenBankQuery) for
\&  # information.
.Ve
.PP
See Bio::DB::QueryI, Bio::DB::GenBankQuery
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Do not use this class directly.  See Bio::DB::QueryI and one of the
implementor classes (such as Bio::DB::Query::GenBank) for information.
.PP
Those writing subclasses must define \fI_get_params()\fR and
\&\fI_parse_response()\fR, and possibly override \fI_request_method()\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email lstein@cshl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $db = Bio::DB::WebQuery->new(@args)
\& Function: create new query object
\& Returns : new query object
\& Args    : -db       database (e.g. 'protein')
\&           -ids      array ref of ids (overrides query)
\&           -verbose  turn on verbose debugging
.Ve
.PP
This method creates a new query object.  Typically you will specify a
\&\-db and a \-query argument.  The value of \-query is a database-specific
string.
.PP
If you provide an array reference of IDs in \-ids, the query will be
ignored and the list of IDs will be used when the query is passed to
the database.
.Sh "ua"
.IX Subsection "ua"
.Vb 6
\& Title   : ua
\& Usage   : my $ua = $self->ua or 
\&           $self->ua($ua)
\& Function: Get/Set a LWP::UserAgent for use
\& Returns : reference to LWP::UserAgent Object
\& Args    : $ua - must be a LWP::UserAgent
.Ve
.Sh "proxy"
.IX Subsection "proxy"
.Vb 9
\& Title   : proxy
\& Usage   : $httpproxy = $db->proxy('http')  or 
\&           $db->proxy(['http','ftp'], 'http://myproxy' )
\& Function: Get/Set a proxy for use of proxy
\& Returns : a string indicating the proxy
\& Args    : $protocol : an array ref of the protocol(s) to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.Sh "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass 
\& Args    : Array or user/pass
.Ve
.Sh "ids"
.IX Subsection "ids"
.Vb 5
\& Title   : ids
\& Usage   : @ids = $db->ids([@ids])
\& Function: get/set matching ids
\& Returns : array of sequence ids
\& Args    : (optional) array ref with new set of ids
.Ve
.Sh "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : $query = $db->query([$query])
\& Function: get/set query string
\& Returns : string
\& Args    : (optional) new query string
.Ve
.Sh "_fetch_ids"
.IX Subsection "_fetch_ids"
.Vb 5
\& Title   : _fetch_ids
\& Usage   : @ids = $db->_fetch_ids
\& Function: run query, get ids
\& Returns : array of sequence ids
\& Args    : none
.Ve
.Sh "_run_query"
.IX Subsection "_run_query"
.Vb 5
\& Title   : _run_query
\& Usage   : $success = $db->_run_query
\& Function: run query, parse results
\& Returns : true if successful
\& Args    : none
.Ve
.Sh "_truncated"
.IX Subsection "_truncated"
.Vb 5
\& Title   : _truncated
\& Usage   : $flag = $db->_truncated([$newflag])
\& Function: get/set truncation flag
\& Returns : boolean
\& Args    : new flag
.Ve
.PP
Some databases will truncate output unless explicitly asked
not to.  This flag allows a \*(L"two probe\*(R" attempt.
.Sh "_get_request"
.IX Subsection "_get_request"
.Vb 5
\& Title   : _get_request
\& Usage   : $http_request = $db->_get_request(@params)
\& Function: create an HTTP::Request with indicated parameters
\& Returns : HTTP::Request object
\& Args    : CGI parameter list
.Ve
.Sh "_parse_response"
.IX Subsection "_parse_response"
.Vb 6
\& Title   : _parse_response
\& Usage   : $db->_parse_response($content)
\& Function: parse out response
\& Returns : empty
\& Args    : none
\& Throws  : 'unparseable output exception'
.Ve
.PP
\&\s-1NOTE:\s0 This method must be implemented by subclass.
.Sh "_request_parameters"
.IX Subsection "_request_parameters"
.Vb 5
\& Title   : _request_parameters
\& Usage   : ($method,$base,@params = $db->_request_parameters
\& Function: return information needed to construct the request
\& Returns : list of method, url base and key=>value pairs
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 This method must be implemented by subclass.
