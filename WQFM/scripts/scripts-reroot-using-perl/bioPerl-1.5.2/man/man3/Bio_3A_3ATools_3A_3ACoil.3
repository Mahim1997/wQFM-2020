.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Coil 3"
.TH Bio::Tools::Coil 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Coil \- parser for Coil output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& use Bio::Tools::Coil
\& my $parser = new Bio::Tools::Coil();
\& while( my $sp_feat = $parser->next_result($file) ) {
\&       #do something
\&       #eg
\&       push @sp_feat, $sp_feat;
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& Parser for Coil output
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
.Vb 3
\& User feedback is an integral part of the evolution of this and other
\& Bioperl modules. Send your comments and suggestions preferably to
\& the Bioperl mailing list.  Your participation is much appreciated.
.Ve
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\& Based on the EnsEMBL module Bio::EnsEMBL::Pipeline::Runnable::Protein::Coil
\& originally written by Marc Sohrmann (ms2@sanger.ac.uk)
\& Written in BioPipe by Balamurugan Kumarasamy <savikalpa@fugu-sg.org>
\& Cared for by the Fugu Informatics team (fuguteam@fugu-sg.org)
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
.Vb 2
\& The rest of the documentation details each of the object methods.
\& Internal methods are usually preceded with a _
.Ve
.Sh "parse_results"
.IX Subsection "parse_results"
.Vb 6
\& Title   : parse_results
\& Usage   : obj->parse_results
\& Function: Parses the coil output. Automatically called by
\&           next_result() if not yet done.
\& Example :
\& Returns :
.Ve
.Sh "next_result"
.IX Subsection "next_result"
.Vb 7
\& Title   : next_result
\& Usage   : while($feat = $coil->next_result($file)) {
\&                  # do something
\&           }
\& Function: Returns the next protein feature of the coil output file
\& Returns : 
\& Args    :
.Ve
.Sh "_result"
.IX Subsection "_result"
.Vb 5
\& Title   : _result
\& Usage   : $feat = $obj->_result()
\& Function: internal
\& Example :
\& Returns :
.Ve
.Sh "_add_prediction"
.IX Subsection "_add_prediction"
.Vb 5
\& Title   : _add_prediction()
\& Usage   : $obj->_add_prediction($feat)
\& Function: internal
\& Example :
\& Returns :
.Ve
.Sh "_predictions_parsed"
.IX Subsection "_predictions_parsed"
.Vb 5
\& Title   : _predictions_parsed
\& Usage   : $obj->_predictions_parsed
\& Function: internal
\& Example :
\& Returns : TRUE or FALSE
.Ve
.Sh "create_feature"
.IX Subsection "create_feature"
.Vb 5
\& Title   : create_feature
\& Usage   : obj->create_feature(\e%feature)
\& Function: Internal(not to be used directly)
\& Returns :
\& Args    :
.Ve
.Sh "_read_fasta"
.IX Subsection "_read_fasta"
.Vb 5
\& Title   : _read_fasta
\& Usage   : obj->_read_fasta($file)
\& Function: Internal(not to be used directly)
\& Returns :
\& Args    :
.Ve
