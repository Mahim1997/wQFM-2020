.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Index::Swissprot 3"
.TH Bio::Index::Swissprot 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Index::Swissprot \- Interface for indexing one or more
Swissprot files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Make an index for one or more Swissprot files:
.PP
.Vb 2
\&    use Bio::Index::Swissprot;
\&    use strict;
.Ve
.PP
.Vb 5
\&    my $index_file_name = shift;
\&    my $inx = Bio::Index::Swissprot->new(
\&                           -filename => $index_file_name,
\&                                                    -write_flag => 1);
\&    $inx->make_index(@ARGV);
.Ve
.PP
Print out several sequences present in the index in Genbank format:
.PP
.Vb 3
\&    use Bio::Index::Swissprot;
\&    use Bio::SeqIO;
\&    use strict;
.Ve
.PP
.Vb 4
\&    my $out = Bio::SeqIO->new( -format => 'genbank',
\&                               -fh => \e*STDOUT );
\&    my $index_file_name = shift;
\&    my $inx = Bio::Index::Swissprot->new(-filename => $index_file_name);
.Ve
.PP
.Vb 4
\&    foreach my $id (@ARGV) {
\&        my $seq = $inx->fetch($id); # Returns a Bio::Seq object
\&        $out->write_seq($seq);
\&    }
.Ve
.PP
.Vb 4
\&    # alternatively
\&    my ($id, $acc);
\&    my $seq1 = $inx->get_Seq_by_id($id);
\&    my $seq2 = $inx->get_Seq_by_acc($acc);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
By default the index that is created uses the \s-1AC\s0 and \s-1ID\s0 identifiers
as keys. This module inherits functions for managing dbm files from 
Bio::Index::Abstract.pm, and provides the basic functionality 
for indexing Swissprot files and retrieving Sequence objects from 
them. For best results 'use strict'.
.PP
You can also set or customize the unique key used to retrieve by 
writing your own function and calling the \fIid_parser()\fR method.
For example:
.PP
.Vb 3
\&   $inx->id_parser(\e&get_id);
\&   # make the index
\&   $inx->make_index($index_file_name);
.Ve
.PP
.Vb 6
\&   # here is where the retrieval key is specified
\&   sub get_id {
\&      my $line = shift;
\&      $line =~ /^KW\es+([A-Z]+)/i;
\&      $1;
\&   }
.Ve
.SH "FEED_BACK"
.IX Header "FEED_BACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Also lorenz@ist.org, bosborne at alum.mit.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.Sh "_index_file"
.IX Subsection "_index_file"
.Vb 8
\&  Title   : _index_file
\&  Usage   : $index->_index_file( $file_name, $i )
\&  Function: Specialist function to index Swissprot format files.
\&            Is provided with a filename and an integer
\&            by make_index in its SUPER class.
\&  Example : 
\&  Returns : 
\&  Args    :
.Ve
.Sh "id_parser"
.IX Subsection "id_parser"
.Vb 10
\&  Title   : id_parser
\&  Usage   : $index->id_parser( CODE )
\&  Function: Stores or returns the code used by record_id to
\&            parse the ID for record from a string.
\&            Returns \e&default_id_parser (see below) if not
\&            set. An entry will be added to
\&            the index for each string in the list returned.
\&  Example : $index->id_parser( \e&my_id_parser )
\&  Returns : ref to CODE if called without arguments
\&  Args    : CODE
.Ve
.Sh "default_id_parser"
.IX Subsection "default_id_parser"
.Vb 7
\&  Title   : default_id_parser
\&  Usage   : $id = default_id_parser( $line )
\&  Function: The default parser for Swissprot.pm
\&            Returns $1 from applying the regexp /^ID\es*(\eS+)/
\&            or /^AC\es+([A-Z0-9]+)/ to the current line.
\&  Returns : ID string
\&  Args    : a line string
.Ve
.Sh "_file_format"
.IX Subsection "_file_format"
.Vb 6
\& Title   : _file_format
\& Usage   : Internal function for indexing system
\& Function: Provides file format for this database
\& Example :
\& Returns :
\& Args    :
.Ve
