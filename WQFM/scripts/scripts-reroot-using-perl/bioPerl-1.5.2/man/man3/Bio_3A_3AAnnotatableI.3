.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::AnnotatableI 3"
.TH Bio::AnnotatableI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::AnnotatableI \- the base interface an annotatable object must implement
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&    use Bio::SeqIO;
\&    # get an annotatable object somehow: for example, Bio::SeqI objects
\&    # are annotatable
\&    my $seqio = Bio::SeqIO->new(-fh => \e*STDIN, -format => 'genbank');
\&    while (my $seq = $seqio->next_seq()) {
\&        # $seq is-a Bio::AnnotatableI, hence:
\&        my $ann_coll = $seq->annotation();
\&        # $ann_coll is-a Bio::AnnotationCollectionI, hence:
\&        my @all_anns = $ann_coll->get_Annotations();
\&        # do something with the annotation objects
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base interface that all annotatable objects must implement. A 
good example is Bio::Seq which is an AnnotableI object.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\& Hilmar Lapp E<lt>hlapp@gmx.netE<gt>
\& Allen Day E<lt>allenday@ucla.eduE<gt>
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "annotation"
.IX Subsection "annotation"
.Vb 8
\& Title   : annotation
\& Usage   : $obj->annotation($newval)
\& Function: Get the annotation collection for this annotatable object.
\& Example : 
\& Returns : a Bio::AnnotationCollectionI implementing object, or undef
\& Args    : on set, new value (a Bio::AnnotationCollectionI
\&           implementing object, optional) (an implementation may not
\&           support changing the annotation collection)
.Ve
.PP
See Bio::AnnotationCollectionI
.ie n .SH """*_tag_*"" METHODS"
.el .SH "``*_tag_*'' METHODS"
.IX Header "*_tag_* METHODS"
The methods below allow mapping of the old \*(L"\fIget_tag_values()\fR\*(R"\-style
annotation access to Bio::AnnotationCollectionI.  These need not be
implemented in a Bio::AnnotationCollectionI compliant class, as they
are built on top of the methods.
.PP
\&\fB\s-1DEPRECATED\s0\fR: \s-1DO\s0 \s-1NOT\s0 \s-1USE\s0 \s-1THESE\s0 \s-1FOR\s0 \s-1FUTURE\s0 \s-1DEVELOPMENT\s0.
.Sh "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Usage   : $count = $obj->has_tag($tag)
\& Function: returns the number of annotations corresponding to $tag
\& Returns : an integer
\& Args    : tag name
\& Note    : DEPRECATED
.Ve
.PP
Use \*(L"get_Annotations\*(R" instead.
.Sh "add_tag_value"
.IX Subsection "add_tag_value"
.Vb 4
\& Usage   : See add_Annotation
\& Function:
\& Returns : 
\& Args    : DEPRECATED
.Ve
.PP
See Bio::AnnotationCollectionI::add_Annotation
.Sh "get_Annotations"
.IX Subsection "get_Annotations"
.Vb 8
\& Usage   : my $parent   = $obj->get_Annotations('Parent');
\&           my @parents = $obj->get_Annotations('Parent');
\& Function: a wrapper around Bio::Annotation::Collection::get_Annotations().
\& Returns : returns annotations as
\&           Bio::Annotation::Collection::get_Annotations() does, but
\&           additionally returns a single scalar in scalar context
\&           instead of list context so that if an annotation tag
\&           contains only a single value, you can do:
.Ve
.PP
.Vb 1
\&           $parent = $feature->get_Annotations('Parent');
.Ve
.PP
.Vb 1
\&           instead of:
.Ve
.PP
.Vb 1
\&           ($parent) = ($feature->get_Annotations('Parent'))[0];
.Ve
.PP
.Vb 2
\&           if the 'Parent' tag has multiple values and is called in a
\&           scalar context, the number of annotations is returned.
.Ve
.PP
.Vb 1
\& Args    : an annotation tag name.
.Ve
.Sh "get_tag_values"
.IX Subsection "get_tag_values"
.Vb 5
\& Usage   : @annotations = $obj->get_tag_values($tag)
\& Function: returns annotations corresponding to $tag
\& Returns : a list of scalars
\& Args    : tag name
\& Note    : DEPRECATED
.Ve
.PP
This method is essentially \*(L"get_Annotations\*(R", use it instead.
.Sh "get_tagset_values"
.IX Subsection "get_tagset_values"
.Vb 7
\& Usage   : @annotations = $obj->get_tagset_values($tag1,$tag2)
\& Function: returns annotations corresponding to a list of tags.
\&           this is a convenience method equivalent to multiple calls
\&           to get_tag_values with each tag in the list.
\& Returns : a list of Bio::AnnotationI objects.
\& Args    : a list of tag names
\& Note    : DEPRECATED
.Ve
.PP
See Bio::AnnotationCollectionI::get_Annotations
.Sh "get_all_tags"
.IX Subsection "get_all_tags"
.Vb 5
\& Usage   : @tags = $obj->get_all_tags()
\& Function: returns a list of annotation tag names.
\& Returns : a list of tag names
\& Args    : none
\& Note    : DEPRECATED
.Ve
.PP
See Bio::AnnotationCollectionI::get_all_annotation_keys
.Sh "remove_tag"
.IX Subsection "remove_tag"
.Vb 7
\& Usage   : See remove_Annotations().
\& Function:
\& Returns : 
\& Args    : DEPRECATED
\& Note    : Contrary to what the name suggests, this method removes
\&           all annotations corresponding to $tag, not just a
\&           single anntoation.
.Ve
.PP
See Bio::AnnotationCollectionI::remove_Annotations
