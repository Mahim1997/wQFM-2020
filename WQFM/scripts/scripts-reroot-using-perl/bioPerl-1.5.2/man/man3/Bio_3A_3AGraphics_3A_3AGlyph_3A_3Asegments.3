.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::Glyph::segments 3"
.TH Bio::Graphics::Glyph::segments 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graphics::Glyph::segments \- The "segments" glyph
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  See L<Bio::Graphics::Panel> and L<Bio::Graphics::Glyph>.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This glyph is used for drawing features that consist of discontinuous
segments.  Unlike \*(L"graded_segments\*(R" or \*(L"alignment\*(R", the segments are a
uniform color and not dependent on the score of the segment.
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
This module overrides the \fImaxdepth()\fR method to return 1 unless
explicitly specified by the \-maxdepth option. This means that modules
inheriting from segments will only be presented with one level of
subfeatures. Override the \fImaxdepth()\fR method to get more levels.
.Sh "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
The following options are standard among all Glyphs.  See
Bio::Graphics::Glyph for a full explanation.
.PP
.Vb 2
\&  Option      Description                      Default
\&  ------      -----------                      -------
.Ve
.PP
.Vb 1
\&  -fgcolor      Foreground color               black
.Ve
.PP
.Vb 1
\&  -outlinecolor Synonym for -fgcolor
.Ve
.PP
.Vb 1
\&  -bgcolor      Background color               turquoise
.Ve
.PP
.Vb 1
\&  -fillcolor    Synonym for -bgcolor
.Ve
.PP
.Vb 1
\&  -linewidth    Line width                     1
.Ve
.PP
.Vb 1
\&  -height       Height of glyph                10
.Ve
.PP
.Vb 1
\&  -font         Glyph font                     gdSmallFont
.Ve
.PP
.Vb 1
\&  -connector    Connector type                 0 (false)
.Ve
.PP
.Vb 2
\&  -connector_color
\&                Connector color                black
.Ve
.PP
.Vb 1
\&  -label        Whether to draw a label        0 (false)
.Ve
.PP
.Vb 1
\&  -description  Whether to draw a description  0 (false)
.Ve
.PP
.Vb 2
\&  -strand_arrow Whether to indicate            0 (false)
\&                 strandedness
.Ve
.PP
.Vb 1
\&  -hilite       Highlight color                undef (no color)
.Ve
.PP
In addition, the following glyph-specific options are recognized:
.PP
.Vb 3
\&  -draw_dna     If true, draw the dna residues        0 (false)
\&                 when magnification level
\&                 allows.
.Ve
.PP
.Vb 4
\&  -draw_target  If true, draw the dna residues        0 (false)
\&                 of the TARGET sequence when
\&                 magnification level allows.
\&                 See "Displaying Alignments".
.Ve
.PP
.Vb 4
\&  -draw_protein_target  If true, draw the protein residues        0 (false)
\&                 of the TARGET sequence when
\&                 magnification level allows.
\&                 See "Displaying Alignments".
.Ve
.PP
.Vb 6
\&  -ragged_extra When combined with -draw_target,      0 (false)
\&                draw extra bases beyond the end
\&                of the alignment. The value is
\&                the maximum number of extra
\&                bases.
\&                See "Displaying Alignments".
.Ve
.PP
.Vb 2
\&  -ragged_start  Deprecated option.  Use
\&                 -ragged_extra instead
.Ve
.PP
.Vb 4
\&  -show_mismatch When combined with -draw_target,     0 (false)
\&                 highlights mismatched bases in
\&                 the mismatch color.  
\&                 See "Displaying Alignments".
.Ve
.PP
.Vb 1
\&  -mismatch_color The mismatch color to use           'lightgrey'
.Ve
.PP
.Vb 4
\&  -true_target   Show the target DNA in its native    0 (false)
\&                 (plus strand) orientation, even if
\&                 the alignment is to the minus strand.
\&                 See "Displaying Alignments".
.Ve
.PP
.Vb 3
\&  -realign       Attempt to realign sequences at      0 (false)
\&                 high mag to account for indels.
\&                 See "Displaying Alignments".
.Ve
.PP
If the \-draw_dna flag is set to a true value, then when the
magnification is high enough, the underlying \s-1DNA\s0 sequence will be
shown.  This option is mutually exclusive with \-draw_target. See
Bio::Graphics::Glyph::generic for more details.
.PP
The \-draw_target, \-ragged_extra, and \-show_mismatch options only work
with seqfeatures that implement the \fIhit()\fR method
(Bio::SeqFeature::SimilarityPair). \-draw_target will cause the \s-1DNA\s0 of
the hit sequence to be displayed when the magnification is high enough
to allow individual bases to be drawn. The \-ragged_extra option will
cause the alignment to be extended at the extreme ends by the
indicated number of bases, and is useful for looking for polyAs and
cloning sites at the ends of ESTs and cDNAs. \-show_mismatch will cause
mismatched bases to be highlighted in with the color indicated by
\&\-mismatch_color (default lightgray).
.PP
At high magnifications, minus strand matches will automatically be
shown as their reverse complement (so that the match has the same
sequence as the plus strand of the source dna).  If you prefer to see
the actual sequence of the target as it appears on the minus strand,
then set \-true_target to true.
.PP
Note that \-true_target has the opposite meaning from
\&\-canonical_strand, which is used in conjunction with \-draw_dna to draw
minus strand features as if they appear on the plus strand.
.Sh "Displaying Alignments"
.IX Subsection "Displaying Alignments"
When the \fB\-draw_target\fR option is true, this glyph can be used to
display nucleotide alignments such as \s-1BLAST\s0, \s-1FASTA\s0 or \s-1BLAT\s0
similarities.  At high magnification, this glyph will attempt to show
how the sequence of the source (query) \s-1DNA\s0 matches the sequence of the
target (the hit).  For this to work, the feature must implement the
\&\fIhit()\fR method, and both the source and the target \s-1DNA\s0 must be
available.  If you pass the glyph a series of
Bio::SeqFeature::SimilarityPair objects, then these criteria will be
satisified.
.PP
Without additional help, this glyph cannot display gapped alignments
correctly.  To display gapped alignments, you can use the
Bio::Graphics::Brower::Realign module, which is part of the Generic
Genome Browser package (http://www.gmod.org).  If you wish to install
the Realign module and not the rest of the package, here is the
recipe:
.PP
.Vb 4
\&  cd Generic-Genome-Browser-1.XX
\&  perl Makefile.PL DO_XS=1
\&  make
\&  make install_site
.Ve
.PP
If possible, build the gbrowse package with the DO_XS=1 option.  This
compiles a C\-based \s-1DP\s0 algorithm that both gbrowse and gbrowse_details
will use if they can.  If \s-1DO_XS\s0 is not set, then the scripts will use
a Perl-based version of the algorithm that is 10\-100 times slower.
.PP
The display of alignments can be tweaked using the \-ragged_extra,
\&\-show_mismatch, \-true_target, and \-realign options.  See the options
section for further details.
.PP
There is also a \fB\-draw_protein_target\fR option, which is designed for
protein to nucleotide alignments. It draws the target sequence every
third base pair and is supposed to align correctly with the forward
and reverse translation glyphs. This option is experimental at the
moment, and may not work correctly, to use with care.
.SH "BUGS"
.IX Header "BUGS"
Please report them.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::Graphics::Panel,
Bio::Graphics::Glyph,
Bio::Graphics::Glyph::arrow,
Bio::Graphics::Glyph::cds,
Bio::Graphics::Glyph::crossbox,
Bio::Graphics::Glyph::diamond,
Bio::Graphics::Glyph::dna,
Bio::Graphics::Glyph::dot,
Bio::Graphics::Glyph::ellipse,
Bio::Graphics::Glyph::extending_arrow,
Bio::Graphics::Glyph::generic,
Bio::Graphics::Glyph::graded_segments,
Bio::Graphics::Glyph::heterogeneous_segments,
Bio::Graphics::Glyph::line,
Bio::Graphics::Glyph::pinsertion,
Bio::Graphics::Glyph::primers,
Bio::Graphics::Glyph::rndrect,
Bio::Graphics::Glyph::segments,
Bio::Graphics::Glyph::ruler_arrow,
Bio::Graphics::Glyph::toomany,
Bio::Graphics::Glyph::transcript,
Bio::Graphics::Glyph::transcript2,
Bio::Graphics::Glyph::translation,
Bio::Graphics::Glyph::triangle,
Bio::DB::GFF,
Bio::SeqI,
Bio::SeqFeatureI,
Bio::Das,
\&\s-1GD\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
