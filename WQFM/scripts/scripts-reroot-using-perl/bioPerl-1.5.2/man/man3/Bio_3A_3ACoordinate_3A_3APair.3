.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Coordinate::Pair 3"
.TH Bio::Coordinate::Pair 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Coordinate::Pair \- Continuous match between two coordinate sets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Location::Simple;
\&  use Bio::Coordinate::Pair;
.Ve
.PP
.Vb 10
\&  my $match1 = Bio::Location::Simple->new 
\&      (-seq_id => 'propeptide', -start => 21, -end => 40, -strand=>1 );
\&  my $match2 = Bio::Location::Simple->new
\&      (-seq_id => 'peptide', -start => 1, -end => 20, -strand=>1 );
\&  my $pair = Bio::Coordinate::Pair->new(-in => $match1,
\&                                        -out => $match2
\&                                        );
\&  # location to match
\&  $pos = Bio::Location::Simple->new 
\&      (-start => 25, -end => 25, -strand=> -1 );
.Ve
.PP
.Vb 11
\&  # results are in a Bio::Coordinate::Result
\&  # they can be Matches and Gaps; are  Bio::LocationIs
\&  $res = $pair->map($pos);
\&  $res->isa('Bio::Coordinate::Result');
\&  $res->each_match == 1;
\&  $res->each_gap == 0;
\&  $res->each_Location == 1;
\&  $res->match->start == 5;
\&  $res->match->end == 5;
\&  $res->match->strand == -1;
\&  $res->match->seq_id eq 'peptide';
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class represents a one continuous match between two coordinate
systems represented by Bio::Location::Simple objects. The relationship
is directed and reversible. It implements methods to ensure internal
consistency, and map continuous and split locations from one
coordinate system to another.
.PP
The \fImap()\fR method returns Bio::Coordinate::Results with
Bio::Coordinate::Result::Gaps. The calling code have to deal (process
or ignore) them.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "in"
.IX Subsection "in"
.Vb 6
\& Title   : in
\& Usage   : $obj->in('peptide');
\& Function: Set and read the input coordinate system.
\& Example :
\& Returns : value of input system
\& Args    : new value (optional), Bio::LocationI
.Ve
.Sh "out"
.IX Subsection "out"
.Vb 6
\& Title   : out
\& Usage   : $obj->out('peptide');
\& Function: Set and read the output coordinate system.
\& Example :
\& Returns : value of output system
\& Args    : new value (optional), Bio::LocationI
.Ve
.Sh "swap"
.IX Subsection "swap"
.Vb 6
\& Title   : swap
\& Usage   : $obj->swap;
\& Function: Swap the direction of mapping; input <-> output
\& Example :
\& Returns : 1
\& Args    :
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 6
\& Title   : strand
\& Usage   : $obj->strand;
\& Function: Get strand value for the pair
\& Example :
\& Returns : ( 1 | 0 | -1 )
\& Args    :
.Ve
.Sh "test"
.IX Subsection "test"
.Vb 6
\& Title   : test
\& Usage   : $obj->test;
\& Function: test that both components are of the same length
\& Example :
\& Returns : ( 1 | undef )
\& Args    :
.Ve
.Sh "map"
.IX Subsection "map"
.Vb 7
\& Title   : map
\& Usage   : $newpos = $obj->map($pos);
\& Function: Map the location from the input coordinate system
\&           to a new value in the output coordinate system.
\& Example :
\& Returns : new Bio::LocationI in the output coordinate system or undef
\& Args    : Bio::LocationI object
.Ve
.Sh "_map"
.IX Subsection "_map"
.Vb 8
\& Title   : _map
\& Usage   : $newpos = $obj->_map($simpleloc);
\& Function: Internal method that does the actual mapping. Called
\&           multiple times by map() if the location to be mapped is a
\&           split location
\& Example :
\& Returns : new location in the output coordinate system or undef
\& Args    : Bio::Location::Simple
.Ve
