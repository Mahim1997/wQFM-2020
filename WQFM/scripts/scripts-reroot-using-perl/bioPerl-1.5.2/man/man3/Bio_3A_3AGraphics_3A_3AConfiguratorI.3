.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Graphics::ConfiguratorI 3"
.TH Bio::Graphics::ConfiguratorI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Graphics::ConfiguratorI \- A sectioned map of configuration
options (a map of maps), with a default section.  Intended to augment
existing tag\->value semantics (ie. of Bio::AnnotationCollectionI) for
object\-representation information (eg. foreground color), and for
general interface preferences (eg. image width in gbrowse).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # get a ConfiguratorI somehow
\&    my $fg_color = $configurator->get('fgcolor');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object contains various configuration parameters.  It is divided
up into sections and tags.  This is essentially a multi-level map
(section\->tag\->value).  There is also the concept of a default
section which is referenced when no section is passed to the
ConfiguratorI methods.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Robert Hubley"
.IX Header "AUTHOR - Robert Hubley"
Email rhubley@systemsbiology.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Paul Edlefsen, pedlefsen@systemsbiology.org
Lincoln Stein, lstein@cshl.org
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "get_sections"
.IX Subsection "get_sections"
.Vb 6
\& Title   : get_sections
\& Usage   : my @values = $configurator->get_sections();
\& Function: Returns a list of the valid sections except
\&           the default or undef.
\& Returns : A list of the sections which can be queried.
\& Args    : (optional section as string, tag as string)
.Ve
.Sh "get_tags"
.IX Subsection "get_tags"
.Vb 9
\& Title   : get_tags
\& Usage   : my @values = $configurator->get_tags();
\&           or
\&           my @values = $configurator->get_tags('dna');
\& Function: Returns a list of tags for a given section
\&           or only the default tags section if no section
\&           is given.
\& Returns : A scalar list of tags
\& Args    :
.Ve
.Sh "get"
.IX Subsection "get"
.Vb 9
\& Title   : get
\& Usage   : my $value = $configurator->get('height');
\&           or
\&           my $value = $configurator->get('dna','height');
\& Function: Returns a tag value from a configurator from the
\&           either the default "_general" section or from
\&           a specified section or undef.
\& Returns : A scalar value for the tag
\& Args    : (optional section as string, tag as string)
.Ve
.Sh "set"
.IX Subsection "set"
.Vb 7
\& Title   : set
\& Usage   : $configurator->set('fgcolor','chartreuse');
\&           or
\&           $configurator->set('EST','fgcolor','chartreuse');
\& Function: Set a value for a tag
\& Returns : The old value of the tag
\& Args    : (optional section as string, tag as string, value as scalar)
.Ve
.Sh "get_and_eval"
.IX Subsection "get_and_eval"
.Vb 11
\& Title   : get_and_eval
\& Usage   : my $value = $configurator->get_and_eval('height');
\&           or
\&           my $value = $configurator->get_and_eval('dna','height');
\& Function: This works like get() except that it is
\&           also able to evaluate code references.  These are
\&           options whose values begin with the characters
\&           "sub {".  In this case the value will be passed to
\&           an eval() and the resulting codereference returned.
\& Returns : A value of the tag or undef.
\& Args    : (optional section as string, tag as string)
.Ve
