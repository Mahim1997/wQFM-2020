.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::OntologyIO::dagflat 3"
.TH Bio::OntologyIO::dagflat 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::OntologyIO::dagflat \- a base class parser for GO flat\-file type formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::OntologyIO;
.Ve
.PP
.Vb 8
\&  # do not use directly -- use via Bio::OntologyIO
\&  # e.g., the GO parser is a simple extension of this class
\&  my $parser = Bio::OntologyIO->new
\&        ( -format       => "go",
\&     -defs_file    => "/home/czmasek/GO/GO.defs",
\&          -files        => ["/home/czmasek/GO/component.ontology",
\&                            "/home/czmasek/GO/function.ontology",
\&                            "/home/czmasek/GO/process.ontology"] );
.Ve
.PP
.Vb 1
\&  my $go_ontology = $parser->next_ontology();
.Ve
.PP
.Vb 3
\&  my $IS_A       = Bio::Ontology::RelationshipType->get_instance( "IS_A" );
\&  my $PART_OF    = Bio::Ontology::RelationshipType->get_instance( "PART_OF" );
\&  my $RELATED_TO = Bio::Ontology::RelationshipType->get_instance( "RELATED_TO" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Needs Graph.pm from \s-1CPAN\s0.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek@gnf.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:\s0   http://www.genetics.wustl.edu/eddy/people/zmasek/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.Sh "\s-1CONTRIBUTOR\s0"
.IX Subsection "CONTRIBUTOR"
.Vb 1
\& Hilmar Lapp, hlapp at gmx.net
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 27
\& Title   : new
\& Usage   : $parser = Bio::OntologyIO->new(
\&                             -format => "go",
\&                             -defs_file => "/path/to/GO.defs",
\&                             -files => ["/path/to/component.ontology",
\&                                        "/path/to/function.ontology",
\&                                        "/path/to/process.ontology"] );
\& Function: Creates a new dagflat parser.
\& Returns : A new dagflat parser object, implementing Bio::OntologyIO.
\& Args    : -defs_file  => the name of the file holding the term
\&                          definitions
\&           -files      => a single ontology flat file holding the
\&                          term relationships, or an array ref holding
\&                          the file names (for GO, there will usually be
\&                          3 files: component.ontology, function.ontology,
\&                          process.ontology)
\&           -file       => if there is only a single flat file, it may
\&                          also be specified via the -file parameter
\&           -ontology_name => the name of the ontology; if not specified the
\&                          parser will auto-discover it by using the term
\&                          that starts with a $, and converting underscores
\&                          to spaces
\&           -engine     => the Bio::Ontology::OntologyEngineI object
\&                          to be reused (will be created otherwise); note
\&                          that every Bio::Ontology::OntologyI will
\&                          qualify as well since that one inherits from the
\&                          former.
.Ve
.PP
See Bio::OntologyIO.
.Sh "ontology_name"
.IX Subsection "ontology_name"
.Vb 6
\& Title   : ontology_name
\& Usage   : $obj->ontology_name($newval)
\& Function: Get/set the name of the ontology parsed by this module.
\& Example :
\& Returns : value of ontology_name (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "parse"
.IX Subsection "parse"
.Vb 4
\& Title   : parse()
\& Usage   : $parser->parse();
\& Function: Parses the files set with "new" or with methods
\&           defs_file and _flat_files.
.Ve
.PP
.Vb 3
\&           Normally you should not need to call this method as it will
\&           be called automatically upon the first call to
\&           next_ontology().
.Ve
.PP
.Vb 2
\& Returns : [Bio::Ontology::OntologyEngineI]
\& Args    :
.Ve
.Sh "next_ontology"
.IX Subsection "next_ontology"
.Vb 8
\& Title   : next_ontology
\& Usage   :
\& Function: Get the next available ontology from the parser. This is the
\&           method prescribed by Bio::OntologyIO.
\& Example :
\& Returns : An object implementing Bio::Ontology::OntologyI, and undef if
\&           there is no more ontology in the input.
\& Args    :
.Ve
.Sh "defs_file"
.IX Subsection "defs_file"
.Vb 5
\& Title   : defs_file
\& Usage   : $parser->defs_file( "GO.defs" );
\& Function: Set/get for the term definitions filename.
\& Returns : The term definitions file name [string].
\& Args    : On set, the term definitions file name [string] (optional).
.Ve
.Sh "close"
.IX Subsection "close"
.Vb 3
\& Title   : close
\& Usage   :
\& Function: Closes this ontology stream and associated file handles.
.Ve
.PP
.Vb 2
\&           Clients should call this method especially when they write
\&           ontologies.
.Ve
.PP
.Vb 2
\&           We need to override this here in order to close the file
\&           handle for the term definitions file.
.Ve
.PP
.Vb 3
\& Example :
\& Returns : none
\& Args    : none
.Ve
.Sh "_flat_files"
.IX Subsection "_flat_files"
.Vb 3
\& Title   : _flat_files
\& Usage   : $files_to_parse = $parser->_flat_files();
\& Function: Get the array of ontology flat files that need to be parsed.
.Ve
.PP
.Vb 4
\&           Note that this array will decrease in elements over the
\&           parsing process. Therefore, it\e's value outside of this
\&           module will be limited. Also, be careful not to alter the
\&           array unless you know what you are doing.
.Ve
.PP
.Vb 2
\& Returns : a reference to an array of zero or more strings
\& Args    : none
.Ve
.Sh "_defs_io"
.IX Subsection "_defs_io"
.Vb 7
\& Title   : _defs_io
\& Usage   : $obj->_defs_io($newval)
\& Function: Get/set the Bio::Root::IO instance representing the
\&           definition file, if provided (see defs_file()).
\& Example :
\& Returns : value of _defs_io (a Bio::Root::IO object)
\& Args    : on set, new value (a Bio::Root::IO object or undef, optional)
.Ve
