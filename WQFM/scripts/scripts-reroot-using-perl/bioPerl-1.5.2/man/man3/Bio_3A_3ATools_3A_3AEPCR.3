.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::EPCR 3"
.TH Bio::Tools::EPCR 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::EPCR \- Parse ePCR output and make features
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # A simple annotation pipeline wrapper for ePCR data
\&    # assuming ePCR data is already generated in file seq1.epcr
\&    # and sequence data is in fasta format in file called seq1.fa
.Ve
.PP
.Vb 5
\&    use Bio::Tools::EPCR;
\&    use Bio::SeqIO;
\&    my $parser = new Bio::Tools::EPCR(-file => 'seq1.epcr');
\&    my $seqio = new Bio::SeqIO(-format => 'fasta', -file => 'seq1.fa');
\&    my $seq = $seqio->next_seq || die("cannot get a seq object from SeqIO");
.Ve
.PP
.Vb 6
\&    while( my $feat = $parser->next_feature ) {
\&        # add EPCR annotation to a sequence
\&        $seq->add_SeqFeature($feat);
\&    }
\&    my $seqout = new Bio::SeqIO(-format => 'embl');
\&    $seqout->write_seq($seq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object serves as a parser for ePCR data, creating a
Bio::SeqFeatureI for each ePCR hit.  These can be processed or added
as annotation to an existing Bio::SeqI object for the purposes of
automated annotation.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $epcr = new Bio::Tools::EPCR(-file => $file,
\&                                           -primary => $fprimary, 
\&                                           -source => $fsource, 
\&                                           -groupclass => $fgroupclass);
\& Function: Initializes a new EPCR parser
\& Returns : Bio::Tools::EPCR
\& Args    : -fh   => filehandle
\&           OR
\&           -file => filename
.Ve
.PP
.Vb 4
\&           -primary => a string to be used as the common value for
\&                       each features '-primary' tag.  Defaults to
\&                       'sts'.  (This in turn maps to the GFF 'type'
\&                       tag (aka 'method')).
.Ve
.PP
.Vb 4
\&            -source => a string to be used as the common value for
\&                       each features '-source' tag.  Defaults to
\&                       'e-PCR'. (This in turn maps to the GFF 'source'
\&                       tag)
.Ve
.PP
.Vb 3
\&             -groupclass => a string to be used as the name of the tag
\&                           which will hold the sts marker namefirst
\&                           attribute.  Defaults to 'name'.
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : $seqfeature = $obj->next_feature();
\& Function: Returns the next feature available in the analysis result, or
\&           undef if there are no more features.
\& Example :
\& Returns : A Bio::SeqFeatureI implementing object, or undef if there are no
\&           more features.
\& Args    : none
.Ve
.Sh "source"
.IX Subsection "source"
.Vb 6
\& Title   : source
\& Usage   : $obj->source($newval)
\& Function: 
\& Example : 
\& Returns : value of source (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "primary"
.IX Subsection "primary"
.Vb 6
\& Title   : primary
\& Usage   : $obj->primary($newval)
\& Function: 
\& Example : 
\& Returns : value of primary (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "groupclass"
.IX Subsection "groupclass"
.Vb 6
\& Title   : groupclass
\& Usage   : $obj->groupclass($newval)
\& Function: 
\& Example : 
\& Returns : value of groupclass (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
