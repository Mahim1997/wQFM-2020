.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::StandAloneBlast 3"
.TH Bio::Tools::Run::StandAloneBlast 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Run::StandAloneBlast \- Object for the local execution 
of the NCBI BLAST program suite (blastall, blastpgp, bl2seq). 
There is experimental support for WU\-Blast and NCBI rpsblast.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& # Local-blast "factory object" creation and blast-parameter
\& # initialization:
.Ve
.PP
.Vb 2
\& @params = (-database => 'swissprot',-outfile => 'blast1.out');
\& $factory = Bio::Tools::Run::StandAloneBlast->new(@params);
.Ve
.PP
.Vb 1
\& # Blast a sequence against a database:
.Ve
.PP
.Vb 4
\& $str = Bio::SeqIO->new(-file=>'t/amino.fa', -format => 'Fasta');
\& $input = $str->next_seq();
\& $input2 = $str->next_seq();
\& $blast_report = $factory->blastall($input);
.Ve
.PP
.Vb 1
\& # Run an iterated Blast (psiblast) of a sequence against a database:
.Ve
.PP
.Vb 4
\& $factory->j(3);    # 'j' is blast parameter for # of iterations
\& $factory->outfile('psiblast1.out');
\& $factory = Bio::Tools::Run::StandAloneBlast->new(@params);
\& $blast_report = $factory->blastpgp($input);
.Ve
.PP
.Vb 1
\& # Use blast to align 2 sequences against each other:
.Ve
.PP
.Vb 2
\& $factory = Bio::Tools::Run::StandAloneBlast->new(-outfile => 'bl2seq.out');
\& $factory->bl2seq($input, $input2);
.Ve
.PP
.Vb 1
\& # Experimental support for WU-Blast 2.0
.Ve
.PP
.Vb 4
\& my $factory = Bio::Tools::Run::StandAloneBlast->new(-program =>"wublastp",
\&                                                     -database =>"swissprot",
\&                                                     -e => 1e-20); 
\& my $blast_report = $factory->wublast($seq);
.Ve
.PP
.Vb 1
\& # Experimental support for NCBI rpsblast
.Ve
.PP
.Vb 4
\& my $factory = Bio::Tools::Run::StandAloneBlast->new(-db => 'CDD/Cog', 
\&                                                     -expect => 0.001);
\& $factory->F('T'); # turn on SEG filtering of query sequence
\& my $blast_report = $factory->rpsblast($seq);
.Ve
.PP
.Vb 2
\& # Various additional options and input formats are available,
\& # see the DESCRIPTION section for details.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This \s-1DESCRIPTION\s0 only documents Bio::Tools::Run::StandAloneBlast: \- a
Bioperl object for running the \s-1NCBI\s0 standAlone \s-1BLAST\s0 package.  Blast,
itself, is a large & complex program \- for more information regarding
\&\s-1BLAST\s0, please see the \s-1BLAST\s0 documentation which accompanies the \s-1BLAST\s0
distribution. \s-1BLAST\s0 is available from ftp://ncbi.nlm.nih.gov/blast/.
.PP
A source of confusion in documenting a \s-1BLAST\s0 interface is that the
term \*(L"program\*(R" is used in \- at least \- three different ways in the
\&\s-1BLAST\s0 documentation.  In this \s-1DESCRIPTION\s0, \*(L"program\*(R" will refer to the
\&\s-1BLAST\s0 routine set by the \s-1BLAST\s0 \f(CW\*(C`\-p\*(C'\fR parameter that can be set to blastn,
blastp, tblastx etc.  We will use the term Blast \*(L"executable\*(R" to refer
to the various different executable files that may be called \- ie
blastall, blastpgp or bl2seq.  In addition, there are several \s-1BLAST\s0
capabilities, which are also referred to as \*(L"programs\*(R", and are
implemented by using specific combinations of \s-1BLAST\s0 executables,
programs and parameters.  They will be referred by their specific
names \- eg \s-1PSIBLAST\s0 and \s-1PHIBLAST\s0.
.PP
Before running StandAloneBlast it is necessary: to install \s-1BLAST\s0 
on your system, to edit set the environmental variable \f(CW$BLASTDIR\fR 
or your \f(CW$PATH\fR variable to point to the \s-1BLAST\s0 directory, and to 
ensure that users have execute privileges for the \s-1BLAST\s0 program.  
.PP
If the databases which will be searched by \s-1BLAST\s0 are located in the 
data subdirectory of the blast program directory (the default 
installation location), StandAloneBlast will find them; however, 
if the database files are located in any other location, environmental 
variable \f(CW$BLASTDATADIR\fR will need to be set to point to that directory.
.PP
The use of the StandAloneBlast module is as follows: Initially, a
local blast \*(L"factory object\*(R" is created. The constructor may be passed
an optional array of (non\-default) parameters to be used by the
factory, eg:
.PP
.Vb 2
\& @params = (-program => 'blastn', -database => 'ecoli.nt');
\& $factory = Bio::Tools::Run::StandAloneBlast->new(@params);
.Ve
.PP
Any parameters not explicitly set will remain as the defaults of the
\&\s-1BLAST\s0 executable.  Note each \s-1BLAST\s0 executable has somewhat different
parameters and options.  See the \s-1BLAST\s0 Documentation for a description
or run the \s-1BLAST\s0 executable from the command line followed solely with
a \*(L"\-\*(R" to see a list of options and default values for that executable;
eg >blastall \-.
.PP
\&\s-1BLAST\s0 parameters can be changed and/or examined at any time after the
factory has been created.  The program checks that any
parameter/switch being set/read is valid.  Except where specifically
noted, StandAloneBlast uses the same single\-letter, case-sensitive
parameter names as the actual blast program.  Currently no checks are
included to verify that parameters are of the proper type (e.g. string
or numeric) or that their values are within the proper range.
.PP
As an example, to change the value of the Blast parameter 'e' ('e' is
the parameter for expectation-value cutoff) 
.PP
.Vb 2
\&  $expectvalue = 0.01;
\&  $factory->e($expectvalue);
.Ve
.PP
Note that for improved script readibility one can modify the name of
the \s-1BLAST\s0 parameters as desired as long as the initial letter (and
case) of the parameter are preserved, e.g.:
.PP
.Vb 1
\&  $factory->expectvalue($expectvalue);
.Ve
.PP
Unfortunately, some of the \s-1BLAST\s0 parameters are not the single 
letter one might expect (eg \*(L"iteration round\*(R" in blastpgp is 'j'). 
Again one can check by using, for example:
.PP
.Vb 1
\&  > blastpgp - .
.Ve
.PP
Once the factory has been created and the appropriate parameters set,
one can call one of the supported blast executables.  The input
sequence(s) to these executables may be fasta file(s) as described in
the \s-1BLAST\s0 documentation.
.PP
.Vb 2
\&  $inputfilename = 't/testquery.fa';
\&  $blast_report = $factory->blastall($inputfilename);
.Ve
.PP
In addition, sequence input may be in the form of either a Bio::Seq
object or or an array of Bio::Seq objects, e.g.:
.PP
.Vb 3
\&  $input = Bio::Seq->new(-id => "test query",
\&                         -seq => "ACTACCCTTTAAATCAGTGGGGG");
\&  $blast_report = $factory->blastall($input);
.Ve
.PP
For blastall and non-psiblast blastpgp runs, report object is either a
Bio::Tools::BPlite or Bio::SearchIO object, selected by the user 
with the parameter _READMETHOD.  The leading underscore is needed to
distinguish this option from options which are passed to the \s-1BLAST\s0
executable. The default parser is Bio::SearchIO::blast.  If BPlite
method is selected, Bio::Tools::BPlite objects will be returned for
standard blast and Bio::Tools::BPpsilite for a multiple-iteration
blasts, and a Bio::Tools::BPbl2seq for bl2seq.  In any case, the \*(L"raw\*(R"
blast report is also available. The filename is set by the in the
\&'outfile' parameter and has the default value of \*(L"blastreport.out\*(R".
The BPlite method is only provided to support legacy code since
the BPlite modules are no longer maintained \- do not use BPlite
since these modules will be removed eventually.
.PP
For psiblast execution in the \s-1BLAST\s0 \*(L"jumpstart\*(R" mode, the program must
be passed (in addition to the query sequence itself) an alignment
containing the query sequence (in the form of a SimpleAlign object) as
well as a \*(L"mask\*(R" specifying at what residues position-specific scoring
matrices (PSSMs) are to used and at what residues default scoring
matrices (eg \s-1BLOSUM\s0) are to be used. See psiblast documentation for
more details.  The mask itself is a string of 0's and 1's which is the
same length as each sequence in the alignment and has a \*(L"1\*(R" at
locations where (PSSMs) are to be used and a \*(L"0\*(R" at all other
locations. So for example:
.PP
.Vb 7
\&  $str = Bio::AlignIO->new(-file => "cysprot.msf", 
\&                           -format => 'msf');
\&  $aln = $str->next_aln();
\&  $len = $aln->length_aln();
\&  $mask = '1' x $len;
\&  # simple case where PSSM's to be used at all residues
\&  $report = $factory->blastpgp("cysprot1.fa", $aln, $mask);
.Ve
.PP
For bl2seq execution, StandAloneBlast.pm can be combined with
AlignIO.pm to directly produce a SimpleAlign object from the alignment
of the two sequences produced by bl2seq as in:
.PP
.Vb 4
\&  # Get 2 sequences
\&  $str = Bio::SeqIO->new(-file=>'t/amino.fa' , -format => 'Fasta');
\&  my $seq3 = $str->next_seq();
\&  my $seq4 = $str->next_seq();
.Ve
.PP
.Vb 4
\&  # Run bl2seq on them
\&  $factory = Bio::Tools::Run::StandAloneBlast->new(-program => 'blastp',
\&                                                   -outfile => 'bl2seq.out');
\&  my $bl2seq_report = $factory->bl2seq($seq3, $seq4);
.Ve
.PP
.Vb 3
\&  # Use AlignIO.pm to create a SimpleAlign object from the bl2seq report
\&  $str = Bio::AlignIO->new(-file=> 'bl2seq.out',-format => 'bl2seq');
\&  $aln = $str->next_aln();
.Ve
.PP
For more examples of syntax and use of Blast.pm, the user is
encouraged to run the scripts standaloneblast.pl in the bioperl
examples/tools directory and StandAloneBlast.t in the bioperl t/ 
directory.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via 
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \-  Peter Schattner"
.IX Header "AUTHOR -  Peter Schattner"
Email schattner at alum.mit.edu
.SH "MAINTAINER \- Torsten Seemann"
.IX Header "MAINTAINER - Torsten Seemann"
Email torsten at infotech.monash.edu.au
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "BLAST parameters"
.IX Header "BLAST parameters"
Essentially all \s-1BLAST\s0 parameter can be set via StandAloneBlast.pm.
Some of the most commonly used parameters are listed below.  All
parameters have defaults and are optional (I think.)  For a complete
listing of settable parameters, run the relevant executable \s-1BLAST\s0
program with the option \*(L"\-\*(R" as in blastall \-
.Sh "Blastall"
.IX Subsection "Blastall"
.Vb 15
\&  -p  Program Name [String]
\&        Input should be one of "blastp", "blastn", "blastx", 
\&        "tblastn", or "tblastx".
\&  -d  Database [String] default = nr
\&        The database specified must first be formatted with formatdb.
\&        Multiple database names (bracketed by quotations) will be accepted.
\&        An example would be -d "nr est"
\&   -i  Query File [File In]   Set by StandAloneBlast.pm from script.
\&    default = stdin. The query should be in FASTA format.  If multiple FASTA entries are in the input
\&        file, all queries will be searched.
\&  -e  Expectation value (E) [Real] default = 10.0
\&  -o  BLAST report Output File [File Out]  Optional,
\&        default = ./blastreport.out ; set by StandAloneBlast.pm         
\&  -S  Query strands to search against database (for blast[nx], and tblastx).  3 is both, 1 is top, 2 is bottom [Integer]
\&        default = 3
.Ve
.Sh "Blastpgp (including Psiblast)"
.IX Subsection "Blastpgp (including Psiblast)"
.Vb 6
\&  -j   is the maximum number of rounds (default 1; i.e., regular BLAST)
\&  -h   is the e-value threshold for including sequences in the
\&        score matrix model (default 0.001)
\&  -c   is the "constant" used in the pseudocount formula specified in the paper (default 10)
\&  -B  Multiple alignment file for PSI-BLAST "jump start mode"  Optional
\&  -Q  Output File for PSI-BLAST Matrix in ASCII [File Out]  Optional
.Ve
.Sh "<rpsblast>"
.IX Subsection "<rpsblast>"
.Vb 10
\&  -d  Database [String] default = (none - you must specify a database)
\&        The database specified must first be formatted with formatdb.
\&        Multiple database names (bracketed by quotations) will be accepted.
\&        An example would be -d "Cog Smart"
\&   -i  Query File [File In]   Set by StandAloneBlast.pm from script.
\&    default = stdin. The query should be in FASTA format.  If multiple FASTA entries are in the input
\&        file, all queries will be searched.
\&  -e  Expectation value (E) [Real] default = 10.0
\&  -o  BLAST report Output File [File Out]  Optional,
\&        default = ./blastreport.out ; set by StandAloneBlast.pm
.Ve
.Sh "Bl2seq"
.IX Subsection "Bl2seq"
.Vb 8
\&  -i  First sequence [File In]
\&  -j  Second sequence [File In]
\&  -p  Program name: blastp, blastn, blastx. For blastx 1st argument should be nucleotide [String]
\&    default = blastp
\&  -o  alignment output file [File Out] default = stdout
\&  -e  Expectation value (E) [Real]  default = 10.0
\&  -S  Query strands to search against database (blastn only).  3 is both, 1 is top, 2 is bottom [Integer]
\&    default = 3
.Ve
.Sh "WU-Blast"
.IX Subsection "WU-Blast"
.Vb 11
\&  -p Program Name [String] 
\&        Input should be one of "wublastp", "wublastn", "wublastx", 
\&        "wutblastn", or "wutblastx".
\&  -d  Database [String] default = nr
\&        The database specified must first be formatted with xdformat.
\&  -i  Query File [File In]   Set by StandAloneBlast.pm from script.
\&    default = stdin. The query should be in FASTA format.  If multiple FASTA entries are in the input
\&        file, all queries will be searched.
\&  -E  Expectation value (E) [Real] default = 10.0
\&  -o  BLAST report Output File [File Out]  Optional,
\&        default = ./blastreport.out ; set by StandAloneBlast.pm
.Ve
.Sh "quiet"
.IX Subsection "quiet"
.Vb 6
\& Title   : quiet
\& Usage   : $obj->quiet($newval)
\& Function: 
\& Example : 
\& Returns : value of quiet (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SH "Methods"
.IX Header "Methods"
.Sh "executable"
.IX Subsection "executable"
.Vb 6
\& Title   : executable
\& Usage   : my $exe = $blastfactory->executable('blastall');
\& Function: Finds the full path to the 'codeml' executable
\& Returns : string representing the full path to the exe
\& Args    : [optional] name of executable to set path to 
\&           [optional] boolean flag whether or not warn when exe is not found
.Ve
.Sh "program_path"
.IX Subsection "program_path"
.Vb 5
\& Title   : program_path
\& Usage   : my $path = $factory->program_path();
\& Function: Builds path for executable 
\& Returns : string representing the full path to the exe
\& Args    : none
.Ve
.Sh "program_dir"
.IX Subsection "program_dir"
.Vb 5
\& Title   : program_dir
\& Usage   : my $dir = $factory->program_dir();
\& Function: Abstract get method for dir of program. 
\& Returns : string representing program directory 
\& Args    : none
.Ve
.Sh "blastall"
.IX Subsection "blastall"
.Vb 19
\& Title   : blastall
\& Usage   :  $blast_report = $factory->blastall('t/testquery.fa');
\&        or
\&               $input = Bio::Seq->new(-id=>"test query",
\&                                      -seq=>"ACTACCCTTTAAATCAGTGGGGG");
\&               $blast_report = $factory->blastall($input);
\&        or 
\&              $seq_array_ref = \e@seq_array;  
\&         # where @seq_array is an array of Bio::Seq objects
\&              $blast_report = $factory->blastall(\e@seq_array);
\& Returns : Reference to a Blast object or BPlite object 
\&           containing the blast report.
\& Args    : Name of a file or Bio::Seq object or an array of 
\&           Bio::Seq object containing the query sequence(s). 
\&           Throws an exception if argument is not either a string 
\&           (eg a filename) or a reference to a Bio::Seq object 
\&           (or to an array of Seq objects).  If argument is string, 
\&           throws exception if file corresponding to string name can 
\&           not be found.
.Ve
.Sh "wublast"
.IX Subsection "wublast"
.Vb 17
\& Title   : wublast
\& Usage   :  $blast_report = $factory->wublast('t/testquery.fa');
\&        or
\&               $input = Bio::Seq->new(-id=>"test query",
\&                                      -seq=>"ACTACCCTTTAAATCAGTGGGGG");
\&               $blast_report = $factory->wublast($input);
\&        or 
\&              $seq_array_ref = \e@seq_array;  # where @seq_array is an array of Bio::Seq objects
\&              $blast_report = $factory->wublast(\e@seq_array);
\& Returns :  Reference to a Blast object 
\& Args    : Name of a file or Bio::Seq object or an array of 
\&           Bio::Seq object containing the query sequence(s). 
\&           Throws an exception if argument is not either a string 
\&           (eg a filename) or a reference to a Bio::Seq object 
\&           (or to an array of Seq objects).  If argument is string, 
\&           throws exception if file corresponding to string name can 
\&           not be found.
.Ve
.Sh "blastpgp"
.IX Subsection "blastpgp"
.Vb 18
\& Title   : blastpgp
\& Usage   :  $blast_report = $factory-> blastpgp('t/testquery.fa');
\&        or
\&               $input = Bio::Seq->new(-id=>"test query",
\&                                      -seq=>"ACTADDEEQQPPTCADEEQQQVVGG");
\&               $blast_report = $factory->blastpgp ($input);
\&        or
\&              $seq_array_ref = \e@seq_array;  
\&         # where @seq_array is an array of Bio::Seq objects
\&              $blast_report = $factory-> blastpgp(\e@seq_array);
\& Returns : Reference to a Bio::SearchIO object or BPlite object 
\&           containing the blast report (BPlite only if you specify 
\&           _READMETHOD=> 'BPlite')
\& Args    : Name of a file or Bio::Seq object. In psiblast jumpstart 
\&           mode two additional arguments are required: a SimpleAlign 
\&           object one of whose elements is the query and a "mask" to 
\&           determine how BLAST should select scoring matrices see 
\&           DESCRIPTION above for more details.
.Ve
.PP
.Vb 8
\&           Throws an exception if argument is not either a string 
\&           (eg a filename) or a reference to a Bio::Seq object 
\&           (or to an array of Seq objects).  If argument is string, 
\&           throws exception if file corresponding to string name can 
\&           not be found.
\& Returns : Reference to Bio::SearchIO object 
\&           or Bio::Tools::BPpsilite if you specify 
\&           _READMETHOD => 'BPlite' object containing the blast report.
.Ve
.Sh "rpsblast"
.IX Subsection "rpsblast"
.Vb 20
\& Title   : rpsblast
\& Usage   :  $blast_report = $factory->rpsblast('t/testquery.fa');
\&        or
\&               $input = Bio::Seq->new(-id=>"test query",
\&                                      -seq=>"MVVLCRADDEEQQPPTCADEEQQQVVGG");
\&               $blast_report = $factory->rpsblast($input);
\&        or
\&              $seq_array_ref = \e@seq_array;  
\&         # where @seq_array is an array of Bio::Seq objects
\&              $blast_report = $factory->rpsblast(\e@seq_array);
\& Args    : Name of a file or Bio::Seq object or an array of 
\&           Bio::Seq object containing the query sequence(s). 
\&           Throws an exception if argument is not either a string 
\&           (eg a filename) or a reference to a Bio::Seq object 
\&           (or to an array of Seq objects).  If argument is string, 
\&           throws exception if file corresponding to string name can 
\&           not be found.
\& Returns : Reference to a Bio::SearchIO object or BPlite object 
\&           containing the blast report (BPlite only if you specify 
\&           _READMETHOD=> 'BPlite')
.Ve
.Sh "bl2seq"
.IX Subsection "bl2seq"
.Vb 11
\& Title   : bl2seq
\& Usage   : $factory-> bl2seq('t/seq1.fa', 't/seq2.fa');
\&        or
\&          $input1 = Bio::Seq->new(-id=>"test query1",
\&                                  -seq=>"ACTADDEEQQPPTCADEEQQQVVGG");
\&          $input2 = Bio::Seq->new(-id=>"test query2",
\&                                  -seq=>"ACTADDEMMMMMMMDEEQQQVVGG");
\&          $blast_report = $factory->bl2seq ($input1,  $input2);
\& Returns : Reference to a BPbl2seq object containing the blast report.
\& Args    : Names of 2 files  or 2 Bio::Seq objects containing the 
\&           sequences to be aligned by bl2seq.
.Ve
.PP
.Vb 4
\&           Throws an exception if argument is not either a pair of 
\&           strings (eg filenames) or references to Bio::Seq objects.  
\&           If arguments are strings, throws exception if files 
\&           corresponding to string names can not be found.
.Ve
.Sh "_generic_local_blast"
.IX Subsection "_generic_local_blast"
.Vb 4
\& Title   : _generic_local_blast
\& Usage   : internal function not called directly
\& Returns : Bio::SearchIO or Bio::Tools::BPlite object
\& Args    : Reference to calling object and name of BLAST executable
.Ve
.Sh "_generic_local_wublast"
.IX Subsection "_generic_local_wublast"
.Vb 4
\& Title   : _generic_local_wublast
\& Usage   :  internal function not called directly
\& Returns :  Blast object
\& Args    :   Reference to calling object and name of BLAST executable
.Ve
.Sh "_runblast"
.IX Subsection "_runblast"
.Vb 9
\& Title   :  _runblast
\& Usage   :  Internal function, not to be called directly        
\& Function:   makes actual system call to Blast program
\& Example :
\& Returns : Report object in the appropriate format (Bio::SearchIO)
\&           or if BPlite is requested: Bio::Tools::BPlite, 
\&           Bio::Tools::BPpsilite,or Bio::Tools::BPbl2seq)
\& Args    : Reference to calling object, name of BLAST executable, 
\&           and parameter string for executable
.Ve
.Sh "_runwublast"
.IX Subsection "_runwublast"
.Vb 7
\& Title   :  _runwublast
\& Usage   :  Internal function, not to be called directly        
\& Function:   makes actual system call to WU-Blast program
\& Example :
\& Returns : Report Blast object
\& Args    : Reference to calling object, name of BLAST executable, 
\&           and parameter string for executable
.Ve
.Sh "_setinput"
.IX Subsection "_setinput"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:   Create input file(s) for Blast executable
\& Example :
\& Returns : name of file containing Blast data input
\& Args    : Seq object reference or input file name
.Ve
.Sh "_setparams"
.IX Subsection "_setparams"
.Vb 6
\& Title   : _setparams
\& Usage   : Internal function, not to be called directly 
\& Function: Create parameter inputs for Blast program
\& Example :
\& Returns : parameter string to be passed to Blast 
\& Args    : Reference to calling object and name of BLAST executable
.Ve
.SH "Bio::Tools::Run::Wrapper methods"
.IX Header "Bio::Tools::Run::Wrapper methods"
.Sh "no_param_checks"
.IX Subsection "no_param_checks"
.Vb 6
\& Title   : no_param_checks
\& Usage   : $obj->no_param_checks($newval)
\& Function: Boolean flag as to whether or not we should
\&           trust the sanity checks for parameter values  
\& Returns : value of no_param_checks
\& Args    : newvalue (optional)
.Ve
.Sh "save_tempfiles"
.IX Subsection "save_tempfiles"
.Vb 5
\& Title   : save_tempfiles
\& Usage   : $obj->save_tempfiles($newval)
\& Function: 
\& Returns : value of save_tempfiles
\& Args    : newvalue (optional)
.Ve
.Sh "outfile_name"
.IX Subsection "outfile_name"
.Vb 6
\& Title   : outfile_name
\& Usage   : my $outfile = $tcoffee->outfile_name();
\& Function: Get/Set the name of the output file for this run
\&           (if you wanted to do something special)
\& Returns : string
\& Args    : [optional] string to set value to
.Ve
.Sh "tempdir"
.IX Subsection "tempdir"
.Vb 5
\& Title   : tempdir
\& Usage   : my $tmpdir = $self->tempdir();
\& Function: Retrieve a temporary directory name (which is created)
\& Returns : string which is the name of the temporary directory
\& Args    : none
.Ve
.Sh "cleanup"
.IX Subsection "cleanup"
.Vb 5
\& Title   : cleanup
\& Usage   : $tcoffee->cleanup();
\& Function: Will cleanup the tempdir directory after a PAML run
\& Returns : none
\& Args    : none
.Ve
.Sh "io"
.IX Subsection "io"
.Vb 5
\& Title   : io
\& Usage   : $obj->io($newval)
\& Function:  Gets a Bio::Root::IO object
\& Returns : Bio::Root::IO
\& Args    : none
.Ve
