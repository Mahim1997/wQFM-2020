.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::EUtilities::esummary 3"
.TH Bio::DB::EUtilities::esummary 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::EUtilities::esummary \- retrieval of NCBI DocSum data from a list
of primary IDs or a Cookie
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBDo not use this module directly.\fR
Use it via the Bio::DB::EUtilities class.
.PP
.Vb 1
\&  use Bio::DB::EUtilities;
.Ve
.PP
.Vb 4
\&  my $esearch = Bio::DB::EUtilities->new(-eutil      => 'esearch',
\&                                         -db         => 'pubmed',
\&                                         -term       => 'hutP',
\&                                         -usehistory => 'y');
.Ve
.PP
.Vb 1
\&  $esearch->get_response; # parse the response, fetch a cookie
.Ve
.PP
.Vb 2
\&  my $esummary = Bio::DB::EUtilities->new(-eutil        => 'esummary',
\&                                       -cookie       => $esearch->next_cookie);
.Ve
.PP
.Vb 1
\&  print $esearch->get_response-content; # prints XML output
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1WARNING\s0\fR: Please do \fB\s-1NOT\s0\fR spam the Entrez web server with multiple requests.
.PP
The EUtility ESummary is used to retrieve ducument summaries from a list of
primary IDs or the user's history (stored on the remote server and accessible
using a Cookie.  The returned data is processed
for errors, but no further processing is done at this time.
.ie n .IP """db""" 3
.el .IP "\f(CWdb\fR" 3
.IX Item "db"
one or more database available through EUtilities if set to 'all', will retrieve
all related \s-1ID\s0's from each database (see method get_db_ids to retrieve these)
.ie n .IP """id""" 3
.el .IP "\f(CWid\fR" 3
.IX Item "id"
a list of primary \s-1ID\s0's (see below)
.ie n .IP """reldate""" 3
.el .IP "\f(CWreldate\fR" 3
.IX Item "reldate"
limits results to the number of days preceding today's date
.ie n .IP """mindate""\fR, \f(CW""maxdate""" 3
.el .IP "\f(CWmindate\fR, \f(CWmaxdate\fR" 3
.IX Item "mindate, maxdate"
limits results by dates (\f(CW\*(C`yyyy/mm/dd\*(C'\fR format, or by year)
.ie n .IP """term""" 3
.el .IP "\f(CWterm\fR" 3
.IX Item "term"
limits results by Entrez query (only valid when \f(CW\*(C`cmd=neighbor\*(C'\fR within a single
database)
.ie n .IP """retmode""" 3
.el .IP "\f(CWretmode\fR" 3
.IX Item "retmode"
set to \s-1XML\s0, but can be changed to ref when needed
.ie n .IP """cookie""" 3
.el .IP "\f(CWcookie\fR" 3
.IX Item "cookie"
a Bio::DB::EUtilities::Cookie object (see below)
.ie n .IP """cmd""" 3
.el .IP "\f(CWcmd\fR" 3
.IX Item "cmd"
command values (see below)
.ie n .IP """holding""" 3
.el .IP "\f(CWholding\fR" 3
.IX Item "holding"
list LinkOut URLs for specified holding provider; used with \f(CW\*(C`cmd=llinks\*(C'\fR
or \f(CW\*(C`cmd=llinkslib\*(C'\fR (rarely used)
.Sh "Command Values"
.IX Subsection "Command Values"
Command values are set using the \f(CW\*(C`cmd\*(C'\fR parameter.  
.ie n .IP """prlinks""" 3
.el .IP "\f(CWprlinks\fR" 3
.IX Item "prlinks"
List the hyperlink to the primary LinkOut provider for multiple IDs and
database. Each \s-1ID\s0 is processed separately.
.ie n .IP """prlinks&retmode=ref""" 3
.el .IP "\f(CWprlinks&retmode=ref\fR" 3
.IX Item "prlinks&retmode=ref"
Create a hyperlink to the primary LinkOut provider for a single \s-1ID\s0 and database.
.ie n .IP """llinks""" 3
.el .IP "\f(CWllinks\fR" 3
.IX Item "llinks"
List LinkOut URLs and Attributes, except PubMed libraries, for multiple IDs
and database. Each \s-1ID\s0 is processed separately.
.ie n .IP """llinkslib""" 3
.el .IP "\f(CWllinkslib\fR" 3
.IX Item "llinkslib"
List LinkOut URLs and Attributes for multiple IDs and database.  Each \s-1ID\s0 is
processed separately.
.ie n .IP """lcheck""" 3
.el .IP "\f(CWlcheck\fR" 3
.IX Item "lcheck"
Check for the existence (Y or N) of an external link in for multiple IDs and
database.
.ie n .IP """ncheck""" 3
.el .IP "\f(CWncheck\fR" 3
.IX Item "ncheck"
Check for the existence of a neighbor link for each \s-1ID\s0 within a database,
e.g., Related Articles in PubMed.
.ie n .IP """neighbor""" 3
.el .IP "\f(CWneighbor\fR" 3
.IX Item "neighbor"
The default setting. Display neighbors and their scores within a database.
.ie n .IP """neighbor_history""" 3
.el .IP "\f(CWneighbor_history\fR" 3
.IX Item "neighbor_history"
Create history (WebEnv & query_key) for use in other EUtilities.
.ie n .IP """acheck""" 3
.el .IP "\f(CWacheck\fR" 3
.IX Item "acheck"
Lists Entrez databases links for multiple IDs from a single database.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the 
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@lists.open-bio.org               - General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at uiuc dot edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "parse_response"
.IX Subsection "parse_response"
.Vb 6
\& Title   : parse_response
\& Usage   : $db->parse_response($content)
\& Function: parse out response for cookie and/or id's
\& Returns : none
\& Args    : HTTP::Response object
\& Throws  : 'NCBI elink nonrecoverable error'
.Ve
.Sh "Methods inherited from Bio::DB::EUtilities"
.IX Subsection "Methods inherited from Bio::DB::EUtilities"
\fIadd_cookie\fR
.IX Subsection "add_cookie"
.PP
.Vb 5
\& Title   : cookie
\& Usage   : $db->add_cookie($cookie)
\& Function: adds an NCBI query cookie to the internal cookie queue
\& Returns : none
\& Args    : a Bio::DB::EUtilities::Cookie object
.Ve
.PP
\fInext_cookie\fR
.IX Subsection "next_cookie"
.PP
.Vb 5
\& Title   : next_cookie
\& Usage   : $cookie = $db->next_cookie
\& Function: return a cookie from the internal cookie queue
\& Returns : a Bio::DB::EUtilities::Cookie object
\& Args    : none
.Ve
.PP
\fIreset_cookies\fR
.IX Subsection "reset_cookies"
.PP
.Vb 5
\& Title   : reset_cookie
\& Usage   : $db->reset_cookie
\& Function: resets the internal cookie queue
\& Returns : none
\& Args    : none
.Ve
.PP
\fIget_all_cookies\fR
.IX Subsection "get_all_cookies"
.PP
.Vb 6
\& Title   : get_all_cookies
\& Usage   : @cookies = $db->get_all_cookies
\& Function: retrieves all cookies from the internal cookie queue; this leaves
\&           the cookies in the queue intact 
\& Returns : none
\& Args    : none
.Ve
.PP
\fIget_response\fR
.IX Subsection "get_response"
.PP
.Vb 6
\& Title   : get_response
\& Usage   : $db->get_response($content)
\& Function: main method to retrieve data stream; parses out response for cookie
\& Returns : HTTP::Response object
\& Args    : optional : Bio::DB::EUtilities::Cookie from a previous search
\& Throws  : 'not a cookie' exception, response errors (via HTTP::Response)
.Ve
.PP
\fIreset_parameters\fR
.IX Subsection "reset_parameters"
.PP
.Vb 5
\& Title   : reset_parameters
\& Usage   : $db->reset_parameters(@args);
\& Function: resets the parameters for a EUtility with args (in @args)
\& Returns : none
\& Args    : array of arguments (arg1 => value, arg2 => value)
.Ve
.PP
\&\fBExperimental method at this time\fR
.PP
\fIcount\fR
.IX Subsection "count"
.PP
.Vb 5
\& Title   : count
\& Usage   : $count = $db->count;
\& Function: return count of number of entries retrieved by query
\& Returns : integer
\& Args    : none
.Ve
.PP
\fIget_db_ids\fR
.IX Subsection "get_db_ids"
.PP
.Vb 9
\& Title   : get_db_ids
\& Usage   : $count = $elink->get_db_ids($db); # gets array ref of IDs
\&           @count = $elink->get_db_ids($db); # gets array of IDs
\&           %hash  = $elink->get_db_ids(); # hash of databases (keys) and array_refs(value)
\& Function: returns an array or array ref if a database is the argument,
\&           otherwise returns a hash of the database (keys) and id_refs (values)
\& Returns : array or array ref of ids (arg=database) or hash of
\&           database-array_refs (no args)
\& Args    : database string;
.Ve
.PP
\fIget_score\fR
.IX Subsection "get_score"
.PP
.Vb 5
\& Title   : get_score
\& Usage   : $score = $db->get_score($id);
\& Function: gets score for ID (if present)
\& Returns : integer (score) 
\& Args    : ID values
.Ve
.PP
\fIget_ids_by_score\fR
.IX Subsection "get_ids_by_score"
.PP
.Vb 8
\& Title   : get_ids_by_score
\& Usage   : @ids = $db->get_ids_by_score;  # returns IDs
\&           @ids = $db->get_ids_by_score($score); # get IDs by score
\& Function: returns ref of array of ids based on relevancy score from elink;
\&           To return all ID's above a score, use the normal score value;
\&           to return all ID's below a score, append the score with '-';
\& Returns : ref of array of ID's; if array, an array of IDs
\& Args    : integer (score value); returns all if no arg provided
.Ve
