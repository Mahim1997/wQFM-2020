.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Primer3 3"
.TH Bio::Tools::Primer3 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Primer3 \- Create input for and work with the output from
the program primer3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # parse primer3 output to get some data
\& # this is also called from Bio::Tools::Run::Primer3
\& use Bio::Tools::Primer3;
.Ve
.PP
.Vb 2
\& # read a primer3 output file
\& my $p3 = Bio::Tools::Primer3->new(-file=>"data/primer3_output.txt");
.Ve
.PP
.Vb 3
\& # how many results were there?
\& my $num = $p3->number_of_results;
\& print "There were $num results\en";
.Ve
.PP
.Vb 6
\& # get all the results
\& my $all_results = $p3->all_results;
\& print "ALL the results\en";
\& foreach my $key (keys %{$all_results}) {
\&    print "$key\et${$all_results}{$key}\en";
\& }
.Ve
.PP
.Vb 6
\& # get specific results
\& my $result1 = $p3->primer_results(1);
\& print "The first primer is\en";
\& foreach my $key (keys %{$result1}) {
\&    print "$key\et${$result1}{$key}\en";
\& }
.Ve
.PP
.Vb 4
\& # get the results as a Bio::Seq::PrimedSeq stream
\& my $primer = $p3->next_primer;
\& print "The left primer in the stream is ",
\&   $primer->get_primer('-left_primer')->seq->seq, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tools::Primer3 creates the input files needed to design primers using
primer3 and provides mechanisms to access data in the primer3 output files.
.PP
This module provides a bioperl interface to the program primer3. See
http://www\-genome.wi.mit.edu/genome_software/other/primer3.html
for details and to download the software.
.PP
This module is based on one written by Chad Matsalla
(bioinformatics1@dieselwurks.com)
.PP
I have ripped some of his code, and added a lot of my own. I hope he
is not mad at me!
.PP
This is probably best run in one of the two following ways:
.PP
.Vb 4
\&  i. To parse the output from Bio::Tools::Run::Primer3.
\&     You will most likely just use next_primer to get the results from
\&     Bio::Tools::Run::Primer3.
\&  ii. To parse the output of primer3 handed to it as a file name.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \-"
.IX Header "AUTHOR -"
.Vb 1
\&  Rob Edwards
.Ve
.PP
.Vb 1
\&  redwards@utmem.edu
.Ve
.PP
.Vb 1
\&  Based heavily on work of
.Ve
.PP
.Vb 1
\&  Chad Matsalla
.Ve
.PP
.Vb 1
\&  bioinformatics1@dieselwurks.com
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.Vb 1
\&  Brian Osborne bosborne at alum.mit.edu
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 9
\&  Title   : new()
\&  Usage   : my $primer3 = Bio::Tools::Primer3->new(-file=>$file)
\&            to read a primer3 output file.
\&  Function: Parse primer3 output
\&  Returns : Does not return anything. If called with a filename will
\&            allow you to retrieve the results
\&  Args    : -file (optional) file of primer3 results to parse -verbose
\&            (optional) set verbose output
\&  Notes   :
.Ve
.Sh "number_of_results"
.IX Subsection "number_of_results"
.Vb 9
\&  Title   : number_of_results()
\&  Usage   : $primer3->number_of_results()
\&  Function: Retrieve the number of primers returned from Primer3.
\&  Returns : A scalar
\&  Args    : None
\&  Notes   : This returns the count of the primers returned by Primer3
\&             (aka how many of them there are).
\&             This is one more than the maximum offset into the zero
\&             based list of primers that is accessed by primer_results().
.Ve
.Sh "all_results"
.IX Subsection "all_results"
.Vb 7
\&  Title   : all_results()
\&  Usage   : $primer3->all_results() to print all results or
\&            $primer3->all_results('primer3 result name',
\&            'other results') to return a specific result
\&  Function: Retrieve the results returned from Primer3.
\&  Returns : A reference to a hash
\&  Args    : Optional array of results to retrieve
.Ve
.Sh "primer_results"
.IX Subsection "primer_results"
.Vb 6
\&  Title   : primer_results()
\&  Usage   : $primer3->primer_results(2) to print results for the third
\&            choice primer (indexed on 0)
\&  Function: Retrieve the results returned from Primer3 for specific primer pairs.
\&  Returns : A reference to a hash
\&  Args    : A number between 0 and the maximum number of primers to retrieve
.Ve
.Sh "_readfile"
.IX Subsection "_readfile"
.Vb 6
\&  Title   : _readfile()
\&  Usage   : $self->_readfile();
\&  Function: An internal function that reads a file and sets up the results
\&  Returns : Nothing.
\&  Args    : None
\&  Notes   :
.Ve
.Sh "next_primer"
.IX Subsection "next_primer"
.Vb 7
\&  Title   : next_primer()
\&  Usage   : while (my $primed_seq  = $primer3->next_primer()) {
\&  Function: Retrieve the primed sequence and a primer pair, one at a time
\&  Returns : Returns a Bio::Seq::PrimedSeq feature, one at a time
\&  Args    : None
\&  Notes   : Use $primed_seq->annotated_seq to get an annotated sequence
\&            object you can write out.
.Ve
.Sh "primer_stream"
.IX Subsection "primer_stream"
.Vb 6
\&  Title   : primer_stream()
\&  Usage   : while (my $primed_seq  = $primer3->primer_stream()) {
\&  Function: Retrieve the primer/sequences one at a time
\&  Returns : Returns a Bio::Seq::PrimedSeq feature, one at a time
\&  Args    : None
\&  Notes   : Deprecated, just a link to next_primer
.Ve
.Sh "_separate"
.IX Subsection "_separate"
.Vb 7
\&  Title   : _separate()
\&  Usage   : $self->_separate();
\&  Function: An internal function that groups the results by number
\&            (e.g. primer pair 1, etc)
\&  Returns : Nothing.
\&  Args    : None
\&  Notes   :
.Ve
.Sh "_set_variable"
.IX Subsection "_set_variable"
.Vb 6
\&  Title   : _set_variable()
\&  Usage   : $self->_set_variable('variable name', 'value');
\&  Function: An internal function that sets a variable
\&  Returns : Nothing.
\&  Args    : None
\&  Notes   : Used to set $self->{results} and $self->seqobject
.Ve
