.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PopGen::Genotype 3"
.TH Bio::PopGen::Genotype 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::PopGen::Genotype \- An implementation of GenotypeI which is just an allele container
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Bio::PopGen::Genotype;
\&  my $genotype = new Bio::PopGen::Genotype(-marker_name   => $name,
\&                                           -individual_id => $indid,
\&                                           -alleles       => \e@alleles);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object will contain alleles for a given marker for a given
individual.
.PP
The class variable BlankAlleles (accessible through
\&\f(CW$Bio::PopGen::Genotype::BlankAlleles\fR = 'somepattern') can be set to a
regexp pattern for identifying blank alleles which should no be
counted (they are effectively missing data).  By default it set to
match white space, '\-', 'N' or 'n', and '?' as blank alleles which are
skipped.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Matthew Hahn, matthew.hahn\-at\-duke.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : my $obj = new Bio::PopGen::Genotype();
\& Function: Builds a new Bio::PopGen::Genotype object 
\& Returns : an instance of Bio::PopGen::Genotype
\& Args    : -marker_name   => string representing name of the marker
\&           -individual_id => string representing individual id (optional)
\&           -alleles       => arrayref with each item in the array being an allele
.Ve
.Sh "marker_name"
.IX Subsection "marker_name"
.Vb 5
\& Title   : marker_name
\& Usage   : my $name = $genotype->marker_name();
\& Function: Get the marker name for a genotype result
\& Returns : string
\& Args    : [optional] marker name value to store
.Ve
.Sh "individual_id"
.IX Subsection "individual_id"
.Vb 8
\& Title   : individual_id
\& Usage   : my $indid = $genotype->individual_id();
\& Function: Gets the individual id associated with a genotype
\&           This is effectively a back reference since we will typically
\&           associate a genotype with an individual with an 
\&           individual HAS-A genotype relationship.
\& Returns : unique id string for an individual
\& Args    : none
.Ve
.Sh "get_Alleles"
.IX Subsection "get_Alleles"
.Vb 6
\& Title   : get_Alleles
\& Usage   : my @alleles = $genotype->get_Alleles();
\& Function: Get the alleles for a given marker and individual
\& Returns : array of alleles (strings in this implementation)
\& Args    : $showblank - boolean flag to indicate return ALL alleles not 
\&                        skipping the coded EMPTY alleles
.Ve
.PP
.Vb 2
\& Note    : Uses the class variable $BlankAlleles to test if alleles
\&           should be skipped or not.
.Ve
.Sh "add_Allele"
.IX Subsection "add_Allele"
.Vb 8
\& Title   : add_Allele
\& Usage   : $genotype->add_Allele(@alleles);
\& Function: Add alleles to the genotype, at this point there is no
\&           verification to insure that haploid individuals only have 1 
\&           allele or that diploids only have 2 - we assume that is
\&           done by the user creating these objects 
\& Returns : count of the number of alleles in genotype
\& Args    : Array of alleles to store
.Ve
.Sh "reset_Alleles"
.IX Subsection "reset_Alleles"
.Vb 5
\& Title   : reset_Alleles
\& Usage   : $genotype->reset_Alleles;
\& Function: Resets the stored alleles so the list is empty
\& Returns : None
\& Args    : None
.Ve
