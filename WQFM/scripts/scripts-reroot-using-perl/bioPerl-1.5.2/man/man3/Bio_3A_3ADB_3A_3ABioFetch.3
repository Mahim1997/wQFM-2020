.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::BioFetch 3"
.TH Bio::DB::BioFetch 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::BioFetch \- Database object interface to BioFetch retrieval
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Bio::DB::BioFetch;
.Ve
.PP
.Vb 1
\& $bf = new Bio::DB::BioFetch;
.Ve
.PP
.Vb 1
\& $seq = $bf->get_Seq_by_id('BUM');  # EMBL or SWALL ID
.Ve
.PP
.Vb 4
\& # change formats, storage procedures
\& $bf = new Bio::DB::BioFetch(-format        => 'fasta',
\&                             -retrievaltype => 'tempfile',
\&                             -db            => 'EMBL');
.Ve
.PP
.Vb 10
\& $stream = $bf->get_Stream_by_id(['BUM','J00231']);
\& while (my $s = $stream->next_seq) {
\&    print $s->seq,"\en";
\& }
\& # get a RefSeq entry
\& $bf->db('refseq');
\& eval {
\&     $seq = $bf->get_Seq_by_version('NM_006732.1'); # RefSeq VERSION
\& };
\& print "accession is ", $seq->accession_number, "\en" unless $@;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::BioFetch is a guaranteed best effort sequence entry fetching
method.  It goes to the Web-based dbfetch server located at the \s-1EBI\s0
(http://www.ebi.ac.uk/cgi\-bin/dbfetch) to retrieve sequences in the
\&\s-1EMBL\s0 or GenBank sequence repositories.
.PP
This module implements all the Bio::DB::RandomAccessI interface, plus
the \fIget_Stream_by_id()\fR and \fIget_Stream_by_acc()\fR methods that are found
in the Bio::DB::SwissProt interface.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Lincoln Stein"
.IX Header "AUTHOR - Lincoln Stein"
Email Lincoln Stein  <lstein@cshl.org<
.PP
Also thanks to Heikki Lehvaslaiho <heikki-at-bioperl-dot-org> for the
BioFetch server and interface specification.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $bf = Bio::DB::BioFetch->new(@args)
\& Function: Construct a new Bio::DB::BioFetch object
\& Returns : a Bio::DB::BioFetch object
\& Args    : see below
\& Throws  :
.Ve
.PP
@args are standard \-name=>value options as listed in the following
table. If you do not provide any options, the module assumes reasonable
defaults.
.PP
.Vb 2
\&  Option         Value                            Default
\&  ------         -----                            -------
.Ve
.PP
.Vb 5
\&  -baseaddress   location of dbfetch server       http://www.ebi.ac.uk/cgi-bin/dbfetch
\&  -retrievaltype "tempfile" or "io_string"        io_string
\&  -format        "embl", "fasta", "swissprot",    embl
\&                  or "genbank"
\&  -db            "embl", "genbank" or "swissprot" embl
.Ve
.Sh "new_from_registry"
.IX Subsection "new_from_registry"
.Vb 6
\& Title   : new_from_registry
\& Usage   : $biofetch = $db->new_from_registry(%config)
\& Function: Creates a BioFetch object from the registry config hash
\& Returns : itself
\& Args    : A configuration hash (see Registry.pm)
\& Throws  :
.Ve
.Sh "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 6
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db->get_Seq_by_id('ROA1_HUMAN')
\& Function: Gets a Bio::Seq object by its name
\& Returns : a Bio::Seq object
\& Args    : the id (as a string) of a sequence
\& Throws  : "id does not exist" exception
.Ve
.Sh "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 6
\& Title   : get_Seq_by_acc
\& Usage   : $seq = $db->get_Seq_by_acc('X77802');
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : accession number (as a string)
\& Throws  : "acc does not exist" exception
.Ve
.Sh "get_Seq_by_gi"
.IX Subsection "get_Seq_by_gi"
.Vb 6
\& Title   : get_Seq_by_gi
\& Usage   : $seq = $db->get_Seq_by_gi('405830');
\& Function: Gets a Bio::Seq object by gi number
\& Returns : A Bio::Seq object
\& Args    : gi number (as a string)
\& Throws  : "gi does not exist" exception
.Ve
.Sh "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 6
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db->get_Seq_by_version('X77802.1');
\& Function: Gets a Bio::Seq object by sequence version
\& Returns : A Bio::Seq object
\& Args    : accession.version (as a string)
\& Throws  : "acc.version does not exist" exception
.Ve
.Sh "get_Stream_by_id"
.IX Subsection "get_Stream_by_id"
.Vb 6
\&  Title   : get_Stream_by_id
\&  Usage   : $stream = $db->get_Stream_by_id( [$uid1, $uid2] );
\&  Function: Gets a series of Seq objects by unique identifiers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of unique identifiers for
\&                   the desired sequence entries
.Ve
.Sh "get_Stream_by_gi"
.IX Subsection "get_Stream_by_gi"
.Vb 7
\&  Title   : get_Stream_by_gi
\&  Usage   : $seq = $db->get_Seq_by_gi([$gi1, $gi2]);
\&  Function: Gets a series of Seq objects by gi numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of gi numbers for
\&                   the desired sequence entries
\&  Note    : For GenBank, this just calls the same code for get_Stream_by_id()
.Ve
.Sh "get_Stream_by_batch"
.IX Subsection "get_Stream_by_batch"
.Vb 7
\&  Title   : get_Stream_by_batch
\&  Usage   : $seq = $db->get_Stream_by_batch($ref);
\&  Function: Get a series of Seq objects by their IDs
\&  Example :
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : an array reference containing a list of unique
\&            ids/accession numbers.
.Ve
.PP
In some of the Bio::DB::* moduels, \fIget_Stream_by_id()\fR is called
\&\fIget_Stream_by_batch()\fR.  Since there seems to be no consensus, this
is provided as an alias.
.SH "The remainder of these methods are for internal use"
.IX Header "The remainder of these methods are for internal use"
.Sh "get_request"
.IX Subsection "get_request"
.Vb 5
\& Title   : get_request
\& Usage   : my $url = $self->get_request
\& Function: returns a HTTP::Request object
\& Returns : 
\& Args    : %qualifiers = a hash of qualifiers (ids, format, etc)
.Ve
.Sh "default_format"
.IX Subsection "default_format"
.Vb 5
\& Title   : default_format
\& Usage   : $format = $self->default_format
\& Function: return the default format
\& Returns : a string
\& Args    :
.Ve
.Sh "default_db"
.IX Subsection "default_db"
.Vb 5
\& Title   : default_db
\& Usage   : $db = $self->default_db
\& Function: return the default database
\& Returns : a string
\& Args    :
.Ve
.Sh "db"
.IX Subsection "db"
.Vb 5
\& Title   : db
\& Usage   : $db = $self->db([$db])
\& Function: get/set the database
\& Returns : a string
\& Args    : new database
.Ve
.Sh "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 8
\& Title   : postprocess_data
\& Usage   : $self->postprocess_data ( 'type' => 'string',
\&                                     'location' => \e$datastr);
\& Function: process downloaded data before loading into a Bio::SeqIO
\& Returns : void
\& Args    : hash with two keys - 'type' can be 'string' or 'file'
\&                              - 'location' either file location or string 
\&                                 reference containing data
.Ve
.Sh "request_format"
.IX Subsection "request_format"
.Vb 9
\& Title   : request_format
\& Usage   : my ($req_format, $ioformat) = $self->request_format;
\&           $self->request_format("genbank");
\&           $self->request_format("fasta");
\& Function: Get/Set sequence format retrieval. The get-form will normally not
\&           be used outside of this and derived modules.
\& Returns : Array of two strings, the first representing the format for
\&           retrieval, and the second specifying the corresponding SeqIO format.
\& Args    : $format = sequence format
.Ve
.Sh "Bio::DB::WebDBSeqI methods"
.IX Subsection "Bio::DB::WebDBSeqI methods"
Overriding WebDBSeqI method to help newbies to retrieve sequences.
\&\s-1EMBL\s0 database is all too often passed RefSeq accessions. This
redirects those calls. See Bio::DB::RefSeq.
.Sh "get_Stream_by_acc"
.IX Subsection "get_Stream_by_acc"
.Vb 6
\&  Title   : get_Stream_by_acc
\&  Usage   : $seq = $db->get_Seq_by_acc([$acc1, $acc2]);
\&  Function: Gets a series of Seq objects by accession numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of accession numbers for
\&                   the desired sequence entries
.Ve
.Sh "_check_id"
.IX Subsection "_check_id"
.Vb 7
\&  Title   : _check_id
\&  Usage   : 
\&  Function: Throw on whole chromosome NCBI sequences not in sequence databases
\&            and redirect RefSeq accession requests sent to EMBL.
\&  Returns : 
\&  Args    : $id(s), $string
\&  Throws  : if accessionn number indicates whole chromosome NCBI sequence
.Ve
