.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Coordinate::Result 3"
.TH Bio::Coordinate::Result 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Coordinate::Result \- Results from coordinate transformation
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Coordinate::Result;
.Ve
.PP
.Vb 2
\&  #get results from a Bio::Coordinate::MapperI
\&  $matched = $result->each_match;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The results from Bio::Coordinate::MapperI are kept in an object which
itself is a split location, See Bio::Location::Split. The results
are either Matches or Gaps.  See Bio::Coordinate::Result::Match and
Bio::Coordinate::Result::Match.
.PP
If only one Match is returned, there is a convenience method of
retrieving it or accessing its methods. Same holds true for a Gap.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "add_location"
.IX Subsection "add_location"
.Vb 3
\& Title   : add_sub_Location
\& Usage   : $obj->add_sub_Location($variant)
\& Function:
.Ve
.PP
.Vb 1
\&           Pushes one Bio::LocationI into the list of variants.
.Ve
.PP
.Vb 3
\& Example : 
\& Returns : 1 when succeeds
\& Args    : Location object
.Ve
.Sh "add_result"
.IX Subsection "add_result"
.Vb 6
\& Title   : add_result
\& Usage   : $obj->add_result($result)
\& Function: Adds the contents of one Bio::Coordinate::Result
\& Example : 
\& Returns : 1 when succeeds
\& Args    : Result object
.Ve
.Sh "seq_id"
.IX Subsection "seq_id"
.Vb 3
\&  Title   : seq_id
\&  Usage   : my $seqid = $location->seq_id();
\&  Function: Get/Set seq_id that location refers to
.Ve
.PP
.Vb 2
\&            We override this here in order to propagate to all sublocations
\&            which are not remote (provided this root is not remote either)
.Ve
.PP
.Vb 2
\&  Returns : seq_id
\&  Args    : [optional] seq_id value to set
.Ve
.Sh "Convenience methods"
.IX Subsection "Convenience methods"
These methods are shortcuts to Match and Gap locations.
.Sh "each_gap"
.IX Subsection "each_gap"
.Vb 3
\& Title   : each_gap
\& Usage   : $obj->each_gap();
\& Function:
.Ve
.PP
.Vb 1
\&            Returns a list of Bio::Coordianate::Result::Gap objects.
.Ve
.PP
.Vb 2
\& Returns : list of gaps
\& Args    : none
.Ve
.Sh "each_match"
.IX Subsection "each_match"
.Vb 3
\& Title   : each_match
\& Usage   : $obj->each_match();
\& Function:
.Ve
.PP
.Vb 1
\&            Returns a list of Bio::Coordinate::Result::Match objects.
.Ve
.PP
.Vb 2
\& Returns : list of Matchs
\& Args    : none
.Ve
.Sh "match"
.IX Subsection "match"
.Vb 6
\& Title   : match
\& Usage   : $match_object = $obj->match(); #or
\&           $gstart = $obj->gap->start;
\& Function: Read only method for retrieving or accessing the match object.
\& Returns : one Bio::Coordinate::Result::Match
\& Args    :
.Ve
.Sh "gap"
.IX Subsection "gap"
.Vb 6
\& Title   : gap
\& Usage   : $gap_object = $obj->gap(); #or
\&           $gstart = $obj->gap->start;
\& Function: Read only method for retrieving or accessing the gap object.
\& Returns : one Bio::Coordinate::Result::Gap
\& Args    :
.Ve
.Sh "purge_gaps"
.IX Subsection "purge_gaps"
.Vb 5
\& Title   : purge_gaps
\& Usage   : $gap_count = $obj->purge_gaps;
\& Function: remove all gaps from the Result
\& Returns : count of removed gaps
\& Args    :
.Ve
