.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::Result::HmmpfamResult 3"
.TH Bio::Search::Result::HmmpfamResult 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::Result::HmmpfamResult \- A parser and result object for hmmpfam
                                     results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # generally we use Bio::SearchIO to build these objects
\&    use Bio::SearchIO;
\&    my $in = new Bio::SearchIO(-format => 'hmmer_pull',
\&                                                           -file   => 'result.hmmer');
.Ve
.PP
.Vb 3
\&    while (my $result = $in->next_result) {
\&                print $result->query_name, " ", $result->algorithm, " ", $result->num_hits(), " hits\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object implements a parser for hmmpfam result output, a program in the \s-1HMMER\s0
package.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = new Bio::SearchIO::Result::hmmpfam();
\& Function: Builds a new Bio::SearchIO::Result::hmmpfam object 
\& Returns : Bio::SearchIO::Result::hmmpfam
\& Args    : -chunk  => [Bio::Root::IO, $start, $end] (required if no -parent)
\&           -parent => Bio::PullParserI object (required if no -chunk)
\&           -parameters => hash ref of search parameters (key => value), optional
\&           -statistics => hash ref of search statistics (key => value), optional
.Ve
.PP
.Vb 5
\&                   where the array ref provided to -chunk contains an IO object
\&           for a filehandle to something representing the raw data of the
\&           result, and $start and $end define the tell() position within the
\&           filehandle that the result data starts and ends (optional; defaults
\&           to start and end of the entire thing described by the filehandle)
.Ve
.Sh "next_hit"
.IX Subsection "next_hit"
.Vb 6
\& Title   : next_hit
\& Usage   : while( $hit = $result->next_hit()) { ... }
\& Function: Returns the next available Hit object, representing potential
\&           matches between the query and various entities from the database.
\& Returns : a Bio::Search::Hit::HitI object or undef if there are no more.
\& Args    : none
.Ve
.Sh "next_model"
.IX Subsection "next_model"
.Vb 5
\& Title   : next_model
\& Usage   : my $domain = $result->next_model
\& Function: Returns the next domain - this is an alias for next_hit()
\& Returns : L<Bio::Search::Hit::HitI> object
\& Args    : none
.Ve
.Sh "hits"
.IX Subsection "hits"
.Vb 5
\& Title   : hits
\& Usage   : my @hits = $result->hits
\& Function: Returns the HitI objects contained within this Result
\& Returns : Array of Bio::Search::Hit::HitI objects
\& Args    : none
.Ve
.PP
See Also: Bio::Search::Hit::HitI
.Sh "models"
.IX Subsection "models"
.Vb 5
\& Title   : models
\& Usage   : my @domains = $result->models;
\& Function: Returns the list of HMM models seen - this is an alias for hits()
\& Returns : Array of L<Bio::Search::Hit::HitI> objects
\& Args    : none
.Ve
.Sh "sort_hits"
.IX Subsection "sort_hits"
.Vb 22
\& Title          : sort_hits
\& Usage          : $result->sort_hits('<score')
\& Function       : Sorts the hits so that they come out in the desired order when
\&              hits() or next_hit() is called.
\& Returns        : n/a
\& Args           : A coderef for the sort function. See the documentation on the Perl
\&              sort() function for guidelines on writing sort functions.
\&                          You will be sorting array references, not HitI objects. The
\&                          references contain name as element 0, description as element 1,
\&                          score as element 2, significance as element 3 and number of hsps
\&                          as element 4.
\&                          By default the sort order is ascending significance value (ie.
\&                          most significant hits first).
\& Note           : To access the special variables $a and $b used by the Perl sort()
\&              function the user function must access
\&                          Bio::Search::Result::HmmpfamResult namespace. 
\&              For example, use : 
\&              $result->sort_hits(
\&                                sub{$Bio::Search::Result::HmmpfamResult::a->[2]
\&                                                         <=> 
\&                                        $Bio::Search::Result::HmmpfamResult::b->[2]});
\&              NOT $result->sort_hits($a->[2] <=> $b->[2]);
.Ve
.Sh "rewind"
.IX Subsection "rewind"
.Vb 6
\& Title   : rewind
\& Usage   : $result->rewind;
\& Function: Allow one to reset the Hit iterator to the beginning, so that
\&           next_hit() will subsequently return the first hit and so on.
\& Returns : n/a
\& Args    : none
.Ve
