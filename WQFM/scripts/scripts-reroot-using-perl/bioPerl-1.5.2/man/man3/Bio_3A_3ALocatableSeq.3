.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::LocatableSeq 3"
.TH Bio::LocatableSeq 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::LocatableSeq \- A Sequence object with start/end points on it
that can be projected into a MSA or have coordinates relative to
another seq.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Bio::LocatableSeq;
\&    my $seq = new Bio::LocatableSeq(-seq => "CAGT-GGT",
\&                                    -id  => "seq1",
\&                                    -start => 1,
\&                                    -end   => 7);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    # a normal sequence object
\&    $locseq->seq();
\&    $locseq->id();
.Ve
.PP
.Vb 3
\&    # has start,end points
\&    $locseq->start();
\&    $locseq->end();
.Ve
.PP
.Vb 1
\&    # inherits off RangeI, so range operations possible
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.PP
The locatable sequence object was developed mainly because the
SimpleAlign object requires this functionality, and in the rewrite
of the Sequence object we had to decide what to do with this.
.PP
It is, to be honest, not well integrated with the rest of bioperl, for
example, the \fItrunc()\fR function does not return a LocatableSeq object,
as some might have thought. There are all sorts of nasty gotcha's
about interactions between coordinate systems when these sort of
objects are used.
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "start"
.IX Subsection "start"
.Vb 5
\& Title   : start
\& Usage   : $obj->start($newval)
\& Function:
\& Returns : value of start
\& Args    : newvalue (optional)
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 5
\& Title   : end
\& Usage   : $obj->end($newval)
\& Function:
\& Returns : value of end
\& Args    : newvalue (optional)
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 5
\& Title   : strand
\& Usage   : $obj->strand($newval)
\& Function:
\& Returns : value of strand
\& Args    : newvalue (optional)
.Ve
.Sh "get_nse"
.IX Subsection "get_nse"
.Vb 6
\& Title   : get_nse
\& Usage   :
\& Function: read-only name of form id/start-end
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "no_gap"
.IX Subsection "no_gap"
.Vb 3
\& Title   : no_gaps
\& Usage   :$self->no_gaps('.')
\& Function:
.Ve
.PP
.Vb 2
\&           Gets number of gaps in the sequence. The count excludes
\&           leading or trailing gap characters.
.Ve
.PP
.Vb 3
\&           Valid bioperl sequence characters are [A-Za-z\e-\e.\e*]. Of
\&           these, '.' and '-' are counted as gap characters unless an
\&           optional argument specifies one of them.
.Ve
.PP
.Vb 2
\& Returns : number of internal gaps in the sequnce.
\& Args    : a gap character (optional)
.Ve
.Sh "column_from_residue_number"
.IX Subsection "column_from_residue_number"
.Vb 3
\& Title   : column_from_residue_number
\& Usage   : $col = $seq->column_from_residue_number($resnumber)
\& Function:
.Ve
.PP
.Vb 3
\&           This function gives the position in the alignment
\&           (i.e. column number) of the given residue number in the
\&           sequence. For example, for the sequence
.Ve
.PP
.Vb 1
\&             Seq1/91-97 AC..DEF.GH
.Ve
.PP
.Vb 1
\&           column_from_residue_number(94) returns 5.
.Ve
.PP
.Vb 3
\&           An exception is thrown if the residue number would lie
\&           outside the length of the aligment
\&           (e.g. column_from_residue_number( "Seq2", 22 )
.Ve
.PP
.Vb 4
\& Returns : A column number for the position of the
\&           given residue in the given sequence (1 = first column)
\& Args    : A residue number in the whole sequence (not just that
\&           segment of it in the alignment)
.Ve
.Sh "location_from_column"
.IX Subsection "location_from_column"
.Vb 3
\& Title   : location_from_column
\& Usage   : $loc = $ali->location_from_column($column_number)
\& Function:
.Ve
.PP
.Vb 5
\&           This function gives the residue number for a given position
\&           in the alignment (i.e. column number) of the given. Gaps
\&           complicate this process and force the output to be a
\&           L<Bio::Range> where values can be undefined. For example,
\&           for the sequence:
.Ve
.PP
.Vb 1
\&             Seq/91-97 .AC..DEF.G.
.Ve
.PP
.Vb 4
\&           location_from_column( 3 ) position 93
\&           location_from_column( 2 ) position 92^93
\&           location_from_column(10 ) position 97^98
\&           location_from_column( 1 ) position undef
.Ve
.PP
.Vb 7
\&           An exact position returns a Bio::Location::Simple object
\&           where where location_type() returns 'EXACT', if a position
\&           is between bases location_type() returns 'IN-BETWEEN'.
\&           Column before the first residue returns undef. Note that if
\&           the position is after the last residue in the alignment,
\&           that there is no guarantee that the original sequence has
\&           residues after that position.
.Ve
.PP
.Vb 2
\&           An exception is thrown if the column number is not within
\&           the sequence.
.Ve
.PP
.Vb 3
\& Returns : Bio::Location::Simple or undef
\& Args    : A column number
\& Throws  : If column is not within the sequence
.Ve
.PP
See Bio::Location::Simple for more.
.Sh "revcom"
.IX Subsection "revcom"
.Vb 6
\& Title   : revcom
\& Usage   : $rev = $seq->revcom()
\& Function: Produces a new Bio::LocatableSeq object which
\&           has the reversed complement of the sequence. For protein
\&           sequences this throws an exception of "Sequence is a
\&           protein. Cannot revcom"
.Ve
.PP
.Vb 2
\& Returns : A new Bio::LocatableSeq object
\& Args    : none
.Ve
.Sh "trunc"
.IX Subsection "trunc"
.Vb 3
\& Title   : trunc
\& Usage   : $subseq = $myseq->trunc(10,100);
\& Function: Provides a truncation of a sequence,
.Ve
.PP
.Vb 4
\& Example :
\& Returns : a fresh Bio::PrimarySeqI implementing object
\& Args    : Two integers denoting first and last columns of the
\&           sequence to be included into sub-sequence.
.Ve
