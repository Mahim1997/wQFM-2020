.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Structure::Atom 3"
.TH Bio::Structure::Atom 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Structure::Atom \- Bioperl structure Object, describes an Atom
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #add synopsis here
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object stores a Bio::Structure::Atom
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Kris Boulez"
.IX Header "AUTHOR - Kris Boulez"
Email kris.boulez@algonomics.com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 4
\& Title   : new()
\& Usage   : $struc = Bio::Structure::Atom->new( 
\&                                           -id  => 'human_id',
\&                                           );
.Ve
.PP
.Vb 3
\& Function: Returns a new Bio::Structure::Atom object from basic 
\&        constructors. Probably most called from Bio::Structure::IO.
\& Returns : a new Bio::Structure::Atom object
.Ve
.Sh "x()"
.IX Subsection "x()"
.Vb 6
\& Title   : x
\& Usage   : $x = $atom->x($x);
\& Function: Set/gets the X coordinate for an Atom
\& Returns : The value for the X coordinate of the Atom (This is just a number,
\&        it is expected to be in Angstrom, but no garantees)
\& Args    : The X coordinate as a number
.Ve
.Sh "y()"
.IX Subsection "y()"
.Vb 6
\& Title   : y
\& Usage   : $y = $atom->y($y);
\& Function: Set/gets the Y coordinate for an Atom
\& Returns : The value for the Y coordinate of the Atom (This is just a number,
\&        it is eypected to be in Angstrom, but no garantees)
\& Args    : The Y coordinate as a number
.Ve
.Sh "z()"
.IX Subsection "z()"
.Vb 6
\& Title   : z
\& Usage   : $z = $atom->z($z);
\& Function: Set/gets the Z coordinate for an Atom
\& Returns : The value for the Z coordinate of the Atom (This is just a number,
\&        it is ezpected to be in Angstrom, but no garantees)
\& Args    : The Z coordinate as a number
.Ve
.Sh "\fIxyz()\fP"
.IX Subsection "xyz()"
.Vb 5
\& Title   : xyz
\& Usage   : ($x,$y,$z) = $atom->xyz;
\& Function: Gets the XYZ coordinates for an Atom
\& Returns : A list with the value for the XYZ coordinate of the Atom 
\& Args    :
.Ve
.Sh "\fIresidue()\fP"
.IX Subsection "residue()"
.Vb 5
\& Title   : residue
\& Usage   : 
\& Function:  No code here, all parent/child stuff via Entry
\& Returns : 
\& Args    :
.Ve
.Sh "\fIicode()\fP"
.IX Subsection "icode()"
.Vb 5
\& Title   : icode
\& Usage   : $icode = $atom->icode($icode)
\& Function: Sets/gets the icode
\& Returns : Returns the icode for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIserial()\fP"
.IX Subsection "serial()"
.Vb 5
\& Title   : serial
\& Usage   : $serial = $atom->serial($serial)
\& Function: Sets/gets the serial number
\& Returns : Returns the serial number for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIoccupancy()\fP"
.IX Subsection "occupancy()"
.Vb 5
\& Title   : occupancy
\& Usage   : $occupancy = $atom->occupancy($occupancy)
\& Function: Sets/gets the occupancy
\& Returns : Returns the occupancy for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fItempfactor()\fP"
.IX Subsection "tempfactor()"
.Vb 5
\& Title   : tempfactor
\& Usage   : $tempfactor = $atom->tempfactor($tempfactor)
\& Function: Sets/gets the tempfactor
\& Returns : Returns the tempfactor for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsegID()\fP"
.IX Subsection "segID()"
.Vb 5
\& Title   : segID
\& Usage   : $segID = $atom->segID($segID)
\& Function: Sets/gets the segID
\& Returns : Returns the segID for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIpdb_atomname()\fP"
.IX Subsection "pdb_atomname()"
.Vb 5
\& Title   : pdb_atomname
\& Usage   : $pdb_atomname = $atom->pdb_atomname($pdb_atomname)
\& Function: Sets/gets the pdb_atomname (atomname used in the PDB file)
\& Returns : Returns the pdb_atomname for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIelement()\fP"
.IX Subsection "element()"
.Vb 5
\& Title   : element
\& Usage   : $element = $atom->element($element)
\& Function: Sets/gets the element
\& Returns : Returns the element for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIcharge()\fP"
.IX Subsection "charge()"
.Vb 5
\& Title   : charge
\& Usage   : $charge = $atom->charge($charge)
\& Function: Sets/gets the charge
\& Returns : Returns the charge for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsigx()\fP"
.IX Subsection "sigx()"
.Vb 5
\& Title   : sigx
\& Usage   : $sigx = $atom->sigx($sigx)
\& Function: Sets/gets the sigx
\& Returns : Returns the sigx for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsigy()\fP"
.IX Subsection "sigy()"
.Vb 5
\& Title   : sigy
\& Usage   : $sigy = $atom->sigy($sigy)
\& Function: Sets/gets the sigy
\& Returns : Returns the sigy for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsigz()\fP"
.IX Subsection "sigz()"
.Vb 5
\& Title   : sigz
\& Usage   : $sigz = $atom->sigz($sigz)
\& Function: Sets/gets the sigz
\& Returns : Returns the sigz for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsigocc()\fP"
.IX Subsection "sigocc()"
.Vb 5
\& Title   : sigocc
\& Usage   : $sigocc = $atom->sigocc($sigocc)
\& Function: Sets/gets the sigocc
\& Returns : Returns the sigocc for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIsigtemp()\fP"
.IX Subsection "sigtemp()"
.Vb 5
\& Title   : sigtemp
\& Usage   : $sigtemp = $atom->sigtemp($sigtemp)
\& Function: Sets/gets the sigtemp
\& Returns : Returns the sigtemp for this atom
\& Args    : reference to an Atom
.Ve
.Sh "\fIaniso()\fP"
.IX Subsection "aniso()"
.Vb 5
\& Title   : aniso
\& Usage   : $u12 = $atom->aniso("u12", $u12)
\& Function: Sets/gets the anisotropic temperature factors
\& Returns : Returns the requested factor for this atom
\& Args    : reference to an Atom, name of the factor, value for the factor
.Ve
.Sh "\fIid()\fP"
.IX Subsection "id()"
.Vb 5
\& Title   : id
\& Usage   : $atom->id("CZ2")
\& Function: Gets/sets the ID for this atom
\& Returns : the ID
\& Args    : the ID
.Ve
.Sh "\fI_remove_residue()\fP"
.IX Subsection "_remove_residue()"
.Vb 5
\& Title   : _remove_residue
\& Usage   : 
\& Function: Removes the Residue this Atom is atttached to.
\& Returns : 
\& Args    :
.Ve
.Sh "\fI_grandparent()\fP"
.IX Subsection "_grandparent()"
.Vb 5
\& Title   : _grandparent
\& Usage   : 
\& Function: get/set a symbolic reference to our grandparent
\& Returns : 
\& Args    :
.Ve
