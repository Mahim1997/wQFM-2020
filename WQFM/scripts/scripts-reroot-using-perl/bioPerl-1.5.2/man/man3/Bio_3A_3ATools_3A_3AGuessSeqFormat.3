.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::GuessSeqFormat 3"
.TH Bio::Tools::GuessSeqFormat 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::GuessSeqFormat \- Module for determining the sequence
format of the contents of a file, a string, or through a
filehandle.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # To guess the format of a flat file, given a filename:
\&    my $guesser = new Bio::Tools::GuessSeqFormat( -file => $filename );
\&    my $format  = $guesser->guess;
.Ve
.PP
.Vb 5
\&    # To guess the format from an already open filehandle:
\&    my $guesser = new Bio::Tools::GuessSeqFormat( -fh => $filehandle );
\&    my $format  = $guesser->guess;
\&    # If the filehandle is seekable (STDIN isn't), it will be
\&    # returned to its original position.
.Ve
.PP
.Vb 4
\&    # To guess the format of one or several lines of text (with
\&    # embedded newlines):
\&    my $guesser = new Bio::Tools::GuessSeqFormat( -text => $linesoftext );
\&    my $format = $guesser->guess;
.Ve
.PP
.Vb 6
\&    # To create a Bio::Tools::GuessSeqFormat object and set the
\&    # filename, filehandle, or line to parse afterwards:
\&    my $guesser = new Bio::Tools::GuessSeqFormat;
\&    $guesser->file($filename);
\&    $guesser->fh($filehandle);
\&    $guesser->text($linesoftext);
.Ve
.PP
.Vb 2
\&    # To guess in one go, given e.g. a filename:
\&    my $format = new Bio::Tools::GuessSeqFormat( -file => $filename )->guess;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tools::GuessSeqFormat tries to guess the format (\*(L"swiss\*(R",
\&\*(L"pir\*(R", \*(L"fasta\*(R" etc.) of the sequence or \s-1MSA\s0 in a file, in a
scalar, or through a filehandle.
.PP
The \fIguess()\fR method of a Bio::Tools::GuessSeqFormat object will
examine the data, line by line, until it finds a line to which
only one format can be assigned.  If no conclusive guess can be
made, undef is returned.
.PP
If the Bio::Tools::GuessSeqFormat object is given a filehandle
which is seekable, it will be restored to its original position
on return from the \fIguess()\fR method.
.Sh "Formats"
.IX Subsection "Formats"
Tests are currently implemented for the following formats:
.IP "\(bu" 4
ACeDB (\*(L"ace\*(R")
.IP "\(bu" 4
Blast (\*(L"blast\*(R")
.IP "\(bu" 4
ClustalW (\*(L"clustalw\*(R")
.IP "\(bu" 4
Codata (\*(L"codata\*(R")
.IP "\(bu" 4
\&\s-1EMBL\s0 (\*(L"embl\*(R")
.IP "\(bu" 4
FastA sequence (\*(L"fasta\*(R")
.IP "\(bu" 4
FastXY/FastA alignment (\*(L"fastxy\*(R")
.IP "\(bu" 4
Game \s-1XML\s0 (\*(L"game\*(R")
.IP "\(bu" 4
\&\s-1GCG\s0 (\*(L"gcg\*(R")
.IP "\(bu" 4
\&\s-1GCG\s0 Blast (\*(L"gcgblast\*(R")
.IP "\(bu" 4
\&\s-1GCG\s0 FastA (\*(L"gcgfasta\*(R")
.IP "\(bu" 4
\&\s-1GDE\s0 (\*(L"gde\*(R")
.IP "\(bu" 4
Genbank (\*(L"genbank\*(R")
.IP "\(bu" 4
Genscan (\*(L"genscan\*(R")
.IP "\(bu" 4
\&\s-1GFF\s0 (\*(L"gff\*(R")
.IP "\(bu" 4
\&\s-1HMMER\s0 (\*(L"hmmer\*(R")
.IP "\(bu" 4
\&\s-1PAUP/NEXUS\s0 (\*(L"nexus\*(R")
.IP "\(bu" 4
Phrap assembly file (\*(L"phrap\*(R")
.IP "\(bu" 4
\&\s-1NBRF/PIR\s0 (\*(L"pir\*(R")
.IP "\(bu" 4
Mase (\*(L"mase\*(R")
.IP "\(bu" 4
Mega (\*(L"mega\*(R")
.IP "\(bu" 4
\&\s-1GCG/MSF\s0 (\*(L"msf\*(R")
.IP "\(bu" 4
Pfam (\*(L"pfam\*(R")
.IP "\(bu" 4
Phylip (\*(L"phylip\*(R")
.IP "\(bu" 4
Prodom (\*(L"prodom\*(R")
.IP "\(bu" 4
Raw (\*(L"raw\*(R")
.IP "\(bu" 4
\&\s-1RSF\s0 (\*(L"rsf\*(R")
.IP "\(bu" 4
Selex (\*(L"selex\*(R")
.IP "\(bu" 4
Stockholm (\*(L"stockholm\*(R")
.IP "\(bu" 4
Swissprot (\*(L"swiss\*(R")
.IP "\(bu" 4
Tab (\*(L"tab\*(R")
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and
other Bioperl modules.  Send your comments and suggestions
preferably to one of the Bioperl mailing lists.  Your
participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us
keep track the bugs and their resolution.  Bug reports can be
submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Kähäri, andreas.kahari@ebi.ac.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehväslaiho, heikki-at-bioperl-dot-org
.SH "METHODS"
.IX Header "METHODS"
Methods available to Bio::Tools::GuessSeqFormat objects
are described below.  Methods with names beginning with an
underscore are considered to be internal.
.Sh "new"
.IX Subsection "new"
.Vb 11
\& Title      : new
\& Usage      : $guesser = new Bio::Tools::GuessSeqFormat( ... );
\& Function   : Creates a new object.
\& Example    : See SYNOPSIS.
\& Returns    : A new object.
\& Arguments  : -file The filename of the file whose format is to
\&                    be guessed, or
\&              -fh   An already opened filehandle from which a text
\&                    stream may be read, or
\&              -text A scalar containing one or several lines of
\&                    text with embedded newlines.
.Ve
.PP
.Vb 3
\&    If more than one of the above arguments are given, they
\&    are tested in the order -text, -file, -fh, and the first
\&    available argument will be used.
.Ve
.Sh "file"
.IX Subsection "file"
.Vb 8
\& Title      : file
\& Usage      : $guesser->file($filename);
\&              $filename = $guesser->file;
\& Function   : Gets or sets the current filename associated with
\&              an object.
\& Returns    : The new filename.
\& Arguments  : The filename of the file whose format is to be
\&              guessed.
.Ve
.PP
.Vb 2
\&    A call to this method will clear the current filehandle and
\&    the current lines of text associated with the object.
.Ve
.Sh "fh"
.IX Subsection "fh"
.Vb 8
\& Title      : fh
\& Usage      : $guesser->fh($filehandle);
\&              $filehandle = $guesser->fh;
\& Function   : Gets or sets the current filehandle associated with
\&              an object.
\& Returns    : The new filehandle.
\& Arguments  : An already opened filehandle from which a text
\&              stream may be read.
.Ve
.PP
.Vb 2
\&    A call to this method will clear the current filename and
\&    the current lines of text associated with the object.
.Ve
.Sh "text"
.IX Subsection "text"
.Vb 8
\& Title      : text
\& Usage      : $guesser->text($linesoftext);
\&              $linesofext = $guesser->text;
\& Function   : Gets or sets the current text associated with an
\&              object.
\& Returns    : The new lines of texts.
\& Arguments  : A scalar containing one or several lines of text,
\&              including embedded newlines.
.Ve
.PP
.Vb 2
\&    A call to this method will clear the current filename and
\&    the current filehandle associated with the object.
.Ve
.Sh "guess"
.IX Subsection "guess"
.Vb 8
\& Title      : guess
\& Usage      : $format = $guesser->guess;
\&              @format = $guesser->guess; # if given a line of text
\& Function   : Guesses the format of the data accociated with the
\&              object.
\& Returns    : A format string such as "swiss" or "pir".  If a
\&              format can not be found, undef is returned.
\& Arguments  : None.
.Ve
.PP
.Vb 4
\&    If the object is associated with a filehandle and if that
\&    filehandle is searchable, the position of the filehandle
\&    will be returned to its original position before the method
\&    returns.
.Ve
.SH "HELPER SUBROUTINES"
.IX Header "HELPER SUBROUTINES"
All helper subroutines will, given a line of text and the line
number of the same line, return 1 if the line possibly is from a
file of the type that they perform a test of.
.PP
A zero return value does not mean that the line is not part
of a certain type of file, just that the test did not find any
characteristics of that type of file in the line.
.Sh "_possibly_ace"
.IX Subsection "_possibly_ace"
From bioperl test data, and from
\&\*(L"http://www.isrec.isb\-sib.ch/DEA/module8/B_Stevenson/Practicals/transcriptome_recon/transcriptome_recon.html\*(R".
.Sh "_possibly_blast"
.IX Subsection "_possibly_blast"
.Vb 1
\& From various blast results.
.Ve
.Sh "_possibly_clustalw"
.IX Subsection "_possibly_clustalw"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_codata"
.IX Subsection "_possibly_codata"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_embl"
.IX Subsection "_possibly_embl"
From
\&\*(L"http://www.ebi.ac.uk/embl/Documentation/User_manual/usrman.html#3.3\*(R".
.Sh "_possibly_fasta"
.IX Subsection "_possibly_fasta"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_fastxy"
.IX Subsection "_possibly_fastxy"
From bioperl test data.
.Sh "_possibly_game"
.IX Subsection "_possibly_game"
From bioperl testdata.
.Sh "_possibly_gcg"
.IX Subsection "_possibly_gcg"
From bioperl, Bio::SeqIO::gcg.
.Sh "_possibly_gcgblast"
.IX Subsection "_possibly_gcgblast"
From bioperl testdata.
.Sh "_possibly_gcgfasta"
.IX Subsection "_possibly_gcgfasta"
From bioperl testdata.
.Sh "_possibly_gde"
.IX Subsection "_possibly_gde"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_genbank"
.IX Subsection "_possibly_genbank"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
Format of [apparantly optional] file header from
\&\*(L"http://www.umdnj.edu/rcompweb/PA/Notes/GenbankFF.htm\*(R".
.Sh "_possibly_genscan"
.IX Subsection "_possibly_genscan"
From bioperl test data.
.Sh "_possibly_gff"
.IX Subsection "_possibly_gff"
From bioperl test data.
.Sh "_possibly_hmmer"
.IX Subsection "_possibly_hmmer"
From bioperl test data.
.Sh "_possibly_nexus"
.IX Subsection "_possibly_nexus"
From \*(L"http://paup.csit.fsu.edu/nfiles.html\*(R".
.Sh "_possibly_mase"
.IX Subsection "_possibly_mase"
From bioperl test data.
More detail from \*(L"http://www.umdnj.edu/rcompweb/PA/Notes/GenbankFF.htm\*(R".
.Sh "_possibly_mega"
.IX Subsection "_possibly_mega"
From the ensembl broswer (AlignView data export).
.Sh "_possibly_msf"
.IX Subsection "_possibly_msf"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_phrap"
.IX Subsection "_possibly_phrap"
From \*(L"http://biodata.ccgb.umn.edu/docs/contigimage.html\*(R".
From \*(L"http://genetics.gene.cwru.edu/gene508/Lec6.htm\*(R".
From bioperl test data (\*(L"*.ace.1\*(R" files).
.Sh "_possibly_pir"
.IX Subsection "_possibly_pir"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
The \*(L".,()\*(R" spotted in bioperl test data.
.Sh "_possibly_pfam"
.IX Subsection "_possibly_pfam"
From bioperl test data.
.Sh "_possibly_phylip"
.IX Subsection "_possibly_phylip"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".  Initial space
allowed on first line (spotted in ensembl AlignView exported
data).
.Sh "_possibly_prodom"
.IX Subsection "_possibly_prodom"
From \*(L"http://prodes.toulouse.inra.fr/prodom/2002.1/documentation/data.php\*(R".
.Sh "_possibly_raw"
.IX Subsection "_possibly_raw"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_rsf"
.IX Subsection "_possibly_rsf"
From \*(L"http://www.ebi.ac.uk/help/formats.html\*(R".
.Sh "_possibly_selex"
.IX Subsection "_possibly_selex"
From \*(L"http://www.ebc.ee/WWW/hmmer2\-html/node27.html\*(R".
.PP
Assuming precense of Selex file header.  Data exported by
Bioperl on Pfam and Selex formats are identical, but Pfam file
only holds one alignment.
.Sh "_possibly_stockholm"
.IX Subsection "_possibly_stockholm"
From bioperl test data.
.Sh "_possibly_swiss"
.IX Subsection "_possibly_swiss"
From \*(L"http://ca.expasy.org/sprot/userman.html#entrystruc\*(R".
.Sh "_possibly_tab"
.IX Subsection "_possibly_tab"
Contributed by Heikki.
