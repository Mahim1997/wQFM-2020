.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::WebDBSeqI 3"
.TH Bio::DB::WebDBSeqI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::WebDBSeqI \- Object Interface to generalize Web Databases
for retrieving sequences
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   # get a WebDBSeqI object somehow
\&   # assuming it is a nucleotide db
\&   my $seq = $db->get_Seq_by_id('ROA1_HUMAN')
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides core set of functionality for connecting to a web based
database for retriving sequences.
.PP
Users wishing to add another Web Based Sequence Dabatase will need to
extend this class (see Bio::DB::SwissProt or Bio::DB::NCBIHelper for
examples) and implement the get_request method which returns a
HTTP::Request for the specified uids (accessions, ids, etc depending
on what query types the database accepts).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email < jason@bioperl.org >
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 6
\& Title   : get_Seq_by_id
\& Usage   : $seq = $db->get_Seq_by_id('ROA1_HUMAN')
\& Function: Gets a Bio::Seq object by its name
\& Returns : a Bio::Seq object
\& Args    : the id (as a string) of a sequence
\& Throws  : "id does not exist" exception
.Ve
.Sh "get_Seq_by_acc"
.IX Subsection "get_Seq_by_acc"
.Vb 6
\& Title   : get_Seq_by_acc
\& Usage   : $seq = $db->get_Seq_by_acc('X77802');
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : accession number (as a string)
\& Throws  : "acc does not exist" exception
.Ve
.Sh "get_Seq_by_gi"
.IX Subsection "get_Seq_by_gi"
.Vb 6
\& Title   : get_Seq_by_gi
\& Usage   : $seq = $db->get_Seq_by_gi('405830');
\& Function: Gets a Bio::Seq object by gi number
\& Returns : A Bio::Seq object
\& Args    : gi number (as a string)
\& Throws  : "gi does not exist" exception
.Ve
.Sh "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 6
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db->get_Seq_by_version('X77802.1');
\& Function: Gets a Bio::Seq object by sequence version
\& Returns : A Bio::Seq object
\& Args    : accession.version (as a string)
\& Throws  : "acc.version does not exist" exception
.Ve
.Sh "get_request"
.IX Subsection "get_request"
.Vb 5
\& Title   : get_request
\& Usage   : my $url = $self->get_request
\& Function: returns a HTTP::Request object
\& Returns : 
\& Args    : %qualifiers = a hash of qualifiers (ids, format, etc)
.Ve
.Sh "get_Stream_by_id"
.IX Subsection "get_Stream_by_id"
.Vb 6
\&  Title   : get_Stream_by_id
\&  Usage   : $stream = $db->get_Stream_by_id( [$uid1, $uid2] );
\&  Function: Gets a series of Seq objects by unique identifiers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of unique identifiers for
\&                   the desired sequence entries
.Ve
.Sh "get_Stream_by_acc"
.IX Subsection "get_Stream_by_acc"
.Vb 7
\&  Title   : get_Stream_by_acc
\&  Usage   : $seq = $db->get_Stream_by_acc([$acc1, $acc2]);
\&  Function: Gets a series of Seq objects by accession numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of accession numbers for
\&                   the desired sequence entries
\&  Note    : For GenBank, this just calls the same code for get_Stream_by_id()
.Ve
.Sh "get_Stream_by_gi"
.IX Subsection "get_Stream_by_gi"
.Vb 7
\&  Title   : get_Stream_by_gi
\&  Usage   : $seq = $db->get_Stream_by_gi([$gi1, $gi2]);
\&  Function: Gets a series of Seq objects by gi numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of gi numbers for
\&                   the desired sequence entries
\&  Note    : For GenBank, this just calls the same code for get_Stream_by_id()
.Ve
.Sh "get_Stream_by_version"
.IX Subsection "get_Stream_by_version"
.Vb 7
\&  Title   : get_Stream_by_version
\&  Usage   : $seq = $db->get_Stream_by_version([$version1, $version2]);
\&  Function: Gets a series of Seq objects by accession.versions
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : a reference to an array of accession.version strings for
\&                   the desired sequence entries
\&  Note    : For GenBank, this is implemeted in NCBIHelper
.Ve
.Sh "get_Stream_by_query"
.IX Subsection "get_Stream_by_query"
.Vb 8
\&  Title   : get_Stream_by_query
\&  Usage   : $stream = $db->get_Stream_by_query($query);
\&  Function: Gets a series of Seq objects by way of a query string or oject
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $query :   A string that uses the appropriate query language
\&            for the database or a Bio::DB::QueryI object.  It is suggested 
\&            that you create the Bio::DB::Query object first and interrogate
\&            it for the entry count before you fetch a potentially large stream.
.Ve
.Sh "default_format"
.IX Subsection "default_format"
.Vb 5
\& Title   : default_format
\& Usage   : my $format = $self->default_format
\& Function: Returns default sequence format for this module
\& Returns : string
\& Args    : none
.Ve
.Sh "request_format"
.IX Subsection "request_format"
.Vb 9
\& Title   : request_format
\& Usage   : my ($req_format, $ioformat) = $self->request_format;
\&           $self->request_format("genbank");
\&           $self->request_format("fasta");
\& Function: Get/Set sequence format retrieval. The get-form will normally not
\&           be used outside of this and derived modules.
\& Returns : Array of two strings, the first representing the format for
\&           retrieval, and the second specifying the corresponding SeqIO format.
\& Args    : $format = sequence format
.Ve
.Sh "get_seq_stream"
.IX Subsection "get_seq_stream"
.Vb 6
\& Title   : get_seq_stream
\& Usage   : my $seqio = $self->get_seq_sream(%qualifiers)
\& Function: builds a url and queries a web db
\& Returns : a Bio::SeqIO stream capable of producing sequence
\& Args    : %qualifiers = a hash qualifiers that the implementing class 
\&           will process to make a url suitable for web querying
.Ve
.Sh "url_base_address"
.IX Subsection "url_base_address"
.Vb 6
\& Title   : url_base_address
\& Usage   : my $address = $self->url_base_address or 
\&           $self->url_base_address($address)
\& Function: Get/Set the base URL for the Web Database
\& Returns : Base URL for the Web Database 
\& Args    : $address - URL for the WebDatabase
.Ve
.Sh "proxy"
.IX Subsection "proxy"
.Vb 9
\& Title   : proxy
\& Usage   : $httpproxy = $db->proxy('http')  or 
\&           $db->proxy(['http','ftp'], 'http://myproxy' )
\& Function: Get/Set a proxy for use of proxy
\& Returns : a string indicating the proxy
\& Args    : $protocol : an array ref of the protocol(s) to set/get
\&           $proxyurl : url of the proxy to use for the specified protocol
\&           $username : username (if proxy requires authentication)
\&           $password : password (if proxy requires authentication)
.Ve
.Sh "authentication"
.IX Subsection "authentication"
.Vb 5
\& Title   : authentication
\& Usage   : $db->authentication($user,$pass)
\& Function: Get/Set authentication credentials
\& Returns : Array of user/pass 
\& Args    : Array or user/pass
.Ve
.Sh "retrieval_type"
.IX Subsection "retrieval_type"
.Vb 6
\& Title   : retrieval_type
\& Usage   : $self->retrieval_type($type);
\&           my $type = $self->retrieval_type
\& Function: Get/Set a proxy for retrieval_type (pipeline, io_string or tempfile)
\& Returns : string representing retrieval type
\& Args    : $value - the value to store
.Ve
.PP
This setting affects how the data stream from the remote web server is
processed and passed to the Bio::SeqIO layer. Three types of retrieval
types are currently allowed:
.PP
.Vb 4
\&   pipeline  Perform a fork in an attempt to begin streaming
\&             while the data is still downloading from the remote
\&             server.  Disk, memory and speed efficient, but will
\&             not work on Windows or MacOS 9 platforms.
.Ve
.PP
.Vb 4
\&   io_string Store downloaded database entry(s) in memory.  Can be
\&             problematic for batch downloads because entire set
\&             of entries must fit in memory.  Alll entries must be
\&             downloaded before processing can begin.
.Ve
.PP
.Vb 3
\&   tempfile  Store downloaded database entry(s) in a temporary file.
\&             All entries must be downloaded before processing can
\&             begin.
.Ve
.PP
The default is pipeline, with automatic fallback to io_string if
pipelining is not available.
.Sh "url_params"
.IX Subsection "url_params"
.Vb 6
\& Title   : url_params
\& Usage   : my $params = $self->url_params or 
\&           $self->url_params($params)
\& Function: Get/Set the URL parameters for the Web Database
\& Returns : url parameters for Web Database
\& Args    : $params - parameters to be appended to the URL for the WebDatabase
.Ve
.Sh "ua"
.IX Subsection "ua"
.Vb 6
\& Title   : ua
\& Usage   : my $ua = $self->ua or 
\&           $self->ua($ua)
\& Function: Get/Set a LWP::UserAgent for use
\& Returns : reference to LWP::UserAgent Object
\& Args    : $ua - must be a LWP::UserAgent
.Ve
.Sh "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 8
\& Title   : postprocess_data
\& Usage   : $self->postprocess_data ( 'type' => 'string',
\&                                     'location' => \e$datastr);
\& Function: process downloaded data before loading into a Bio::SeqIO
\& Returns : void
\& Args    : hash with two keys - 'type' can be 'string' or 'file'
\&                              - 'location' either file location or string 
\&                                           reference containing data
.Ve
.Sh "delay"
.IX Subsection "delay"
.Vb 5
\& Title   : delay
\& Usage   : $secs = $self->delay([$secs])
\& Function: get/set number of seconds to delay between fetches
\& Returns : number of seconds to delay
\& Args    : new value
.Ve
.PP
\&\s-1NOTE:\s0 the default is to use the value specified by \fIdelay_policy()\fR.
This can be overridden by calling this method, or by passing the
\&\-delay argument to \fInew()\fR.
.Sh "delay_policy"
.IX Subsection "delay_policy"
.Vb 5
\& Title   : delay_policy
\& Usage   : $secs = $self->delay_policy
\& Function: return number of seconds to delay between calls to remote db
\& Returns : number of seconds to delay
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 The default delay policy is 0s.  Override in subclasses to
implement delays.  The timer has only second resolution, so the delay
will actually be +/\- 1s.
.Sh "_sleep"
.IX Subsection "_sleep"
.Vb 5
\& Title   : _sleep
\& Usage   : $self->_sleep
\& Function: sleep for a number of seconds indicated by the delay policy
\& Returns : none
\& Args    : none
.Ve
.PP
\&\s-1NOTE:\s0 This method keeps track of the last time it was called and only
imposes a sleep if it was called more recently than the \fIdelay_policy()\fR
allows.
