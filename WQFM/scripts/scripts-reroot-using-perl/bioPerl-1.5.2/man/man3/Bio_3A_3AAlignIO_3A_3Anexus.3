.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::nexus 3"
.TH Bio::AlignIO::nexus 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::AlignIO::nexus \- NEXUS format sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::AlignIO class.
.PP
.Vb 1
\&    use Bio::AlignIO;
.Ve
.PP
.Vb 5
\&    my $in = new Bio::AlignIO(-format => 'nexus',
\&                              -file   => 'aln.nexus');
\&    while( my $aln = $in->next_aln ) {
\&        # do something with the alignment
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Align::AlignI objects to and from \s-1NEXUS\s0
data blocks. See method documentation for supported \s-1NEXUS\s0 features.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Will Fisher has written an excellent standalone \s-1NEXUS\s0 format parser in
Perl, readnexus. A number of tricks were adapted from it.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHORS \- Heikki Lehvaslaiho"
.IX Header "AUTHORS - Heikki Lehvaslaiho"
Email: heikki-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $alignio = new Bio::AlignIO(-format => 'nexus',
\&                                                                                                        -file   => 'filename');
\& Function: returns a new Bio::AlignIO object to handle clustalw files
\& Returns : Bio::AlignIO::clustalw object
\& Args    : -verbose => verbosity setting (-1,0,1,2)
\&           -file    => name of file to read in or with ">" - writeout
\&           -fh      => alternative to -file param - provide a filehandle 
\&                       to read from/write to 
\&           -format  => type of Alignment Format to process or produce
.Ve
.PP
.Vb 1
\&           Customization of nexus flavor output
.Ve
.PP
.Vb 6
\&           -show_symbols => print the symbols="ATGC" in the data definition
\&                            (MrBayes does not like this)
\&                            boolean [default is 1] 
\&           -show_endblock => print an 'endblock;' at the end of the data
\&                            (MyBayes does not like this)
\&                            boolean [default is 1]
.Ve
.Sh "next_aln"
.IX Subsection "next_aln"
.Vb 3
\& Title   : next_aln
\& Usage   : $aln = $stream->next_aln()
\& Function: Returns the next alignment in the stream.
.Ve
.PP
.Vb 11
\&           Supports the following NEXUS format features:
\&           - The file has to start with '#NEXUS'
\&           - Reads in the name of the alignment from a comment
\&             (anything after 'TITLE: ') .
\&           - Sequence names can be given in a taxa block, too.
\&           - If matchchar notation is used, converts
\&             them back to sequence characters.
\&           - Does character conversions specified in the
\&             NEXUS equate command.
\&           - Sequence names of type 'Homo sapiens' and
\&             Homo_sapiens are treated identically.
.Ve
.PP
.Vb 2
\& Returns : L<Bio::Align::AlignI> object
\& Args    :
.Ve
.Sh "write_aln"
.IX Subsection "write_aln"
.Vb 8
\& Title   : write_aln
\& Usage   : $stream->write_aln(@aln)
\& Function: Writes the $aln object into the stream in interleaved NEXUS
\&           format. Everything is written into a data block.
\&           SimpleAlign methods match_char, missing_char and gap_char must be set
\&           if you want to see them in the output.
\& Returns : 1 for success and 0 for error
\& Args    : L<Bio::Align::AlignI> object
.Ve
.Sh "flag"
.IX Subsection "flag"
.Vb 5
\& Title   : flag
\& Usage   : $obj->flag($name,$value)
\& Function: Get/Set a flag value
\& Returns : value of flag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
