.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::tRNAscanSE 3"
.TH Bio::Tools::tRNAscanSE 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::tRNAscanSE \- A parser for tRNAscan\-SE output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use Bio::Tools::tRNAscanSE;
.Ve
.PP
.Vb 1
\&   my $parser = Bio::Tools::tRNAscanSE->new(-file => 'result.tRNAscanSE');
.Ve
.PP
.Vb 2
\&   # parse the results
\&   while( my $gene = $parser->next_prediction ) {
.Ve
.PP
.Vb 1
\&       @exon_arr = $gene->get_seqFeatures();
.Ve
.PP
.Vb 1
\&   }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will parse tRNAscan-SE output.  Just the tabular output of
the tRNA locations in the genome for now.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::tRNAscanSE();
\& Function: Builds a new Bio::Tools::tRNAscanSE object 
\& Returns : an instance of Bio::Tools::tRNAscanSE
\& Args    : -fh/-file for input filename
\&           -genetag => primary tag used in gene features (default 'tRNA_gene')
\&           -exontag => primary tag used in exon features (default 'tRNA_exon')
\&           -srctag  => source tag used in all features (default 'tRNAscan-SE')
.Ve
.Sh "gene_tag"
.IX Subsection "gene_tag"
.Vb 6
\& Title   : gene_tag
\& Usage   : $obj->gene_tag($newval)
\& Function: Get/Set the value used for the 'gene_tag' of genes
\&           Default is 'tRNA_gene' as set by the global $GeneTag
\& Returns : value of gene_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $obj->source_tag($newval)
\& Function: Get/Set the value used for the 'source_tag' of exons and genes
\&           Default is 'tRNAscan-SE' as set by the global $SrcTag
\& Returns : value of source_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "exon_tag"
.IX Subsection "exon_tag"
.Vb 6
\& Title   : exon_tag
\& Usage   : $obj->exon_tag($newval)
\& Function: Get/Set the value used for the 'primary_tag' of exons
\&           Default is 'tRNA_exon' as set by the global $ExonTag
\& Returns : value of exon_tag (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "analysis_method"
.IX Subsection "analysis_method"
.Vb 5
\& Usage     : $genscan->analysis_method();
\& Purpose   : Inherited method. Overridden to ensure that the name matches
\&             /tRNAscan-SE/i.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 6
\& Title   : next_feature
\& Usage   : while($gene = $genscan->next_feature()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the Genscan result
\&           file. Call this method repeatedly until FALSE is returned.
.Ve
.PP
.Vb 4
\&           The returned object is actually a SeqFeatureI implementing object.
\&           This method is required for classes implementing the
\&           SeqAnalysisParserI interface, and is merely an alias for 
\&           next_prediction() at present.
.Ve
.PP
.Vb 4
\& Example :
\& Returns : A Bio::SeqFeature::Generic object.
\& Args    :
\&See also : L<Bio::SeqFeature::Generic>
.Ve
.Sh "next_prediction"
.IX Subsection "next_prediction"
.Vb 6
\& Title   : next_prediction
\& Usage   : while($gene = $genscan->next_prediction()) {
\&                  # do something
\&           }
\& Function: Returns the next gene structure prediction of the Genscan result
\&           file. Call this method repeatedly until FALSE is returned.
.Ve
.PP
.Vb 4
\& Example :
\& Returns : A Bio::SeqFeature::Generic object.
\& Args    :
\&See also : L<Bio::SeqFeature::Generic>
.Ve
