.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::BPbl2seq 3"
.TH Bio::Tools::BPbl2seq 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::BPbl2seq \- Lightweight BLAST parser for pair\-wise sequence
alignment using the BLAST algorithm.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 22
\&  use Bio::Tools::BPbl2seq;
\&  my $report = Bio::Tools::BPbl2seq->new(-file => 't/bl2seq.out');
\&  $report->sbjctName;
\&  $report->sbjctLength;
\&  while(my $hsp = $report->next_feature) {
\&         $hsp->score;
\&         $hsp->bits;
\&         $hsp->percent;
\&         $hsp->P;
\&         $hsp->match;
\&         $hsp->positive;
\&         $hsp->length;
\&         $hsp->querySeq;
\&         $hsp->sbjctSeq;
\&         $hsp->homologySeq;
\&         $hsp->query->start;
\&         $hsp->query->end;
\&         $hsp->sbjct->start;
\&         $hsp->sbjct->end;
\&         $hsp->sbjct->seq_id;
\&         $hsp->sbjct->overlaps($exon);
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1NOTE:\s0\fR This module's functionality has been implemented in
Bio::SearchIO::blast and therefore is not actively maintained.
.PP
BPbl2seq is a package for parsing \s-1BLAST\s0 bl2seq reports. \s-1BLAST\s0 bl2seq
is a program for comparing and aligning two sequences using \s-1BLAST\s0.
Although the report format is similar to that of a conventional \s-1BLAST\s0,
there are a few differences so that BPlite is unable to read bl2seq
reports directly.
.PP
From the user's perspective, one difference between bl2seq and other
blast reports is that the bl2seq report does not print out the name of
the first of the two aligned sequences.  (The second sequence name is
given in the report as the name of the \*(L"hit\*(R").  Consequently, BPbl2seq
has no way of identifying the name of the initial sequence unless it
is passed to constructor as a second argument as in:
.PP
.Vb 1
\&        my $report = Bio::Tools::BPbl2seq->new(\e*FH, "ALEU_HORVU");
.Ve
.PP
If the name of the first sequence (the \*(L"query\*(R") is not passed to
BPbl2seq.pm in this manner, the name of the first sequence will be
left as \*(L"unknown\*(R".  (Note that to preserve a common interface with the
other \s-1BLAST\s0 programs the two sequences being compared are referred to
in bl2seq as \*(L"query\*(R" and \*(L"subject\*(R" although this is perhaps a bit
misleading when simply comparing 2 sequences as opposed to querying a
database.)
.PP
In addition, since there will only be (at most) one \*(L"subject\*(R" (hit) in
a bl2seq report, one should use the method \f(CW$report\fR\->next_feature,
rather than \f(CW$report\fR\->nextSbjct\->nextHSP to obtain the next
high scoring pair.
.PP
One should note that the previous (0.7) version of BPbl2seq used
slightly different syntax. That version had a bug and consequently the
old syntax has been eliminated.  Attempts to use the old syntax will
return error messages explaining the (minor) recoding required to use
the current syntax.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Peter Schattner"
.IX Header "AUTHOR - Peter Schattner"
Email: schattner@alum.mit.edu
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Based on work of:
Ian Korf (ikorf@sapiens.wustl.edu, http://sapiens.wustl.edu/~ikorf),
Lorenz Pollak (lorenz@ist.org, bioperl port)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Jason Stajich, jason\-at\-bioperl.org
.Sh "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Function: Create a new Bio::Tools::BPbl2seq object
\& Returns : Bio::Tools::BPbl2seq
\& Args    : -file     input file (alternative to -fh)
\&           -fh       input stream (alternative to -file)
\&           -queryname    name of query sequence
\&           -report_type What type of BLAST was run (blastn,blastp,tblastn...)
.Ve
.Sh "getSbjct"
.IX Subsection "getSbjct"
.Vb 6
\& Title    :
\& Usage    : $sbjct = $obj->getSbjct();
\& Function : Method of obtaining single "subject" of a bl2seq report
\& Example  : my $sbjct = $obj->getSbjct ) {}
\& Returns  : Sbjct object or undef if finished
\& Args     :
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : while( my $feat = $res->next_feature ) { # do something }
\& Function: calls next_feature function from BPlite.
\& Example :
\& Returns : A Bio::SeqFeatureI compliant object, in this case a
\&           Bio::Tools::BPlite::HSP object, and FALSE if there are no more
\&           HSPs.
\& Args    : None
.Ve
.Sh "queryName"
.IX Subsection "queryName"
.Vb 6
\& Title    :
\& Usage    : $name = $report->queryName();
\& Function : get /set the name of the query
\& Example  :
\& Returns  : name of the query
\& Args     :
.Ve
.Sh "sbjctName"
.IX Subsection "sbjctName"
.Vb 6
\& Title    :
\& Usage    : $name = $report->sbjctName();
\& Function : returns the name of the Sbjct
\& Example  :
\& Returns  : name of the Sbjct
\& Args     :
.Ve
.Sh "sbjctLength"
.IX Subsection "sbjctLength"
.Vb 6
\& Title    :  sbjctLength
\& Usage    : $length = $report->sbjctLength();
\& Function : returns the length of the Sbjct
\& Example  :
\& Returns  : name of the Sbjct
\& Args     :
.Ve
.Sh "P"
.IX Subsection "P"
.Vb 3
\& Title    : P
\& Usage    :
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "percent"
.IX Subsection "percent"
.Vb 3
\& Title    : percent
\& Usage    : $hsp->percent();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "match"
.IX Subsection "match"
.Vb 3
\& Title    : match
\& Usage    : $hsp->match();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "positive"
.IX Subsection "positive"
.Vb 3
\& Title    : positive
\& Usage    : $hsp->positive();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "querySeq"
.IX Subsection "querySeq"
.Vb 3
\& Title    : querySeq
\& Usage    : $hsp->querySeq();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "sbjctSeq"
.IX Subsection "sbjctSeq"
.Vb 3
\& Title    : sbjctSeq
\& Usage    : $hsp->sbjctSeq();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "homologySeq"
.IX Subsection "homologySeq"
.Vb 3
\& Title    : homologySeq
\& Usage    : $hsp->homologySeq();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "qs"
.IX Subsection "qs"
.Vb 3
\& Title    : qs
\& Usage    : $hsp->qs();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "ss"
.IX Subsection "ss"
.Vb 3
\& Title    : ss
\& Usage    : $hsp->ss();
\& Function : Syntax no longer supported, error message only
.Ve
.Sh "hs"
.IX Subsection "hs"
.Vb 3
\& Title    : hs
\& Usage    : $hsp->hs();
\& Function : Syntax no longer supported, error message only
.Ve
