.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Cluster::UniGeneI 3"
.TH Bio::Cluster::UniGeneI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Cluster::UniGeneI \- abstract interface of UniGene object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the general interface for a UniGene cluster representation in
Bioperl. You cannot use this module directly, use an implementation
instead.
.PP
You can create UniGene cluster objects yourself by instantiating
Bio::Cluster::UniGene. If you read UniGene clusters from a
ClusterIO parser, you will get objects implementing this interface,
most likely instances of said UniGene class.
.PP
Bio::Cluster::UniGeneI inherits from Bio::ClusterI, so you can
use it wherever a cluster object is expected.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Vb 1
\&  #
.Ve
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Andrew Macgregor"
.IX Header "AUTHOR - Andrew Macgregor"
Email andrew at cbbc.murdoch.edu.au
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.Sh "unigene_id"
.IX Subsection "unigene_id"
.Vb 6
\& Title   : unigene_id
\& Usage   : unigene_id();
\& Function: Returns the unigene_id associated with the object.
\& Example : $id = $unigene->unigene_id or $unigene->unigene_id($id)
\& Returns : A string
\& Args    : None or an id
.Ve
.Sh "title"
.IX Subsection "title"
.Vb 6
\& Title   : title
\& Usage   : title();
\& Function: Returns the title associated with the object.
\& Example : $title = $unigene->title or $unigene->title($title)
\& Returns : A string
\& Args    : None or a title
.Ve
.Sh "gene"
.IX Subsection "gene"
.Vb 6
\& Title   : gene
\& Usage   : gene();
\& Function: Returns the gene associated with the object.
\& Example : $gene = $unigene->gene or $unigene->gene($gene)
\& Returns : A string
\& Args    : None or a gene
.Ve
.Sh "cytoband"
.IX Subsection "cytoband"
.Vb 6
\& Title   : cytoband
\& Usage   : cytoband();
\& Function: Returns the cytoband associated with the object.
\& Example : $cytoband = $unigene->cytoband or $unigene->cytoband($cytoband)
\& Returns : A string
\& Args    : None or a cytoband
.Ve
.Sh "mgi"
.IX Subsection "mgi"
.Vb 6
\& Title   : mgi
\& Usage   : mgi();
\& Function: Returns the mgi associated with the object.
\& Example : $mgi = $unigene->mgi or $unigene->mgi($mgi)
\& Returns : A string
\& Args    : None or a mgi
.Ve
.Sh "locuslink"
.IX Subsection "locuslink"
.Vb 6
\& Title   : locuslink
\& Usage   : locuslink();
\& Function: Returns or stores a reference to an array containing locuslink data.
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "homol"
.IX Subsection "homol"
.Vb 6
\& Title   : homol
\& Usage   : homol();
\& Function: Returns the homol entry associated with the object.
\& Example : $homol = $unigene->homol or $unigene->homol($homol)
\& Returns : A string
\& Args    : None or a homol entry
.Ve
.Sh "restr_expr"
.IX Subsection "restr_expr"
.Vb 6
\& Title   : restr_expr
\& Usage   : restr_expr();
\& Function: Returns the restr_expr entry associated with the object.
\& Example : $restr_expr = $unigene->restr_expr or $unigene->restr_expr($restr_expr)
\& Returns : A string
\& Args    : None or a restr_expr entry
.Ve
.Sh "gnm_terminus"
.IX Subsection "gnm_terminus"
.Vb 6
\& Title   : gnm_terminus
\& Usage   : gnm_terminus();
\& Function: Returns the gnm_terminus associated with the object.
\& Example : $gnm_terminus = $unigene->gnm_terminus or $unigene->gnm_terminus($gnm_terminus)
\& Returns : A string
\& Args    : None or a gnm_terminus
.Ve
.Sh "scount"
.IX Subsection "scount"
.Vb 6
\& Title   : scount
\& Usage   : scount();
\& Function: Returns the scount associated with the object.
\& Example : $scount = $unigene->scount or $unigene->scount($scount)
\& Returns : A string
\& Args    : None or a scount
.Ve
.Sh "express"
.IX Subsection "express"
.Vb 6
\& Title   : express
\& Usage   : express();
\& Function: Returns or stores a reference to an array containing tissue expression data.
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "chromosome"
.IX Subsection "chromosome"
.Vb 6
\& Title   : chromosome
\& Usage   : chromosome();
\& Function: Returns or stores a reference to an array containing chromosome lines
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "sts"
.IX Subsection "sts"
.Vb 6
\& Title   : sts
\& Usage   : sts();
\& Function: Returns or stores a reference to an array containing sts lines
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "txmap"
.IX Subsection "txmap"
.Vb 5
\& Title   : txmap
\& Usage   : txmap();
\& Function: Returns or stores a reference to an array containing txmap lines
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "protsim"
.IX Subsection "protsim"
.Vb 6
\& Title   : protsim
\& Usage   : protsim();
\& Function: Returns or stores a reference to an array containing protsim lines
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "sequence"
.IX Subsection "sequence"
.Vb 6
\& Title   : sequence
\& Usage   : sequence();
\& Function: Returns or stores a reference to an array containing sequence data
\&           This should really only be used by ClusterIO, not directly
\& Returns : An array reference
\& Args    : None or an array reference
.Ve
.Sh "species"
.IX Subsection "species"
.Vb 6
\& Title   : species
\& Usage   : $obj->species($newval)
\& Function: Get the species object for this Unigene cluster.
\& Example : 
\& Returns : value of species (a L<Bio::Species> object)
\& Args    :
.Ve
.SH "Methods inherited from Bio::ClusterI"
.IX Header "Methods inherited from Bio::ClusterI"
.Sh "display_id"
.IX Subsection "display_id"
.Vb 5
\& Title   : display_id
\& Usage   : 
\& Function: Get/set the display name or identifier for the cluster
\& Returns : a string
\& Args    : optional, on set the display ID ( a string)
.Ve
.Sh "description"
.IX Subsection "description"
.Vb 5
\& Title   : description
\& Usage   : Bio::ClusterI->description("POLYUBIQUITIN")
\& Function: get/set for the consensus description of the cluster
\& Returns : the description string 
\& Args    : Optional the description string
.Ve
.Sh "size"
.IX Subsection "size"
.Vb 6
\& Title   : size
\& Usage   : Bio::ClusterI->size();
\& Function: get/set for the size of the family, 
\&           calculated from the number of members
\& Returns : the size of the family 
\& Args    :
.Ve
.Sh "cluster_score"
.IX Subsection "cluster_score"
.Vb 6
\& Title   : cluster_score
\& Usage   : $cluster ->cluster_score(100);
\& Function: get/set for cluster_score which
\&           represent the score in which the clustering
\&           algorithm assigns to this cluster.
\& Returns : a number
.Ve
.Sh "get_members"
.IX Subsection "get_members"
.Vb 5
\& Title   : get_members
\& Usage   : Bio::ClusterI->get_members(($seq1, $seq2));
\& Function: retrieve the members of the family by some criteria, for
\&           example :
\&           $cluster->get_members(-species => 'homo sapiens');
.Ve
.PP
.Vb 1
\&           Will return all members if no criteria are provided.
.Ve
.PP
.Vb 2
\& Returns : the array of members
\& Args    :
.Ve
