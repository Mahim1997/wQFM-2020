.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Phylo::PAML 3"
.TH Bio::Tools::Phylo::PAML 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Tools::Phylo::PAML \- Parses output from the PAML programs codeml,
baseml, basemlg, codemlsites and yn00
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  #!/usr/bin/perl -Tw
\&  use strict;
.Ve
.PP
.Vb 1
\&  use Bio::Tools::Phylo::PAML;
.Ve
.PP
.Vb 6
\&  # need to specify the output file name (or a fh) (defaults to
\&  # -file => "codeml.mlc"); also, optionally, the directory in which
\&  # the other result files (rst, 2ML.dS, etc) may be found (defaults
\&  # to "./")
\&  my $parser = new Bio::Tools::Phylo::PAML
\&    (-file => "./results/mlc", -dir => "./results/");
.Ve
.PP
.Vb 3
\&  # get the first/next result; a Bio::Tools::Phylo::PAML::Result object,
\&  # which isa Bio::SeqAnalysisResultI object.
\&  my $result = $parser->next_result();
.Ve
.PP
.Vb 3
\&  # get the sequences used in the analysis; returns Bio::PrimarySeq
\&  # objects (OTU = Operational Taxonomic Unit).
\&  my @otus = $result->get_seqs();
.Ve
.PP
.Vb 6
\&  # codon summary: codon usage of each sequence [ arrayref of {
\&  # hashref of counts for each codon } for each sequence and the
\&  # overall sum ], and positional nucleotide distribution [ arrayref
\&  # of { hashref of frequencies for each nucleotide } for each
\&  # sequence and overall frequencies ]:
\&  my ($codonusage, $ntdist) = $result->get_codon_summary();
.Ve
.PP
.Vb 7
\&  # example manipulations of $codonusage and $ntdist:
\&  printf "There were %d %s codons in the first seq (%s)\en",
\&    $codonusage->[0]->{AAA}, 'AAA', $otus[0]->id();
\&  printf "There were %d %s codons used in all the sequences\en",
\&    $codonusage->[$#{$codonusage}]->{AAA}, 'AAA';
\&  printf "Nucleotide %c was present %g of the time in seq %s\en",
\&    'A', $ntdist->[1]->{A}, $otus[1]->id();
.Ve
.PP
.Vb 2
\&  # get Nei & Gojobori dN/dS matrix:
\&  my $NGmatrix = $result->get_NGmatrix();
.Ve
.PP
.Vb 3
\&  # get ML-estimated dN/dS matrix, if calculated; this corresponds to
\&  # the runmode = -2, pairwise comparison usage of codeml
\&  my $MLmatrix = $result->get_MLmatrix();
.Ve
.PP
.Vb 7
\&  # These matrices are length(@otu) x length(@otu) "strict lower
\&  # triangle" 2D-matrices, which means that the diagonal and
\&  # everything above it is undefined.  Each of the defined cells is a
\&  # hashref of estimates for "dN", "dS", "omega" (dN/dS ratio), "t",
\&  # "S" and "N".  If a ML matrix, "lnL" and "kappa" will also be defined.
\&  printf "The omega ratio for sequences %s vs %s was: %g\en",
\&    $otus[0]->id, $otus[1]->id, $MLmatrix->[0]->[1]->{omega};
.Ve
.PP
.Vb 5
\&  # with a little work, these matrices could also be passed to
\&  # Bio::Tools::Run::Phylip::Neighbor, or other similar tree-building
\&  # method that accepts a matrix of "distances" (using the LOWTRI
\&  # option):
\&  my $distmat = [ map { [ map { $$_{omega} } @$_ ] } @$MLmatrix ];
.Ve
.PP
.Vb 10
\&  # for runmode's other than -2, get tree topology with estimated
\&  # branch lengths; returns a Bio::Tree::TreeI-based tree object with
\&  # added PAML parameters at each node
\&  my ($tree) = $result->get_trees();
\&  for my $node ($tree->get_nodes()) {
\&     # inspect the tree: the "t" (time) parameter is available via
\&     # $node->branch_length(); all other branch-specific parameters
\&     # ("omega", "dN", etc.) are available via 
\&     # ($omega) = $node->get_tag_values('omega');
\&  }
.Ve
.PP
.Vb 13
\&  # if you are using model based Codeml then trees are stored in each 
\&  # modelresult object
\&  for my $modelresult ( $result->get_NSSite_results ) {
\&    # model M0, M1, etc
\&    print "model is ", $modelresult->model_num, "\en";
\&    my ($tree) = $modelresult->get_trees();
\&    for my $node ($tree->get_nodes()) {
\&     # inspect the tree: the "t" (time) parameter is available via
\&     # $node->branch_length(); all other branch-specific parameters
\&     # ("omega", "dN", etc.) are available via 
\&     # ($omega) = $node->get_tag_values('omega');
\&   }
\&  }
.Ve
.PP
.Vb 5
\&  # get any general model parameters: kappa (the
\&  # transition/transversion ratio), NSsites model parameters ("p0",
\&  # "p1", "w0", "w1", etc.), etc.
\&  my $params = $result->get_model_params();
\&  printf "M1 params: p0 = %g\etp1 = %g\en", $params->{p0}, $params->{p1};
.Ve
.PP
.Vb 10
\&  # find, say, positively selected sites!
\&  if ($params->{w2} > 1) {
\&    for (my $i = 0; $i < @probs ; $i++) {
\&      if ($probs[$i]->[2] > 0.5) {
\&         # assumes model M1: three w's, w0, w1 and w2 (positive selection)
\&         printf "position %d: (%g prob, %g omega, %g mean w)\en",
\&           $i, $probs[$i]->[2], $params->{w2}, $probs[$i]->[3];
\&      }
\&    }
\&  } else { print "No positive selection found!\en"; }
.Ve
.PP
.Vb 3
\&  # parse AAML result files
\&  my $aamat = $result->get_AADistMatrix();
\&  my $aaMLmat = $result->get_AAMLDistMatrix();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is used to parse the output from the \s-1PAML\s0 programs codeml,
baseml, basemlg, codemlsites and yn00.  You can use the
Bio::Tools::Run::Phylo::PAML::* modules to actually run some of the
\&\s-1PAML\s0 programs, but this module is only useful to parse the output.
.SH "TO DO"
.IX Header "TO DO"
Implement \fIget_posteriors()\fR. For NSsites models, obtain arrayrefs of 
posterior probabilities for membership in each class for every 
position; probabilities correspond to classes w0, w1, ... etc.
.PP
.Vb 1
\&  my @probs = $result->get_posteriors();
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Jason Stajich, Aaron Mackey"
.IX Header "AUTHOR - Jason Stajich, Aaron Mackey"
Email jason\-at\-bioperl.org
Email amackey\-at\-virginia.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Albert Vilella avilella-AT-gmail-DOT-com
Sendu Bala     bix@sendu.me.uk
.SH "TODO"
.IX Header "TODO"
\&\s-1RST\s0 parsing \*(-- done, Avilella contributions bugzilla#1506, added by jason 1.29
            \*(-- still need to parse in joint probability and non-syn changes 
               at site table
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = new Bio::Tools::Phylo::PAML(%args);
\& Function: Builds a new Bio::Tools::Phylo::PAML object
\& Returns : Bio::Tools::Phylo::PAML
\& Args    : Hash of options: -file, -fh, -dir
\&           -file (or -fh) should contain the contents of the PAML
\&                 outfile; 
\&           -dir is the (optional) name of the directory in
\&                which the PAML program was run (and includes other
\&                PAML-generated files from which we can try to gather data)
.Ve
.Sh "Implement Bio::AnalysisParserI interface"
.IX Subsection "Implement Bio::AnalysisParserI interface"
.Sh "next_result"
.IX Subsection "next_result"
.Vb 7
\& Title   : next_result
\& Usage   : $result = $obj->next_result();
\& Function: Returns the next result available from the input, or
\&           undef if there are no more results.
\& Example :
\& Returns : a Bio::Tools::Phylo::PAML::Result object
\& Args    : none
.Ve
