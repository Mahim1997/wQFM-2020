.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Search::HSP::PullHSPI 3"
.TH Bio::Search::HSP::PullHSPI 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Search::HSP::PullHSPI \- Bio::Search::HSP::HSPI interface for pull parsers.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        # This is an interface and cannot be instantiated
.Ve
.PP
.Vb 4
\&    # generally we use Bio::SearchIO to build these objects
\&    use Bio::SearchIO;
\&    my $in = new Bio::SearchIO(-format => 'hmmer_pull',
\&                                                           -file   => 'result.hmmer');
.Ve
.PP
.Vb 16
\&    while (my $result = $in->next_result) {
\&                while (my $hit = $result->next_hit) {
\&                        while (my $hsp = $hit->next_hsp) {
\&                $r_type = $hsp->algorithm;
\&                $pvalue = $hsp->p();
\&                $evalue = $hsp->evalue();
\&                $frac_id = $hsp->frac_identical( ['query'|'hit'|'total'] );
\&                $frac_cons = $hsp->frac_conserved( ['query'|'hit'|'total'] );
\&                $gaps = $hsp->gaps( ['query'|'hit'|'total'] );
\&                $qseq = $hsp->query_string;
\&                $hseq = $hsp->hit_string;
\&                $homo_string = $hsp->homology_string;
\&                $len = $hsp->length( ['query'|'hit'|'total'] );
\&                $len = $hsp->length( ['query'|'hit'|'total'] );
\&                $rank = $hsp->rank;
\&            }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
PullHSP is for fast implementations that only do parsing work on the hsp
data when you actually request information by calling one of the \s-1HSPI\s0
methods.
.PP
Many methods of \s-1HSPI\s0 are implemented in a way suitable for inheriting classes
that use Bio::PullParserI. It only really makes sense for PullHSP modules to be
created by (and have as a \-parent) PullHit modules.
.PP
In addition to the usual \-chunk and \-parent, \-hsp_data is all you should supply
when making a PullHSP object. This will store that data and make it accessible
via _raw_hsp_data, which you can access in your subclass. It would be best to
simply provide the data as the input \-chunk instead, if the raw data is large
enough.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module inherits methods from these other modules:
.PP
Bio::SeqFeatureI,
Bio::SeqFeature::FeaturePair
Bio::SeqFeature::SimilarityPair
.PP
Please refer to these modules for documentation of the 
many additional inherited methods.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006 Sendu Bala. All Rights Reserved.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "_setup"
.IX Subsection "_setup"
.Vb 6
\& Title   : _setup
\& Usage   : $self->_setup(@args)
\& Function: Implementers should call this to setup common fields and deal with
\&           common arguments to new().
\& Returns : n/a
\& Args    : @args received in new().
.Ve
.Sh "algorithm"
.IX Subsection "algorithm"
.Vb 5
\& Title   : algorithm
\& Usage   : my $r_type = $hsp->algorithm
\& Function: Obtain the name of the algorithm used to obtain the HSP
\& Returns : string (e.g., BLASTP)
\& Args    : none
.Ve
.Sh "pvalue"
.IX Subsection "pvalue"
.Vb 5
\& Title   : pvalue
\& Usage   : my $pvalue = $hsp->pvalue();
\& Function: Returns the P-value for this HSP or undef 
\& Returns : float or exponential (2e-10)
\& Args    : none
.Ve
.Sh "evalue"
.IX Subsection "evalue"
.Vb 5
\& Title   : evalue
\& Usage   : my $evalue = $hsp->evalue();
\& Function: Returns the e-value for this HSP
\& Returns : float or exponential (2e-10)
\& Args    : none
.Ve
.Sh "frac_identical"
.IX Subsection "frac_identical"
.Vb 8
\& Title   : frac_identical
\& Usage   : my $frac_id = $hsp->frac_identical( ['query'|'hit'|'total'] );
\& Function: Returns the fraction of identitical positions for this HSP 
\& Returns : Float in range 0.0 -> 1.0
\& Args    : 'query' = num identical / length of query seq (without gaps)
\&           'hit'   = num identical / length of hit seq (without gaps)
\&           'total' = num identical / length of alignment (with gaps)
\&           default = 'total'
.Ve
.Sh "frac_conserved"
.IX Subsection "frac_conserved"
.Vb 10
\& Title    : frac_conserved
\& Usage    : my $frac_cons = $hsp->frac_conserved( ['query'|'hit'|'total'] );
\& Function : Returns the fraction of conserved positions for this HSP.
\&            This is the fraction of symbols in the alignment with a 
\&            positive score.
\& Returns : Float in range 0.0 -> 1.0
\& Args    : 'query' = num conserved / length of query seq (without gaps)
\&           'hit'   = num conserved / length of hit seq (without gaps)
\&           'total' = num conserved / length of alignment (with gaps)
\&           default = 'total'
.Ve
.Sh "num_identical"
.IX Subsection "num_identical"
.Vb 5
\& Title   : num_identical
\& Usage   : $obj->num_identical($newval)
\& Function: returns the number of identical residues in the alignment
\& Returns : integer
\& Args    : integer (optional)
.Ve
.Sh "num_conserved"
.IX Subsection "num_conserved"
.Vb 5
\& Title   : num_conserved
\& Usage   : $obj->num_conserved($newval)
\& Function: returns the number of conserved residues in the alignment
\& Returns : inetger
\& Args    : integer (optional)
.Ve
.Sh "gaps"
.IX Subsection "gaps"
.Vb 5
\& Title    : gaps
\& Usage    : my $gaps = $hsp->gaps( ['query'|'hit'|'total'] );
\& Function : Get the number of gaps in the query, hit, or total alignment.
\& Returns  : Integer, number of gaps or 0 if none
\& Args     : 'query', 'hit' or 'total'; default = 'total'
.Ve
.Sh "query_string"
.IX Subsection "query_string"
.Vb 5
\& Title   : query_string
\& Usage   : my $qseq = $hsp->query_string;
\& Function: Retrieves the query sequence of this HSP as a string
\& Returns : string
\& Args    : none
.Ve
.Sh "hit_string"
.IX Subsection "hit_string"
.Vb 5
\& Title   : hit_string
\& Usage   : my $hseq = $hsp->hit_string;
\& Function: Retrieves the hit sequence of this HSP as a string
\& Returns : string
\& Args    : none
.Ve
.Sh "homology_string"
.IX Subsection "homology_string"
.Vb 8
\& Title   : homology_string
\& Usage   : my $homo_string = $hsp->homology_string;
\& Function: Retrieves the homology sequence for this HSP as a string.
\&         : The homology sequence is the string of symbols in between the 
\&         : query and hit sequences in the alignment indicating the degree
\&         : of conservation (e.g., identical, similar, not similar).
\& Returns : string
\& Args    : none
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 11
\& Title    : length
\& Usage    : my $len = $hsp->length( ['query'|'hit'|'total'] );
\& Function : Returns the length of the query or hit in the alignment (without gaps) 
\&            or the aggregate length of the HSP (including gaps;
\&            this may be greater than either hit or query )
\& Returns  : integer
\& Args     : 'query' = length of query seq (without gaps)
\&            'hit'   = length of hit seq (without gaps)
\&            'total' = length of alignment (with gaps)
\&            default = 'total' 
\& Args    : none
.Ve
.Sh "hsp_length"
.IX Subsection "hsp_length"
.Vb 5
\& Title   : hsp_length
\& Usage   : my $len = $hsp->hsp_length()
\& Function: shortcut  length('hsp')
\& Returns : floating point between 0 and 100 
\& Args    : none
.Ve
.Sh "percent_identity"
.IX Subsection "percent_identity"
.Vb 5
\& Title   : percent_identity
\& Usage   : my $percentid = $hsp->percent_identity()
\& Function: Returns the calculated percent identity for an HSP
\& Returns : floating point between 0 and 100 
\& Args    : none
.Ve
.Sh "get_aln"
.IX Subsection "get_aln"
.Vb 5
\& Title   : get_aln
\& Usage   : my $aln = $hsp->get_aln
\& Function: Returns a Bio::SimpleAlign representing the HSP alignment
\& Returns : Bio::SimpleAlign
\& Args    : none
.Ve
.Sh "seq_inds"
.IX Subsection "seq_inds"
.Vb 15
\& Title   : seq_inds
\& Purpose   : Get a list of residue positions (indices) for all identical 
\&           : or conserved residues in the query or sbjct sequence.
\& Example   : @s_ind = $hsp->seq_inds('query', 'identical');
\&           : @h_ind = $hsp->seq_inds('hit', 'conserved');
\&           : @h_ind = $hsp->seq_inds('hit', 'conserved', 1);
\& Returns   : List of integers 
\&           : May include ranges if collapse is true.
\& Argument  : seq_type  = 'query' or 'hit' or 'sbjct'  (default = query)
\&              ('sbjct' is synonymous with 'hit') 
\&             class     = 'identical' or 'conserved' or 'nomatch' or 'gap'
\&                          (default = identical)
\&                          (can be shortened to 'id' or 'cons')
\&                                  Note that 'conserved' includes identical unless you
\&                                  use 'conserved-not-identical'
.Ve
.PP
.Vb 6
\&             collapse  = boolean, if true, consecutive positions are merged
\&                         using a range notation, e.g., "1 2 3 4 5 7 9 10 11" 
\&                         collapses to "1-5 7 9-11". This is useful for 
\&                         consolidating long lists. Default = no collapse.
\& Throws    : n/a.
\& Comments  :
.Ve
.PP
See Also   : \fIBio::Search::BlastUtils::collapse_nums()\fR, \fIBio::Search::Hit::HitI::seq_inds()\fR
.Sh "Inherited from Bio::SeqFeature::SimilarityPair"
.IX Subsection "Inherited from Bio::SeqFeature::SimilarityPair"
These methods come from Bio::SeqFeature::SimilarityPair
.Sh "query"
.IX Subsection "query"
.Vb 5
\& Title   : query
\& Usage   : my $query = $hsp->query
\& Function: Returns a SeqFeature representing the query in the HSP
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] new value to set
.Ve
.Sh "hit"
.IX Subsection "hit"
.Vb 5
\& Title   : hit
\& Usage   : my $hit = $hsp->hit
\& Function: Returns a SeqFeature representing the hit in the HSP
\& Returns : Bio::SeqFeature::Similarity
\& Args    : [optional] new value to set
.Ve
.Sh "significance"
.IX Subsection "significance"
.Vb 6
\& Title   : significance
\& Usage   : $evalue = $obj->significance();
\&           $obj->significance($evalue);
\& Function: Get/Set the significance value (see Bio::SeqFeature::SimilarityPair)
\& Returns : significance value (scientific notation string)
\& Args    : significance value (sci notation string)
.Ve
.Sh "score"
.IX Subsection "score"
.Vb 5
\& Title   : score
\& Usage   : my $score = $hsp->score();
\& Function: Returns the score for this HSP or undef 
\& Returns : numeric           
\& Args    : [optional] numeric to set value
.Ve
.Sh "bits"
.IX Subsection "bits"
.Vb 5
\& Title   : bits
\& Usage   : my $bits = $hsp->bits();
\& Function: Returns the bit value for this HSP or undef 
\& Returns : numeric
\& Args    : none
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 7
\& Title   : strand
\& Usage   : $hsp->strand('query')
\& Function: Retrieves the strand for the HSP component requested
\& Returns : +1 or -1 (0 if unknown)
\& Args    : 'hit' or 'subject' or 'sbjct' to retrieve the strand of the subject
\&           'query' to retrieve the query strand (default)
\&           'list' or 'array' to retreive both query and hit together
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 6
\& Title   : start
\& Usage   : $hsp->start('query')
\& Function: Retrieves the start for the HSP component requested
\& Returns : integer
\& Args    : 'hit' or 'subject' or 'sbjct' to retrieve the start of the subject
\&           'query' to retrieve the query start (default)
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 6
\& Title   : end
\& Usage   : $hsp->end('query')
\& Function: Retrieves the end for the HSP component requested
\& Returns : integer
\& Args    : 'hit' or 'subject' or 'sbjct' to retrieve the end of the subject
\&           'query' to retrieve the query end (default)
.Ve
.Sh "seq"
.IX Subsection "seq"
.Vb 7
\& Usage     : $hsp->seq( [seq_type] );
\& Purpose   : Get the query or sbjct sequence as a Bio::Seq.pm object.
\& Example   : $seqObj = $hsp->seq('query');
\& Returns   : Object reference for a Bio::LocatableSeq object.
\& Argument  : seq_type = 'query' or 'hit' or 'sbjct' (default = 'query').
\&           : ('sbjct' is synonymous with 'hit') 
\&           : default is 'query'
.Ve
.Sh "seq_str"
.IX Subsection "seq_str"
.Vb 11
\& Usage     : $hsp->seq_str( seq_type );
\& Purpose   : Get the full query, sbjct, or 'match' sequence as a string.
\&           : The 'match' sequence is the string of symbols in between the 
\&           : query and sbjct sequences.
\& Example   : $str = $hsp->seq_str('query');
\& Returns   : String
\& Argument  : seq_Type = 'query' or 'hit' or 'sbjct' or 'match'
\&           :  ('sbjct' is synonymous with 'hit')
\&           : default is 'query'
\& Throws    : Exception if the argument does not match an accepted seq_type.
\& Comments  :
.Ve
.PP
See Also   : \fIseq()\fR, \fIseq_inds()\fR, \fB\f(BI_set_match_seq()\fB\fR
.Sh "rank"
.IX Subsection "rank"
.Vb 5
\& Usage     : $hsp->rank( [string] );
\& Purpose   : Get the rank of the HSP within a given Blast hit.
\& Example   : $rank = $hsp->rank;
\& Returns   : Integer (1..n) corresponding to the order in which the HSP
\&             appears in the BLAST report.
.Ve
.Sh "matches"
.IX Subsection "matches"
.Vb 15
\& Usage     : $hsp->matches(-seq   => 'hit'|'query', 
\&                           -start => $start, 
\&                           -stop  => $stop);
\& Purpose   : Get the total number of identical and conservative matches 
\&           : in the query or sbjct sequence for the given HSP. Optionally can
\&           : report data within a defined interval along the seq.
\& Example   : ($id,$cons) = $hsp_object->matches(-seq   => 'hit');
\&           : ($id,$cons) = $hsp_object->matches(-seq   => 'query',
\&                                                -start => 300,
\&                                                -stop  => 400);
\& Returns   : 2-element array of integers 
\& Argument  : (1) seq_type = 'query' or 'hit' or 'sbjct' (default = query)
\&           :  ('sbjct' is synonymous with 'hit') 
\&           : (2) start = Starting coordinate (optional)
\&           : (3) stop  = Ending coordinate (optional)
.Ve
.Sh "n"
.IX Subsection "n"
.Vb 9
\& Usage     : $hsp_obj->n()
\& Purpose   : Get the N value (num HSPs on which P/Expect is based).
\& Returns   : Integer or null string if not defined.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : The 'N' value is listed in parenthesis with P/Expect value:
\&           : e.g., P(3) = 1.2e-30  ---> (N = 3).
\&           : Not defined in NCBI Blast2 with gaps.
\&           : This typically is equal to the number of HSPs but not always.
.Ve
.Sh "range"
.IX Subsection "range"
.Vb 11
\& Usage     : $hsp->range( [seq_type] );
\& Purpose   : Gets the (start, end) coordinates for the query or sbjct sequence
\&           : in the HSP alignment.
\& Example   : ($query_beg, $query_end) = $hsp->range('query');
\&           : ($hit_beg, $hit_end) = $hsp->range('hit');
\& Returns   : Two-element array of integers 
\& Argument  : seq_type = string, 'query' or 'hit' or 'sbjct'  (default = 'query')
\&           :  ('sbjct' is synonymous with 'hit') 
\& Throws    : n/a
\& Comments  : This is a convenience method for constructions such as
\&             ($hsp->query->start, $hsp->query->end)
.Ve
