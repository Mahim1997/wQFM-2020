.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::EUtilities::efetch 3"
.TH Bio::DB::EUtilities::efetch 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::DB::EUtilities::efetch \- retrieval of records from a list of IDs or the
user's environment.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  my $efetch = Bio::DB::EUtilities->new(
\&                                       -verbose => 1,
\&                                       -cookie   => $esearch->next_cookie,
\&                                       -retmax   => $retmax,
\&                                       -rettype  => 'fasta'
\&                                        );
.Ve
.PP
.Vb 1
\&  print $efetch->get_response->content;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
EFetch retrieves data records from a list of
\&\s-1ID\s0's.  This can be accomplished directly (using \f(CW\*(C`id\*(C'\fR) or indirectly
(by using a Cookie.
.Sh "\s-1NCBI\s0 Efetch Parameters"
.IX Subsection "NCBI Efetch Parameters"
The following are a general list of parameters that can be used to take
advantage of Efetch.  Up-to-date help for Efetch is available at this \s-1URL\s0
(the information below is a summary of the options found there):
.PP
.Vb 1
\&  http://eutils.ncbi.nlm.nih.gov/entrez/query/static/efetch_help.html
.Ve
.ie n .IP """db""" 3
.el .IP "\f(CWdb\fR" 3
.IX Item "db"
One or more database available through EUtilities.  EFetch currently only
supports database retrieval from the following databases:
.Sp
\&\fBpubmed\fR, \fBpmc\fR (PubMed Central), \fBjournals\fR, \fBomim\fR, \fBnucleotide\fR,
\&\fBprotein\fR, \fBgenome\fR, \fBgene\fR, \fBsnp\fR (dbSBP), \fBpopset\fR, and \fBtaxonomy\fR.
.Sp
Also supported are \fBsequences\fR (nucleotide, protein, popset and genome), and
the three subsets of nucleotide: \fBnuccore\fR, \fBnucest\fR, \fBnucgss\fR
.ie n .IP """id""" 3
.el .IP "\f(CWid\fR" 3
.IX Item "id"
a list of primary \s-1ID\s0's
.Sp
Below are a list of IDs which can be used with EFetch:
.Sp
For sequence databases:
.Sp
\&\fB\s-1NCBI\s0 sequence number\fR (\s-1GI\s0), \fBaccession\fR, \fBaccession.version\fR, \fBfasta\fR,
\&\fBGeneID\fR, \fBgenome \s-1ID\s0\fR, \fBseqid\fR
.Sp
All other databases:
.Sp
\&\fB\s-1PMID\s0\fR (pubmed), \fB\s-1MIM\s0 number\fR (omim), \fB\s-1GI\s0 number\fR (nucleotide, protein),
\&\fBGenome \s-1ID\s0\fR (genome), \fBPopset \s-1ID\s0\fR (popset), \fB\s-1SNP\s0 cluster \s-1ID\s0\fR (snp),
\&\fBUniSTS \s-1ID\s0\fR (unists), \fBUniGene cluster \s-1ID\s0\fR (unigene), \fBMMDB-ID\fR (structure),
\&\fBPSSM-ID\fR (cdd), \fB3D \s-1SDI\s0\fR (domains), \fB\s-1TAXID\s0\fR (taxonomy), \fB\s-1GEO\s0 \s-1ID\s0\fR (geo)
.ie n .IP """mindate""\fR, \f(CW""maxdate""" 3
.el .IP "\f(CWmindate\fR, \f(CWmaxdate\fR" 3
.IX Item "mindate, maxdate"
limits results by dates (\f(CW\*(C`yyyy/mm/dd\*(C'\fR format, or by year)
.ie n .IP """rettype""" 3
.el .IP "\f(CWrettype\fR" 3
.IX Item "rettype"
Output type based on the database.  Not all return types are compatible with
all return modes (\-\f(CW\*(C`retmode\*(C'\fR).  For more information, see the specific
literature or sequence database links at \s-1URL\s0 above.
.Sp
Literature databases have the below return types:
.Sp
\&\fBuilist\fR (all databases),
\&\fBabstract\fR, \fBcitation\fR, \fBmedline\fR (not omim),
\&\fBfull\fR (journals and omim)
.Sp
Literature databases have the below return types:
.Sp
\&\fBnative\fR (full record, all databases),
\&\fBfasta\fR, \fBseqid\fR, \fBacc\fR (nucleotide or protein),
\&\fBgb\fR, \fBgbc\fR, \fBgbwithparts\fR (nucleotide only),
\&\fBest\fR (dbEST only),
\&\fBgss\fR (dbGSS only),
\&\fBgp\fR, \fBgpc\fR (protein only),
\&\fBchr\fR, \fBflt\fR, \fBrsr\fR, \fBbrief\fR, \fBdocset\fR (dbSNP only)
.ie n .IP """retmode""" 3
.el .IP "\f(CWretmode\fR" 3
.IX Item "retmode"
EFetch is set, by default, to return a specific format for each Entrez database;
this is set in the \f(CW%DATABASE\fR hash in Bio::DB::EUtilities.  To override this
format, you can set \-\f(CW\*(C`retmode\*(C'\fR.  The normal return modes are text, \s-1HTML\s0, \s-1XML\s0,
and \s-1ASN1\s0.  Error checking for the set return mode is currently not
implemented.
.ie n .IP """report""" 3
.el .IP "\f(CWreport\fR" 3
.IX Item "report"
Used for the output format for Taxonomy; set to \fBuilist\fR, \fBbrief\fR, \fBdocsum\fR,
\&\fBxml\fR
.ie n .IP """strand""\fR \- \fIsequence only" 3
.el .IP "\f(CWstrand\fR \- \fIsequence only\fR" 3
.IX Item "strand - sequence only"
The strand of \s-1DNA\s0 to show: 1=plus, 2=minus
.ie n .IP """seq_start""\fR, \f(CW""seq_stop""\fR \- \fIsequence only" 3
.el .IP "\f(CWseq_start\fR, \f(CWseq_stop\fR \- \fIsequence only\fR" 3
.IX Item "seq_start, seq_stop - sequence only"
the start and end coordinates of the sequence to display
.ie n .IP """complexity""\fR \- \fIsequence only" 3
.el .IP "\f(CWcomplexity\fR \- \fIsequence only\fR" 3
.IX Item "complexity - sequence only"
The \s-1GI\s0 is often part of a biological blob containing other GIs
.Sp
.Vb 5
\&    * 0 - get the whole blob
\&    * 1 - get the bioseq for gi of interest (default in Entrez)
\&    * 2 - get the minimal bioseq-set containing the gi of interest
\&    * 3 - get the minimal nuc-prot containing the gi of interest
\&    * 4 - get the minimal pub-set containing the gi of interest
.Ve
.Sh "Additional (Bioperl\-related) Parameters"
.IX Subsection "Additional (Bioperl-related) Parameters"
These are Bioperl-related settings and are not used as \s-1CGI\s0 parameters when
.ie n .IP """eutil""" 3
.el .IP "\f(CWeutil\fR" 3
.IX Item "eutil"
The relevant EUtility to be used (efetch).  
.ie n .IP """cookie""" 3
.el .IP "\f(CWcookie\fR" 3
.IX Item "cookie"
Uses a Cookie\-based search (see below)
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the
evolution of this and other Bioperl modules. Send
your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation
is much appreciated.
.PP
.Vb 2
\&  bioperl-l@lists.open-bio.org               - General discussion
\&  http://www.bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to
help us keep track the bugs and their resolution.
Bug reports can be submitted via the web.
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Email cjfields at uiuc dot edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the
object methods. Internal methods are usually
preceded with a _
.Sh "parse_response"
.IX Subsection "parse_response"
.Vb 6
\& Title   : parse_response
\& Usage   : $db->_parse_response($content)
\& Function: parse out response for cookie
\& Returns : empty
\& Args    : none
\& Throws  : 'unparseable output exception'
.Ve
