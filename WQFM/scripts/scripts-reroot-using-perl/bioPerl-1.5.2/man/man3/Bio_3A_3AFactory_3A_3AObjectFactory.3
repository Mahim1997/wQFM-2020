.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Factory::ObjectFactory 3"
.TH Bio::Factory::ObjectFactory 3 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Factory::ObjectFactory \- Instantiates a new Bio::Root::RootI (or derived class) through a factory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Factory::ObjectFactory;
.Ve
.PP
.Vb 4
\&    my $factory = new Bio::Factory::ObjectFactory(-type => 'Bio::Ontology::GOterm');
\&    my $term = $factory->create_object(-name => 'peroxisome',
\&                                       -ontology => 'Gene Factory',
\&                                       -identifier => 'GO:0005777');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object will build Bio::Root::RootI objects generically.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
This is mostly copy-and-paste with subsequent adaptation from
Bio::Seq::SeqFactory by Jason Stajich. Most credits should in fact go
to him.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 9
\& Title   : new
\& Usage   : my $obj = new Bio::Factory::ObjectFactory();
\& Function: Builds a new Bio::Factory::ObjectFactory object 
\& Returns : Bio::Factory::ObjectFactory
\& Args    : -type      => string, name of a L<Bio::Root::RootI> derived class.
\&                         There is no default.
\&           -interface => string, name of the interface or class any type
\&                         specified needs to at least implement.
\&                         The default is Bio::Root::RootI.
.Ve
.Sh "create_object"
.IX Subsection "create_object"
.Vb 3
\& Title   : create_object
\& Usage   : my $seq = $factory->create_object(<named parameters>);
\& Function: Instantiates a new object of the previously set type.
.Ve
.PP
.Vb 2
\&           This object allows us to genericize the instantiation of
\&           objects.
.Ve
.PP
.Vb 2
\&           You must have provided -type at instantiation, or have
\&           called type($mytype) before you can call this method.
.Ve
.PP
.Vb 1
\& Returns : an object of the type returned by type()
.Ve
.PP
.Vb 4
\&           The return type is configurable using new(-type =>"..."),
\&           or by calling $self->type("My::Fancy::Class").
\& Args    : Initialization parameters specific to the type of
\&           object we want. Check the POD of the class you set as type.
.Ve
.Sh "type"
.IX Subsection "type"
.Vb 3
\& Title   : type
\& Usage   : $obj->type($newval)
\& Function: Get/set the type of object to be created.
.Ve
.PP
.Vb 2
\&           This may be changed at any time during the lifetime of this
\&           factory.
.Ve
.PP
.Vb 2
\& Returns : value of type (a string)
\& Args    : newvalue (optional, a string)
.Ve
.Sh "interface"
.IX Subsection "interface"
.Vb 7
\& Title   : interface
\& Usage   : $obj->interface($newval)
\& Function: Get/set the interface or base class that supplied types
\&           must at least implement (inherit from).
\& Example : 
\& Returns : value of interface (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.Sh "_validate_type"
.IX Subsection "_validate_type"
.Vb 4
\& Title   : _validate_type
\& Usage   : $factory->_validate_type($object)
\& Function: Called to let derived factories validate the type set
\&           via type().
.Ve
.PP
.Vb 3
\&           The default implementation here checks whether the supplied
\&           object skeleton implements the interface set via -interface
\&           upon factory instantiation.
.Ve
.PP
.Vb 4
\& Example :
\& Returns : TRUE if the type is to be considered valid, and FALSE otherwise.
\&           Instead of returning FALSE this method may also just throw
\&           an informative exception.
.Ve
.PP
.Vb 3
\&           The default implementation here will throw an exception
\&           if the supplied object does not inherit from the interface
\&           provided by the interface() method.
.Ve
.PP
.Vb 2
\& Args    : A hash reference blessed into the specified type, allowing
\&           queries like isa().
.Ve
