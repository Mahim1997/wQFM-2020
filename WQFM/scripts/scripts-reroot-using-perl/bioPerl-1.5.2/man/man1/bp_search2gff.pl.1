.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_SEARCH2GFF 1"
.TH BP_SEARCH2GFF 1 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage:
  search2gff [\-o outputfile] [\-f reportformat] [\-i inputfilename]  \s-1OR\s0 file1 file2 ..
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will turn a protein Search report (\s-1BLASTP\s0, \s-1FASTP\s0, \s-1SSEARCH\s0, 
\&\s-1AXT\s0, \s-1WABA\s0) into a \s-1GFF\s0 File.
.PP
The options are:
.PP
.Vb 33
\&   -i infilename      - (optional) inputfilename, will read
\&                        either ARGV files or from STDIN
\&   -o filename        - the output filename [default STDOUT]
\&   -f format          - search result format (blast, fasta,waba,axt)
\&                        (ssearch is fasta format). default is blast.
\&   -t/--type seqtype  - if you want to see query or hit information
\&                        in the GFF report
\&   -s/--source        - specify the source (will be algorithm name
\&                        otherwise like BLASTN)
\&   --method           - the method tag (primary_tag) of the features
\&                        (default is similarity)
\&   --scorefunc        - a string or a file that when parsed evaluates
\&                        to a closure which will be passed a feature
\&                        object and that returns the score to be printed
\&   --locfunc          - a string or a file that when parsed evaluates
\&                        to a closure which will be passed two
\&                        features, query and hit, and returns the
\&                        location (Bio::LocationI compliant) for the
\&                        GFF3 feature created for each HSP; the closure
\&                        may use the clone_loc() and create_loc()
\&                        functions for convenience, see their PODs
\&   --onehsp           - only print the first HSP feature for each hit
\&   -p/--parent        - the parent to which HSP features should refer
\&                        if not the name of the hit or query (depending
\&                        on --type)
\&   --target/--notarget - whether to always add the Target tag or not
\&   -h                 - this help menu
\&   --version          - GFF version to use (put a 3 here to use gff 3)
\&   --component        - generate GFF component fields (chromosome)
\&   -m/--match         - generate a 'match' line which is a container
\&                        of all the similarity HSPs
\&   --addid            - add ID tag in the absence of --match
\&   -c/--cutoff        - specify an evalue cutoff
.Ve
.PP
Additionally specify the filenames you want to process on the
command\-line.  If no files are specified then \s-1STDIN\s0 input is assumed.
You specify this by doing: search2gff < file1 file2 file3
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich, jason-at-bioperl-dot-org
.SH "Contributors"
.IX Header "Contributors"
Hilmar Lapp, hlapp-at-gmx-dot-net
.Sh "clone_loc"
.IX Subsection "clone_loc"
.Vb 4
\& Title   : clone_loc
\& Usage   : my $l = clone_loc($feature->location);
\& Function: Helper function to simplify the task of cloning locations
\&           for --locfunc closures.
.Ve
.PP
.Vb 6
\&           Presently simply implemented using Storable::dclone().
\& Example :
\& Returns : A L<Bio::LocationI> object of the same type and with the
\&           same properties as the argument, but physically different.
\&           All structured properties will be cloned as well.
\& Args    : A L<Bio::LocationI> compliant object
.Ve
.Sh "create_loc"
.IX Subsection "create_loc"
.Vb 5
\& Title   : create_loc
\& Usage   : my $l = create_loc("10..12");
\& Function: Helper function to simplify the task of creating locations
\&           for --locfunc closures. Creates a location from a feature-
\&           table formatted string.
.Ve
.PP
.Vb 4
\& Example :
\& Returns : A L<Bio::LocationI> object representing the location given
\&           as formatted string.
\& Args    : A GenBank feature-table formatted string.
.Ve
