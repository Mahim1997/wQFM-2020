.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_FAST_LOAD_GFF 1"
.TH BP_FAST_LOAD_GFF 1 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
bp_fast_load_gff.pl \- Fast\-load a Bio::DB::GFF database from GFF files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  % bp_fast_load_gff.pl -d testdb dna1.fa dna2.fa features1.gff features2.gff ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script loads a Bio::DB::GFF database with the features contained
in a list of \s-1GFF\s0 files and/or \s-1FASTA\s0 sequence files.  You must use the
exact variant of \s-1GFF\s0 described in Bio::DB::GFF.  Various
command-line options allow you to control which database to load and
whether to allow an existing database to be overwritten.
.PP
This script is similar to load_gff.pl, but is much faster.  However,
it is hard-coded to use MySQL and probably only works on Unix
platforms due to its reliance on pipes.  See bp_load_gff.pl for an
incremental loader that works with all databases supported by
Bio::DB::GFF, and bp_bulk_load_gff.pl for a fast MySQL loader that
supports all platforms.
.Sh "\s-1NOTES\s0"
.IX Subsection "NOTES"
If the filename is given as \*(L"\-\*(R" then the input is taken from
standard input. Compressed files (.gz, .Z, .bz2) are automatically
uncompressed.
.PP
\&\s-1FASTA\s0 format files are distinguished from \s-1GFF\s0 files by their filename
extensions.  Files ending in .fa, .fasta, .fast, .seq, .dna and their
uppercase variants are treated as \s-1FASTA\s0 files.  Everything else is
treated as a \s-1GFF\s0 file.  If you wish to load \-fasta files from \s-1STDIN\s0,
then use the \-f command-line swith with an argument of '\-', as in 
.PP
.Vb 1
\&    gunzip my_data.fa.gz | bp_fast_load_gff.pl -d test -f -
.Ve
.PP
The nature of the load requires that the database be on the local
machine and that the indicated user have the \*(L"file\*(R" privilege to load
the tables and have enough room in /usr/tmp (or whatever is specified
by the \e$TMPDIR environment variable), to hold the tables transiently.
If your MySQL is version 3.22.6 and was compiled using the \*(L"load local
file\*(R" option, then you may be able to load remote databases with local
data using the \-\-local option.
.PP
About maxfeature: the default value is 100,000,000 bases.  If you have
features that are close to or greater that 100Mb in length, then the
value of maxfeature should be increased to 1,000,000,000. This value
must be a power of 10.
.PP
If the list of \s-1GFF\s0 or fasta files exceeds the kernel limit for the
maximum number of command-line arguments, use the
\&\-\-long_list /path/to/files option.
.PP
The adaptor used is dbi::mysqlopt.  There is currently no way to
change this.
.SH "COMMAND-LINE OPTIONS"
.IX Header "COMMAND-LINE OPTIONS"
Command-line options can be abbreviated to single-letter options.
e.g. \-d instead of \-\-database.
.PP
.Vb 13
\&   --database <dsn>      Mysql database name
\&   --create              Reinitialize/create data tables without asking
\&   --local               Try to load a remote database using local data.
\&   --user                Username to log in as
\&   --fasta               File or directory containing fasta files to load
\&   --password            Password to use for authentication
\&   --long_list           Directory containing a very large number of
\&                         GFF and/or FASTA files
\&   --maxfeature          Set the value of the maximum feature size (default 100Mb; must be a power of 10)
\&   --group               A list of one or more tag names (comma or space separated)
\&                         to be used for grouping in the 9th column.
\&   --gff3_munge          Activate GFF3 name munging (see Bio::DB::GFF)
\&   --Temporary           Location of a writable scratch directory
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::DB::GFF, bulk_load_gff.pl, load_gff.pl
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein, lstein@cshl.org
.PP
Copyright (c) 2002 Cold Spring Harbor Laboratory
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
