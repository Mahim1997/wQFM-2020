.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_BIBLIO 1"
.TH BP_BIBLIO 1 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
biblio.PLS \- bioperl client for accessing and querying a bibliographic
repository.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage:
.PP
.Vb 7
\&  biblio.PLS [vh]
\&  biblio.PLS [bcFgOpq]         [-l <URL>]
\&  biblio.PLS [abcdDeFknmOpqrs] [-l <URL>] -i <collection-ID>
\&  biblio.PLS [abcdDeFknmOpqrs] [-l <URL>] - -find <keywords> \e
\&         [-attrs <attrs>]...
\&  biblio.PLS [Vq]              [-l <URL>]
\&  biblio.PLS [FOq]             [-f <filename>]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A client showing how to use Bio::Biblio module, a module for accessing
and querying a bibliographic repository.  It also shows how to use
modules Bio::Biblio::IO::medlinexml Bio::Biblio::IO::medline2ref which
converts \s-1XML\s0 \s-1MEDLINE\s0 citations into a simple hash table and into full
Perl objects.
.PP
It has many options in order to cover as many methods as possible.
Because of that, it can be also used as a fully functional
command-line client for querying repository and retrieving citations
from it.
.SH "OPTIONS"
.IX Header "OPTIONS"
.Sh "What service to contact:"
.IX Subsection "What service to contact:"
.Vb 3
\&  -l <URL> ... a location where a Bibliographic Query service is
\&               provided as a WebService
\&               (default: http://www.ebi.ac.uk/openbqs/services/MedlineSRS)
.Ve
.Sh "What query collection to use:"
.IX Subsection "What query collection to use:"
Some options do not need to specify a collection, some do.
.PP
.Vb 8
\&  -i <collection_id>  ... the collection ID can be obtained in a
\&                          previous invocation by specifying argument
\&                          '-p' (print ID)
\&  -find <keywords> [-attrs <attrs>]
\&                      ... create a collection from citations
\&                          containing given keywords - either in all
\&                          default attributes, or only in the given
\&                          attributes;
.Ve
.PP
.Vb 7
\&                          it is possible to repeat it, for example:
\&                             -find brazma -attrs authors -find -study
\&                          (the repetitions refine previous results)
\&                          both <keywords> and <attrs> may be
\&                          comma-delimited multi-values;
\&                          note that '-find' must be separated from
\&                          the rest of options by '-';
.Ve
.PP
.Vb 3
\&                          note that this script is a bit stupid
\&                          regarding quoted keywords, or keywords
\&                          containing commans... TBD better
.Ve
.PP
.Vb 3
\&  what XML format is used for citations:
\&  -Fm     ... MEDLINE (default)
\&  -Fp     ... PubMed
.Ve
.Sh "What to do (with the query collection):"
.IX Subsection "What to do (with the query collection):"
.Vb 5
\&  -g <id>    ... get citation <id>
\&  -c         ... get count (a number of citations)
\&  -p         ... print collection ID (which may be used in the next
\&                 invocation as an '-i' argument); it implies also '-k'
\&  -b         ... print citations in a non-XML format (TBD)
.Ve
.PP
Other options can be used only on a sub-collection \- which can be
obtained directly by specifying '\-i' argument, or indirectly by
specifying one or more queries by '\-find' arguments:
.PP
.Vb 13
\&  -d         ... get all citation IDs
\&  -n         ... get next citation
\&  -m [<how_many>] ... get 'how_many' more
\&  -r         ... reset iteration to the first citation in the collection
\&                 (now you can use '-n' or '-m' again)
\&  -a         ... get all citations - as an array
\&  -s         ... as '-a' but get it as one string
\&  -e         ... check if given collection exists and has more citations
\&  -k         ... keep resulting collection persistent (makes sense only
\&                 when collection IDs are being printed otherwise you
\&                 would not know how to contact the persistent collection
\&                 next time)
\&  -D         ... destroy given collection (makes sense together with '-i')
.Ve
.PP
Options specifying output format of the results:
.PP
.Vb 3
\&  -Ox        ... output in XML format (default)
\&  -Oo        ... output as Biblio objects
\&  -Or        ... output as a raw hashtable
.Ve
.PP
.Vb 2
\&  The options above can be used also for converting an XML MEDLINE
\&  local file without using any SOAP connection at all;
.Ve
.PP
.Vb 1
\&  -f <filename> ... an XML file to be read and converted
.Ve
.PP
Options dealing with controlled vocabularies:
.PP
.Vb 7
\&  -Vn                  ... get all vocabulary names
\&  -Vv::<name>          ... get all values from vocabulary <name>
\&  -Va::<name>          ... get everything from vocabulary <name>
\&  -Vd::<name>::<value> ... get description of <value>
\&                           from vocabulary <name>
\&  -Ve::<name>::<value> ... return 1 if <value> exists
\&                           in vocabulary <name>
.Ve
.PP
And the remaining options:
.PP
.Vb 3
\&  -h  ... get help
\&  -v  ... get version
\&  -q  ... be quiet (less verbose)
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\&  biblio.PLS - -find Java -attrs abstract -find perl
.Ve
.PP
Several separate invocations sharing the same query collection:
.PP
.Vb 11
\&  biblio.PLS -p -q - -find Brazma,Robinson > b.tmp
\&  biblio.PLS -i `cat b.tmp` -d
\&  MEDLINE2005/10693778
\&  MEDLINE2005/10977099
\&  MEDLINE2005/11726920
\&  MEDLINE2005/12225585
\&  MEDLINE2005/12227734
\&  biblio.PLS -i `cat b.tmp` -g 10693778
\&  <MedlineCitation Status="Completed">
\&   ...
\&  </MedlineCitation>
.Ve
.PP
.Vb 2
\&  biblio.PLS -i `cat b.tmp` -e
\&  Exists: 1       Has next: 1
.Ve
.PP
.Vb 2
\&  biblio.PLS -i `cat b.tmp` -D
\&  Destroyed OK.
.Ve
.PP
.Vb 2
\&  biblio.PLS -i `cat b.tmp` -e
\&  Exists: 0       Has next: 0
.Ve
.PP
Access to controlled vocabularies:
.PP
.Vb 9
\&  biblio.PLS -Vn
\&  MEDLINE2005/JournalArticle/properties
\&  MEDLINENEW/resource_types
\&  MEDLINE2005/resource_types
\&  MEDLINE2005/Person/properties
\&  MEDLINE2005/*/publication_type
\&  MEDLINENEW/JournalArticle/properties
\&  repository_subsets
\&  MEDLINE2005/*/citation_subset
.Ve
.PP
.Vb 6
\&  biblio.PLS -Vv::MEDLINE2005/JournalArticle/properties
\&  AllText
\&  ID
\&  PMID
\&  ISSN
\&  ...
.Ve
.PP
Converting local \s-1XML\s0 \s-1MEDLINE\s0 file:
.PP
.Vb 3
\&  biblio.PLS -g 10693778 > a_file.xml
\&  biblio.PLS -f a_file.xml -Oo   ... to Perl objects
\&  biblio.PLS -f a_file.xml -Or   ... as a raw hash
.Ve
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.Vb 1
\&  HTTPPROXY = <HTTP proxy server>
.Ve
.PP
Use this if you use this script on a machine which needs to access
remote \s-1HTTP\s0 targets via a proxy server.  For example:
.PP
.Vb 2
\&  export HTTPPROXY=http://128.243.220.41:3128
\&  biblio.PLS -c
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug trackingi system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Martin Senger"
.IX Header "AUTHOR - Martin Senger"
Email martin.senger@gmail.com
.SH "HISTORY"
.IX Header "HISTORY"
Written February 2002
Updated July 2005
