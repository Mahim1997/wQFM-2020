.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_FLANKS 1"
.TH BP_FLANKS 1 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
flanks \- finding flanking sequences for a variant in a sequence position
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  flanks --position POS [-p POS ...]  [--flanklen INT]
\&         accession | filename
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script allows you to extract a subsequence around a region of
interest from an existing sequence. The output if fasta formatted
sequence entry where the header line contains additional information
about the location.
.SH "OPTIONS"
.IX Header "OPTIONS"
The script takes one unnamed argument which be either a file name in
the local file system or a nucleotide sequence accession number.
.PP
.Vb 4
\&  -p         Position uses simple nucleotide sequence feature table
\&  --position notation to define the region of interest, typically a
\&             SNP or microsatellite repeat around which the flanks are
\&             defined.
.Ve
.PP
.Vb 2
\&             There can be more than one position option or you can
\&             give a comma separated list to one position option.
.Ve
.PP
.Vb 1
\&             The format of a position is:
.Ve
.PP
.Vb 1
\&                 [id:] int | range | in-between [-]
.Ve
.PP
.Vb 3
\&             The optional id is the name you want to call the new
\&             sequence. If it not given in joins running number to the
\&             entry name with an underscore.
.Ve
.PP
.Vb 3
\&             The position is either a point (e.g. 234), a range (e.g
\&             250..300) or insertion point between nucleotides
\&             (e.g. 234^235)
.Ve
.PP
.Vb 3
\&             If the position is not completely within the source
\&             sequence the output sequence will be truncated and it
\&             will print a warning.
.Ve
.PP
.Vb 3
\&             The optional hyphen [-] at the end of the position
\&             indicates that that you want the retrieved sequence to be
\&             in the opposite strand.
.Ve
.PP
.Vb 2
\&  -f         Defaults to 100. This is the length of the nucleotides
\&  --flanklen sequence retrieved on both sides of the given position.
.Ve
.PP
.Vb 1
\&             If the source file does not contain
.Ve
.SH "OUTPUT FORMAT"
.IX Header "OUTPUT FORMAT"
The output is a fasta formatted entry where the description file
contains tag=value pairs for information about where in the original
sequence the subsequence was taken.
.PP
The \s-1ID\s0 of the fasta entry is the name given at the command line joined
by hyphen to the filename or accesion of the source sequence. If no id
is given a series of consequtive integers is used.
.PP
The tag=value pairs are:
.IP "oripos=int" 3
.IX Item "oripos=int"
position in the source file
.IP "strand=1|\-1" 3
.IX Item "strand=1|-1"
strand of the sequence compared to the source sequence
.IP "allelepos=int" 3
.IX Item "allelepos=int"
position of the region of interest in the current entry.
The tag is the same as used by dbSNP@NCBI
.PP
The sequence highlights the allele variant position by showing it in
upper case and rest of the sequence in lower case characters.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&  % flanks ~/seq/ar.embl
.Ve
.PP
.Vb 5
\&  >1_/HOME/HEIKKI/SEQ/AR.EMBL oripos=100 strand=1 allelepos=100
\&  taataactcagttcttatttgcacctacttcagtggacactgaatttggaaggtggagga
\&  ttttgtttttttcttttaagatctgggcatcttttgaatCtacccttcaagtattaagag
\&  acagactgtgagcctagcagggcagatcttgtccaccgtgtgtcttcttctgcacgagac
\&  tttgaggctgtcagagcgct
.Ve
.SH "TODO"
.IX Header "TODO"
The input files are assumed to be in \s-1EMBL\s0 format and the sequences are
retrieved only from the \s-1EMB\s0 database. Make this more generic and use
the registry.
.PP
head1 \s-1FEEDBACK\s0
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email:  <heikki-at-bioperl-dot-org>
