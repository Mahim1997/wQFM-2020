.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_FETCH 1"
.TH BP_FETCH 1 "2008-07-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
bp_fetch.pl \- fetches sequences from bioperl indexed databases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  bp_fetch.pl swiss:ROA1_HUMAN
.Ve
.PP
.Vb 1
\&  bp_fetch.pl net::genbank:X47072
.Ve
.PP
.Vb 1
\&  bp_fetch.pl net::genpept:ROA1_HUMAN
.Ve
.PP
.Vb 1
\&  bp_fetch.pl ace::myserver.somewhere.edu,21000:X56676
.Ve
.PP
.Vb 1
\&  bp_fetch.pl -fmt GCG swiss:ROA1_HUMAN
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Fetches sequences using the \s-1DB\s0 access systems in Bioperl. The most
common use of this is to fetch sequences from bioperl indices built
using bpindex.pl, or to fetch sequences from the \s-1NCBI\s0 website
.PP
The format for retrieving sequences is delibrately like the
\&\s-1GCG/EMBOSS\s0 format like the following:
.PP
.Vb 1
\&  db:name
.Ve
.PP
with the potential of putting in a 'meta' database type, being
.PP
.Vb 1
\&  meta::db:name
.Ve
.PP
The meta information can be one of three types
.PP
.Vb 3
\&  local - local indexed flat file database
\&  net   - networked http: based database
\&  ace   - ACeDB database
.Ve
.PP
This information defaults to 'local' for database names with no meta
db information
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 4
\&  -fmt  <format> - Output format
\&                   Fasta (default), EMBL, Raw, swiss or GCG
\&  -acc           - string is an accession number, not an
\&                   id.
.Ve
.PP
options only for expert use
.PP
.Vb 4
\&  -dir  <dir>    - directory to find the index files
\&                  (overrides BIOPERL_INDEX environment varaible)
\&  -type <type>   - type of DBM file to open 
\&                  (overrides BIOPERL_INDEX_TYPE environment variable)
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
bp_index and bp_fetch coordinate where the databases lie using the
enviroment variable \s-1BIOPERL_INDEX\s0. This can be overridden using the
\&\-dir option. The index type (\s-1SDBM\s0 or DB_File or another index file)
is controlled by the \s-1BIOPERL_INDEX_TYPE\s0 variable. This defaults to 
SDBM_File 
.SH "USING IT YOURSELF"
.IX Header "USING IT YOURSELF"
bp_fetch is a wrapper around the bioperl modules which support 
the Bio::DB::BioSeqI abstract interface. These include:
.PP
.Vb 1
\&  Author          Code
.Ve
.PP
.Vb 4
\&  James Gilbert - Fasta indexer, Abstract indexer
\&  Aaron Mackay  - GenBank and GenPept DB access
\&  Ewan Birney   - EMBL .dat indexer
\&  Many people   - SeqIO code
.Ve
.PP
These modules can be used directly, which is far better than using
this script as a system call or a pipe to read from. Read the
source code for bp_fetch to see how it is used.
.SH "EXTENDING IT"
.IX Header "EXTENDING IT"
bp_fetch uses a number of different modules to provide access to
databases. Any module which subscribes to the Bio::DB::BioSeqI
interface can be used here. For flat file indexers, this is
best done by extending Bio::Index::Abstract, as is done in
Bio::Index::EMBL and Bio::Index::Fasta. For access to other
databases you will need to roll your own interface.
.PP
For new output formats, you need to add a new SeqIO module. The
easiest thing is to look at Bio::SeqIO::Fasta and figure out
how to hack it for your own format (call it something different
obviously).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://bioperl.org/wiki/Mailing_lists  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.open-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ewan Birney <birney@ebi.ac.uk>
